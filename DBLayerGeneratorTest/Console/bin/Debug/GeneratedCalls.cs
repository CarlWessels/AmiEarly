//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace AppointmentLibrary.Calls
{
	using System;
	using System.Data.SqlClient;
	using AppointmentLibrary.ProcResults;
	using AppointmentLibrary.Parameters;
	using System.Collections.Generic;
	public static class Calls
	{
			public static List<CreateUpsertResult> spCreateUpsertCall(string TableName, string connectionString)
			{
				spCreateUpsertParameters parameters = new spCreateUpsertParameters();
				parameters.TableName = TableName;

				return spCreateUpsertCall (parameters, connectionString);
			}
			public static List<CreateUpsertResult> spCreateUpsertCall (spCreateUpsertParameters parameters, string connectionString)
			{
				List<CreateUpsertResult> ret = new List<CreateUpsertResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
				conn.Open();
					string qry = "EXEC spCreateUpsert @TableName = @TableName";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@TableName", parameters.TableName == null ? (object)DBNull.Value :  parameters.TableName));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            CreateUpsertResult res = new CreateUpsertResult();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<SystemUserUpsertResult> spSystemUserUpsertCall(Guid? GUID, bool? IsDeleted, DateTime? ActiveDateTime, DateTime? TerminationDateTime, string Username, string Password, Guid? SystemUserGUID, bool? ReturnResults, string connectionString)
			{
				spSystemUserUpsertParameters parameters = new spSystemUserUpsertParameters();
				parameters.GUID = GUID;
				parameters.IsDeleted = IsDeleted;
				parameters.ActiveDateTime = ActiveDateTime;
				parameters.TerminationDateTime = TerminationDateTime;
				parameters.Username = Username;
				parameters.Password = Password;
				parameters.SystemUserGUID = SystemUserGUID;
				parameters.ReturnResults = ReturnResults;

				return spSystemUserUpsertCall (parameters, connectionString);
			}
			public static List<SystemUserUpsertResult> spSystemUserUpsertCall (spSystemUserUpsertParameters parameters, string connectionString)
			{
				List<SystemUserUpsertResult> ret = new List<SystemUserUpsertResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
				conn.Open();
					string qry = "EXEC spSystemUserUpsert @GUID = @GUID, @IsDeleted = @IsDeleted, @ActiveDateTime = @ActiveDateTime, @TerminationDateTime = @TerminationDateTime, @Username = @Username, @Password = @Password, @SystemUserGUID = @SystemUserGUID, @ReturnResults = @ReturnResults";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUID", parameters.GUID == null ? (object)DBNull.Value :  parameters.GUID));
						cmd.Parameters.Add(new SqlParameter("@IsDeleted", parameters.IsDeleted == null ? (object)DBNull.Value :  parameters.IsDeleted));
						cmd.Parameters.Add(new SqlParameter("@ActiveDateTime", parameters.ActiveDateTime == null ? (object)DBNull.Value :  parameters.ActiveDateTime));
						cmd.Parameters.Add(new SqlParameter("@TerminationDateTime", parameters.TerminationDateTime == null ? (object)DBNull.Value :  parameters.TerminationDateTime));
						cmd.Parameters.Add(new SqlParameter("@Username", parameters.Username == null ? (object)DBNull.Value :  parameters.Username));
						cmd.Parameters.Add(new SqlParameter("@Password", parameters.Password == null ? (object)DBNull.Value :  parameters.Password));
						cmd.Parameters.Add(new SqlParameter("@SystemUserGUID", parameters.SystemUserGUID == null ? (object)DBNull.Value :  parameters.SystemUserGUID));
						cmd.Parameters.Add(new SqlParameter("@ReturnResults", parameters.ReturnResults == null ? (object)DBNull.Value :  parameters.ReturnResults));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            SystemUserUpsertResult res = new SystemUserUpsertResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								if (!String.IsNullOrWhiteSpace(reader["ActiveDateTime"].ToString()))
								{
								    res.ActiveDateTime = DateTime.Parse(reader["ActiveDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["TerminationDateTime"].ToString()))
								{
								    res.TerminationDateTime = DateTime.Parse(reader["TerminationDateTime"].ToString());
								}
								res.IsActiveForNow = (bool)reader["IsActiveForNow"];
								res.Username = reader["Username"].ToString();
								res.PasswordHash = (byte[])(reader["PasswordHash"]);
								res.PasswordSalt = new Guid(reader["PasswordSalt"].ToString());
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<SystemUserGetResult> spSystemUserGetCall(Guid? SystemUserGUID, string connectionString)
			{
				spSystemUserGetParameters parameters = new spSystemUserGetParameters();
				parameters.SystemUserGUID = SystemUserGUID;

				return spSystemUserGetCall (parameters, connectionString);
			}
			public static List<SystemUserGetResult> spSystemUserGetCall (spSystemUserGetParameters parameters, string connectionString)
			{
				List<SystemUserGetResult> ret = new List<SystemUserGetResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
				conn.Open();
					string qry = "EXEC spSystemUserGet @SystemUserGUID = @SystemUserGUID";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@SystemUserGUID", parameters.SystemUserGUID == null ? (object)DBNull.Value :  parameters.SystemUserGUID));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            SystemUserGetResult res = new SystemUserGetResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								if (!String.IsNullOrWhiteSpace(reader["ActiveDateTime"].ToString()))
								{
								    res.ActiveDateTime = DateTime.Parse(reader["ActiveDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["TerminationDateTime"].ToString()))
								{
								    res.TerminationDateTime = DateTime.Parse(reader["TerminationDateTime"].ToString());
								}
								res.IsActiveForNow = (bool)reader["IsActiveForNow"];
								res.Username = reader["Username"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<GetChildrenResult> spGetChildrenCall(string TableName, string connectionString)
			{
				spGetChildrenParameters parameters = new spGetChildrenParameters();
				parameters.TableName = TableName;

				return spGetChildrenCall (parameters, connectionString);
			}
			public static List<GetChildrenResult> spGetChildrenCall (spGetChildrenParameters parameters, string connectionString)
			{
				List<GetChildrenResult> ret = new List<GetChildrenResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
				conn.Open();
					string qry = "EXEC spGetChildren @TableName = @TableName";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@TableName", parameters.TableName == null ? (object)DBNull.Value :  parameters.TableName));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            GetChildrenResult res = new GetChildrenResult();
								if (!String.IsNullOrWhiteSpace(reader["depth"].ToString()))
								{
								    res.depth = int.Parse(reader["depth"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["constraint_id"].ToString()))
								{
								    res.constraint_id = int.Parse(reader["constraint_id"].ToString());
								}
								res.constraint_name = reader["constraint_name"].ToString();
								if (!String.IsNullOrWhiteSpace(reader["parent_object_id"].ToString()))
								{
								    res.parent_object_id = int.Parse(reader["parent_object_id"].ToString());
								}
								res.parent_name = reader["parent_name"].ToString();
								if (!String.IsNullOrWhiteSpace(reader["referenced_object_id"].ToString()))
								{
								    res.referenced_object_id = int.Parse(reader["referenced_object_id"].ToString());
								}
								res.referenced_object_name = reader["referenced_object_name"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<CreateToXmlResult> spCreateToXmlCall(string TableName, string connectionString)
			{
				spCreateToXmlParameters parameters = new spCreateToXmlParameters();
				parameters.TableName = TableName;

				return spCreateToXmlCall (parameters, connectionString);
			}
			public static List<CreateToXmlResult> spCreateToXmlCall (spCreateToXmlParameters parameters, string connectionString)
			{
				List<CreateToXmlResult> ret = new List<CreateToXmlResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
				conn.Open();
					string qry = "EXEC spCreateToXml @TableName = @TableName";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@TableName", parameters.TableName == null ? (object)DBNull.Value :  parameters.TableName));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            CreateToXmlResult res = new CreateToXmlResult();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<AccountUpsertResult> spAccountUpsertCall(Guid? GUID, bool? IsDeleted, DateTime? ActiveDateTime, DateTime? TerminationDateTime, string AccountName, Guid? SystemUserGUID, bool? ReturnResults, string connectionString)
			{
				spAccountUpsertParameters parameters = new spAccountUpsertParameters();
				parameters.GUID = GUID;
				parameters.IsDeleted = IsDeleted;
				parameters.ActiveDateTime = ActiveDateTime;
				parameters.TerminationDateTime = TerminationDateTime;
				parameters.AccountName = AccountName;
				parameters.SystemUserGUID = SystemUserGUID;
				parameters.ReturnResults = ReturnResults;

				return spAccountUpsertCall (parameters, connectionString);
			}
			public static List<AccountUpsertResult> spAccountUpsertCall (spAccountUpsertParameters parameters, string connectionString)
			{
				List<AccountUpsertResult> ret = new List<AccountUpsertResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
				conn.Open();
					string qry = "EXEC spAccountUpsert @GUID = @GUID, @IsDeleted = @IsDeleted, @ActiveDateTime = @ActiveDateTime, @TerminationDateTime = @TerminationDateTime, @AccountName = @AccountName, @SystemUserGUID = @SystemUserGUID, @ReturnResults = @ReturnResults";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUID", parameters.GUID == null ? (object)DBNull.Value :  parameters.GUID));
						cmd.Parameters.Add(new SqlParameter("@IsDeleted", parameters.IsDeleted == null ? (object)DBNull.Value :  parameters.IsDeleted));
						cmd.Parameters.Add(new SqlParameter("@ActiveDateTime", parameters.ActiveDateTime == null ? (object)DBNull.Value :  parameters.ActiveDateTime));
						cmd.Parameters.Add(new SqlParameter("@TerminationDateTime", parameters.TerminationDateTime == null ? (object)DBNull.Value :  parameters.TerminationDateTime));
						cmd.Parameters.Add(new SqlParameter("@AccountName", parameters.AccountName == null ? (object)DBNull.Value :  parameters.AccountName));
						cmd.Parameters.Add(new SqlParameter("@SystemUserGUID", parameters.SystemUserGUID == null ? (object)DBNull.Value :  parameters.SystemUserGUID));
						cmd.Parameters.Add(new SqlParameter("@ReturnResults", parameters.ReturnResults == null ? (object)DBNull.Value :  parameters.ReturnResults));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            AccountUpsertResult res = new AccountUpsertResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								if (!String.IsNullOrWhiteSpace(reader["ActiveDateTime"].ToString()))
								{
								    res.ActiveDateTime = DateTime.Parse(reader["ActiveDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["TerminationDateTime"].ToString()))
								{
								    res.TerminationDateTime = DateTime.Parse(reader["TerminationDateTime"].ToString());
								}
								res.IsActiveForNow = (bool)reader["IsActiveForNow"];
								res.AccountName = reader["AccountName"].ToString();
								res.SystemUserGUID = new Guid(reader["SystemUserGUID"].ToString());
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<AccountGetResult> spAccountGetCall(Guid? AccountGUID, string connectionString)
			{
				spAccountGetParameters parameters = new spAccountGetParameters();
				parameters.AccountGUID = AccountGUID;

				return spAccountGetCall (parameters, connectionString);
			}
			public static List<AccountGetResult> spAccountGetCall (spAccountGetParameters parameters, string connectionString)
			{
				List<AccountGetResult> ret = new List<AccountGetResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
				conn.Open();
					string qry = "EXEC spAccountGet @AccountGUID = @AccountGUID";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@AccountGUID", parameters.AccountGUID == null ? (object)DBNull.Value :  parameters.AccountGUID));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            AccountGetResult res = new AccountGetResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								if (!String.IsNullOrWhiteSpace(reader["ActiveDateTime"].ToString()))
								{
								    res.ActiveDateTime = DateTime.Parse(reader["ActiveDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["TerminationDateTime"].ToString()))
								{
								    res.TerminationDateTime = DateTime.Parse(reader["TerminationDateTime"].ToString());
								}
								res.IsActiveForNow = (bool)reader["IsActiveForNow"];
								res.AccountName = reader["AccountName"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<ActivityTypeUpsertResult> spActivityTypeUpsertCall(Guid? GUID, bool? IsDeleted, string ActivityType, Guid? AccountGUID, Guid? SystemUserGUID, bool? ReturnResults, string connectionString)
			{
				spActivityTypeUpsertParameters parameters = new spActivityTypeUpsertParameters();
				parameters.GUID = GUID;
				parameters.IsDeleted = IsDeleted;
				parameters.ActivityType = ActivityType;
				parameters.AccountGUID = AccountGUID;
				parameters.SystemUserGUID = SystemUserGUID;
				parameters.ReturnResults = ReturnResults;

				return spActivityTypeUpsertCall (parameters, connectionString);
			}
			public static List<ActivityTypeUpsertResult> spActivityTypeUpsertCall (spActivityTypeUpsertParameters parameters, string connectionString)
			{
				List<ActivityTypeUpsertResult> ret = new List<ActivityTypeUpsertResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
				conn.Open();
					string qry = "EXEC spActivityTypeUpsert @GUID = @GUID, @IsDeleted = @IsDeleted, @ActivityType = @ActivityType, @AccountGUID = @AccountGUID, @SystemUserGUID = @SystemUserGUID, @ReturnResults = @ReturnResults";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUID", parameters.GUID == null ? (object)DBNull.Value :  parameters.GUID));
						cmd.Parameters.Add(new SqlParameter("@IsDeleted", parameters.IsDeleted == null ? (object)DBNull.Value :  parameters.IsDeleted));
						cmd.Parameters.Add(new SqlParameter("@ActivityType", parameters.ActivityType == null ? (object)DBNull.Value :  parameters.ActivityType));
						cmd.Parameters.Add(new SqlParameter("@AccountGUID", parameters.AccountGUID == null ? (object)DBNull.Value :  parameters.AccountGUID));
						cmd.Parameters.Add(new SqlParameter("@SystemUserGUID", parameters.SystemUserGUID == null ? (object)DBNull.Value :  parameters.SystemUserGUID));
						cmd.Parameters.Add(new SqlParameter("@ReturnResults", parameters.ReturnResults == null ? (object)DBNull.Value :  parameters.ReturnResults));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            ActivityTypeUpsertResult res = new ActivityTypeUpsertResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								res.ActivityType = reader["ActivityType"].ToString();
								res.AccountGUID = new Guid(reader["AccountGUID"].ToString());
								res.SystemUserGUID = new Guid(reader["SystemUserGUID"].ToString());
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<ActivityTypeGetResult> spActivityTypeGetCall(Guid? ActivityTypeGUID, string connectionString)
			{
				spActivityTypeGetParameters parameters = new spActivityTypeGetParameters();
				parameters.ActivityTypeGUID = ActivityTypeGUID;

				return spActivityTypeGetCall (parameters, connectionString);
			}
			public static List<ActivityTypeGetResult> spActivityTypeGetCall (spActivityTypeGetParameters parameters, string connectionString)
			{
				List<ActivityTypeGetResult> ret = new List<ActivityTypeGetResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
				conn.Open();
					string qry = "EXEC spActivityTypeGet @ActivityTypeGUID = @ActivityTypeGUID";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@ActivityTypeGUID", parameters.ActivityTypeGUID == null ? (object)DBNull.Value :  parameters.ActivityTypeGUID));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            ActivityTypeGetResult res = new ActivityTypeGetResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								res.ActivityType = reader["ActivityType"].ToString();
								res.AccountGUID = new Guid(reader["AccountGUID"].ToString());
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<AppointmentUpsertResult> spAppointmentUpsertCall(Guid? GUID, bool? IsDeleted, DateTime? StartDateTime, TimeSpan? Duration, DateTime? ActualStartDateTime, DateTime? ActualEndDateTime, Guid? CustomerGUID, Guid? StoreGUID, Guid? ServiceProviderGUID, Guid? SystemUserGUID, bool? ReturnResults, string connectionString)
			{
				spAppointmentUpsertParameters parameters = new spAppointmentUpsertParameters();
				parameters.GUID = GUID;
				parameters.IsDeleted = IsDeleted;
				parameters.StartDateTime = StartDateTime;
				parameters.Duration = Duration;
				parameters.ActualStartDateTime = ActualStartDateTime;
				parameters.ActualEndDateTime = ActualEndDateTime;
				parameters.CustomerGUID = CustomerGUID;
				parameters.StoreGUID = StoreGUID;
				parameters.ServiceProviderGUID = ServiceProviderGUID;
				parameters.SystemUserGUID = SystemUserGUID;
				parameters.ReturnResults = ReturnResults;

				return spAppointmentUpsertCall (parameters, connectionString);
			}
			public static List<AppointmentUpsertResult> spAppointmentUpsertCall (spAppointmentUpsertParameters parameters, string connectionString)
			{
				List<AppointmentUpsertResult> ret = new List<AppointmentUpsertResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
				conn.Open();
					string qry = "EXEC spAppointmentUpsert @GUID = @GUID, @IsDeleted = @IsDeleted, @StartDateTime = @StartDateTime, @Duration = @Duration, @ActualStartDateTime = @ActualStartDateTime, @ActualEndDateTime = @ActualEndDateTime, @CustomerGUID = @CustomerGUID, @StoreGUID = @StoreGUID, @ServiceProviderGUID = @ServiceProviderGUID, @SystemUserGUID = @SystemUserGUID, @ReturnResults = @ReturnResults";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUID", parameters.GUID == null ? (object)DBNull.Value :  parameters.GUID));
						cmd.Parameters.Add(new SqlParameter("@IsDeleted", parameters.IsDeleted == null ? (object)DBNull.Value :  parameters.IsDeleted));
						cmd.Parameters.Add(new SqlParameter("@StartDateTime", parameters.StartDateTime == null ? (object)DBNull.Value :  parameters.StartDateTime));
						cmd.Parameters.Add(new SqlParameter("@Duration", parameters.Duration == null ? (object)DBNull.Value :  parameters.Duration));
						cmd.Parameters.Add(new SqlParameter("@ActualStartDateTime", parameters.ActualStartDateTime == null ? (object)DBNull.Value :  parameters.ActualStartDateTime));
						cmd.Parameters.Add(new SqlParameter("@ActualEndDateTime", parameters.ActualEndDateTime == null ? (object)DBNull.Value :  parameters.ActualEndDateTime));
						cmd.Parameters.Add(new SqlParameter("@CustomerGUID", parameters.CustomerGUID == null ? (object)DBNull.Value :  parameters.CustomerGUID));
						cmd.Parameters.Add(new SqlParameter("@StoreGUID", parameters.StoreGUID == null ? (object)DBNull.Value :  parameters.StoreGUID));
						cmd.Parameters.Add(new SqlParameter("@ServiceProviderGUID", parameters.ServiceProviderGUID == null ? (object)DBNull.Value :  parameters.ServiceProviderGUID));
						cmd.Parameters.Add(new SqlParameter("@SystemUserGUID", parameters.SystemUserGUID == null ? (object)DBNull.Value :  parameters.SystemUserGUID));
						cmd.Parameters.Add(new SqlParameter("@ReturnResults", parameters.ReturnResults == null ? (object)DBNull.Value :  parameters.ReturnResults));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            AppointmentUpsertResult res = new AppointmentUpsertResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								if (!String.IsNullOrWhiteSpace(reader["StartDateTime"].ToString()))
								{
								    res.StartDateTime = DateTime.Parse(reader["StartDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["EndDateTime"].ToString()))
								{
								    res.EndDateTime = DateTime.Parse(reader["EndDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["Duration"].ToString()))
								{
								    res.Duration = TimeSpan.Parse(reader["Duration"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["ActualStartDateTime"].ToString()))
								{
								    res.ActualStartDateTime = DateTime.Parse(reader["ActualStartDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["ActualEndDateTime"].ToString()))
								{
								    res.ActualEndDateTime = DateTime.Parse(reader["ActualEndDateTime"].ToString());
								}
								res.CustomerGUID = new Guid(reader["CustomerGUID"].ToString());
								res.StoreGUID = new Guid(reader["StoreGUID"].ToString());
								res.ServiceProviderGUID = new Guid(reader["ServiceProviderGUID"].ToString());
								res.SystemUserGUID = new Guid(reader["SystemUserGUID"].ToString());
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<AppointmentGetResult> spAppointmentGetCall(Guid? AppointmentGUID, string connectionString)
			{
				spAppointmentGetParameters parameters = new spAppointmentGetParameters();
				parameters.AppointmentGUID = AppointmentGUID;

				return spAppointmentGetCall (parameters, connectionString);
			}
			public static List<AppointmentGetResult> spAppointmentGetCall (spAppointmentGetParameters parameters, string connectionString)
			{
				List<AppointmentGetResult> ret = new List<AppointmentGetResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
				conn.Open();
					string qry = "EXEC spAppointmentGet @AppointmentGUID = @AppointmentGUID";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@AppointmentGUID", parameters.AppointmentGUID == null ? (object)DBNull.Value :  parameters.AppointmentGUID));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            AppointmentGetResult res = new AppointmentGetResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								res.ServiceProviderFirstname = reader["ServiceProviderFirstname"].ToString();
								res.ServiceProviderSurname = reader["ServiceProviderSurname"].ToString();
								res.CustomerFirstname = reader["CustomerFirstname"].ToString();
								res.CustomerSurname = reader["CustomerSurname"].ToString();
								if (!String.IsNullOrWhiteSpace(reader["StartDateTime"].ToString()))
								{
								    res.StartDateTime = DateTime.Parse(reader["StartDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["EndDateTime"].ToString()))
								{
								    res.EndDateTime = DateTime.Parse(reader["EndDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["Duration"].ToString()))
								{
								    res.Duration = TimeSpan.Parse(reader["Duration"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["ActualStartDateTime"].ToString()))
								{
								    res.ActualStartDateTime = DateTime.Parse(reader["ActualStartDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["ActualEndDateTime"].ToString()))
								{
								    res.ActualEndDateTime = DateTime.Parse(reader["ActualEndDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["ActualDuration"].ToString()))
								{
								    res.ActualDuration = TimeSpan.Parse(reader["ActualDuration"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DelayTime"].ToString()))
								{
								    res.DelayTime = int.Parse(reader["DelayTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["ExpectedDelay"].ToString()))
								{
								    res.ExpectedDelay = int.Parse(reader["ExpectedDelay"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["ExpectedStartDateTime"].ToString()))
								{
								    res.ExpectedStartDateTime = DateTime.Parse(reader["ExpectedStartDateTime"].ToString());
								}
								res.Colour = reader["Colour"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<LoginResult> spLoginCall(string UserName, string Password, string connectionString)
			{
				spLoginParameters parameters = new spLoginParameters();
				parameters.UserName = UserName;
				parameters.Password = Password;

				return spLoginCall (parameters, connectionString);
			}
			public static List<LoginResult> spLoginCall (spLoginParameters parameters, string connectionString)
			{
				List<LoginResult> ret = new List<LoginResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
				conn.Open();
					string qry = "EXEC spLogin @UserName = @UserName, @Password = @Password";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@UserName", parameters.UserName == null ? (object)DBNull.Value :  parameters.UserName));
						cmd.Parameters.Add(new SqlParameter("@Password", parameters.Password == null ? (object)DBNull.Value :  parameters.Password));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            LoginResult res = new LoginResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								if (!String.IsNullOrWhiteSpace(reader["ActiveDateTime"].ToString()))
								{
								    res.ActiveDateTime = DateTime.Parse(reader["ActiveDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["TerminationDateTime"].ToString()))
								{
								    res.TerminationDateTime = DateTime.Parse(reader["TerminationDateTime"].ToString());
								}
								res.IsActiveForNow = (bool)reader["IsActiveForNow"];
								res.Username = reader["Username"].ToString();
								res.PasswordHash = (byte[])(reader["PasswordHash"]);
								res.PasswordSalt = new Guid(reader["PasswordSalt"].ToString());
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<ServiceProviderUpsertResult> spServiceProviderUpsertCall(Guid? GUID, bool? IsDeleted, DateTime? ActiveDateTime, DateTime? TerminationDateTime, string Firstname, string Surname, Guid? AccountGUID, Guid? SystemUserGUID, bool? ReturnResults, string connectionString)
			{
				spServiceProviderUpsertParameters parameters = new spServiceProviderUpsertParameters();
				parameters.GUID = GUID;
				parameters.IsDeleted = IsDeleted;
				parameters.ActiveDateTime = ActiveDateTime;
				parameters.TerminationDateTime = TerminationDateTime;
				parameters.Firstname = Firstname;
				parameters.Surname = Surname;
				parameters.AccountGUID = AccountGUID;
				parameters.SystemUserGUID = SystemUserGUID;
				parameters.ReturnResults = ReturnResults;

				return spServiceProviderUpsertCall (parameters, connectionString);
			}
			public static List<ServiceProviderUpsertResult> spServiceProviderUpsertCall (spServiceProviderUpsertParameters parameters, string connectionString)
			{
				List<ServiceProviderUpsertResult> ret = new List<ServiceProviderUpsertResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
				conn.Open();
					string qry = "EXEC spServiceProviderUpsert @GUID = @GUID, @IsDeleted = @IsDeleted, @ActiveDateTime = @ActiveDateTime, @TerminationDateTime = @TerminationDateTime, @Firstname = @Firstname, @Surname = @Surname, @AccountGUID = @AccountGUID, @SystemUserGUID = @SystemUserGUID, @ReturnResults = @ReturnResults";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUID", parameters.GUID == null ? (object)DBNull.Value :  parameters.GUID));
						cmd.Parameters.Add(new SqlParameter("@IsDeleted", parameters.IsDeleted == null ? (object)DBNull.Value :  parameters.IsDeleted));
						cmd.Parameters.Add(new SqlParameter("@ActiveDateTime", parameters.ActiveDateTime == null ? (object)DBNull.Value :  parameters.ActiveDateTime));
						cmd.Parameters.Add(new SqlParameter("@TerminationDateTime", parameters.TerminationDateTime == null ? (object)DBNull.Value :  parameters.TerminationDateTime));
						cmd.Parameters.Add(new SqlParameter("@Firstname", parameters.Firstname == null ? (object)DBNull.Value :  parameters.Firstname));
						cmd.Parameters.Add(new SqlParameter("@Surname", parameters.Surname == null ? (object)DBNull.Value :  parameters.Surname));
						cmd.Parameters.Add(new SqlParameter("@AccountGUID", parameters.AccountGUID == null ? (object)DBNull.Value :  parameters.AccountGUID));
						cmd.Parameters.Add(new SqlParameter("@SystemUserGUID", parameters.SystemUserGUID == null ? (object)DBNull.Value :  parameters.SystemUserGUID));
						cmd.Parameters.Add(new SqlParameter("@ReturnResults", parameters.ReturnResults == null ? (object)DBNull.Value :  parameters.ReturnResults));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            ServiceProviderUpsertResult res = new ServiceProviderUpsertResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								if (!String.IsNullOrWhiteSpace(reader["ActiveDateTime"].ToString()))
								{
								    res.ActiveDateTime = DateTime.Parse(reader["ActiveDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["TerminationDateTime"].ToString()))
								{
								    res.TerminationDateTime = DateTime.Parse(reader["TerminationDateTime"].ToString());
								}
								res.IsActiveForNow = (bool)reader["IsActiveForNow"];
								res.Firstname = reader["Firstname"].ToString();
								res.Surname = reader["Surname"].ToString();
								res.AccountGUID = new Guid(reader["AccountGUID"].ToString());
								res.SystemUserGUID = new Guid(reader["SystemUserGUID"].ToString());
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<ServiceProviderGetResult> spServiceProviderGetCall(Guid? ServiceProviderGUID, string connectionString)
			{
				spServiceProviderGetParameters parameters = new spServiceProviderGetParameters();
				parameters.ServiceProviderGUID = ServiceProviderGUID;

				return spServiceProviderGetCall (parameters, connectionString);
			}
			public static List<ServiceProviderGetResult> spServiceProviderGetCall (spServiceProviderGetParameters parameters, string connectionString)
			{
				List<ServiceProviderGetResult> ret = new List<ServiceProviderGetResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
				conn.Open();
					string qry = "EXEC spServiceProviderGet @ServiceProviderGUID = @ServiceProviderGUID";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@ServiceProviderGUID", parameters.ServiceProviderGUID == null ? (object)DBNull.Value :  parameters.ServiceProviderGUID));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            ServiceProviderGetResult res = new ServiceProviderGetResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								if (!String.IsNullOrWhiteSpace(reader["ActiveDateTime"].ToString()))
								{
								    res.ActiveDateTime = DateTime.Parse(reader["ActiveDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["TerminationDateTime"].ToString()))
								{
								    res.TerminationDateTime = DateTime.Parse(reader["TerminationDateTime"].ToString());
								}
								res.IsActiveForNow = (bool)reader["IsActiveForNow"];
								res.Firstname = reader["Firstname"].ToString();
								res.Surname = reader["Surname"].ToString();
								res.AccountGUID = new Guid(reader["AccountGUID"].ToString());
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<CustomerUpsertResult> spCustomerUpsertCall(Guid? GUID, bool? IsDeleted, DateTime? ActiveDateTime, DateTime? TerminationDateTime, string Firstname, string Surname, Guid? AccountGUID, Guid? SystemUserGUID, bool? ReturnResults, string connectionString)
			{
				spCustomerUpsertParameters parameters = new spCustomerUpsertParameters();
				parameters.GUID = GUID;
				parameters.IsDeleted = IsDeleted;
				parameters.ActiveDateTime = ActiveDateTime;
				parameters.TerminationDateTime = TerminationDateTime;
				parameters.Firstname = Firstname;
				parameters.Surname = Surname;
				parameters.AccountGUID = AccountGUID;
				parameters.SystemUserGUID = SystemUserGUID;
				parameters.ReturnResults = ReturnResults;

				return spCustomerUpsertCall (parameters, connectionString);
			}
			public static List<CustomerUpsertResult> spCustomerUpsertCall (spCustomerUpsertParameters parameters, string connectionString)
			{
				List<CustomerUpsertResult> ret = new List<CustomerUpsertResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
				conn.Open();
					string qry = "EXEC spCustomerUpsert @GUID = @GUID, @IsDeleted = @IsDeleted, @ActiveDateTime = @ActiveDateTime, @TerminationDateTime = @TerminationDateTime, @Firstname = @Firstname, @Surname = @Surname, @AccountGUID = @AccountGUID, @SystemUserGUID = @SystemUserGUID, @ReturnResults = @ReturnResults";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUID", parameters.GUID == null ? (object)DBNull.Value :  parameters.GUID));
						cmd.Parameters.Add(new SqlParameter("@IsDeleted", parameters.IsDeleted == null ? (object)DBNull.Value :  parameters.IsDeleted));
						cmd.Parameters.Add(new SqlParameter("@ActiveDateTime", parameters.ActiveDateTime == null ? (object)DBNull.Value :  parameters.ActiveDateTime));
						cmd.Parameters.Add(new SqlParameter("@TerminationDateTime", parameters.TerminationDateTime == null ? (object)DBNull.Value :  parameters.TerminationDateTime));
						cmd.Parameters.Add(new SqlParameter("@Firstname", parameters.Firstname == null ? (object)DBNull.Value :  parameters.Firstname));
						cmd.Parameters.Add(new SqlParameter("@Surname", parameters.Surname == null ? (object)DBNull.Value :  parameters.Surname));
						cmd.Parameters.Add(new SqlParameter("@AccountGUID", parameters.AccountGUID == null ? (object)DBNull.Value :  parameters.AccountGUID));
						cmd.Parameters.Add(new SqlParameter("@SystemUserGUID", parameters.SystemUserGUID == null ? (object)DBNull.Value :  parameters.SystemUserGUID));
						cmd.Parameters.Add(new SqlParameter("@ReturnResults", parameters.ReturnResults == null ? (object)DBNull.Value :  parameters.ReturnResults));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            CustomerUpsertResult res = new CustomerUpsertResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								if (!String.IsNullOrWhiteSpace(reader["ActiveDateTime"].ToString()))
								{
								    res.ActiveDateTime = DateTime.Parse(reader["ActiveDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["TerminationDateTime"].ToString()))
								{
								    res.TerminationDateTime = DateTime.Parse(reader["TerminationDateTime"].ToString());
								}
								res.IsActiveForNow = (bool)reader["IsActiveForNow"];
								res.Firstname = reader["Firstname"].ToString();
								res.Surname = reader["Surname"].ToString();
								res.AccountGUID = new Guid(reader["AccountGUID"].ToString());
								res.SystemUserGUID = new Guid(reader["SystemUserGUID"].ToString());
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<CustomerGetResult> spCustomerGetCall(Guid? CustomerGUID, string connectionString)
			{
				spCustomerGetParameters parameters = new spCustomerGetParameters();
				parameters.CustomerGUID = CustomerGUID;

				return spCustomerGetCall (parameters, connectionString);
			}
			public static List<CustomerGetResult> spCustomerGetCall (spCustomerGetParameters parameters, string connectionString)
			{
				List<CustomerGetResult> ret = new List<CustomerGetResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
				conn.Open();
					string qry = "EXEC spCustomerGet @CustomerGUID = @CustomerGUID";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@CustomerGUID", parameters.CustomerGUID == null ? (object)DBNull.Value :  parameters.CustomerGUID));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            CustomerGetResult res = new CustomerGetResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								if (!String.IsNullOrWhiteSpace(reader["ActiveDateTime"].ToString()))
								{
								    res.ActiveDateTime = DateTime.Parse(reader["ActiveDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["TerminationDateTime"].ToString()))
								{
								    res.TerminationDateTime = DateTime.Parse(reader["TerminationDateTime"].ToString());
								}
								res.IsActiveForNow = (bool)reader["IsActiveForNow"];
								res.Firstname = reader["Firstname"].ToString();
								res.Surname = reader["Surname"].ToString();
								res.AccountGUID = new Guid(reader["AccountGUID"].ToString());
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<ActivityScheduleUpsertResult> spActivityScheduleUpsertCall(Guid? GUID, bool? IsDeleted, int? DoW, TimeSpan? StartTime, TimeSpan? EndTime, Guid? ActivityTypeGUID, Guid? ServiceProviderGUID, Guid? SystemUserGUID, bool? ReturnResults, string connectionString)
			{
				spActivityScheduleUpsertParameters parameters = new spActivityScheduleUpsertParameters();
				parameters.GUID = GUID;
				parameters.IsDeleted = IsDeleted;
				parameters.DoW = DoW;
				parameters.StartTime = StartTime;
				parameters.EndTime = EndTime;
				parameters.ActivityTypeGUID = ActivityTypeGUID;
				parameters.ServiceProviderGUID = ServiceProviderGUID;
				parameters.SystemUserGUID = SystemUserGUID;
				parameters.ReturnResults = ReturnResults;

				return spActivityScheduleUpsertCall (parameters, connectionString);
			}
			public static List<ActivityScheduleUpsertResult> spActivityScheduleUpsertCall (spActivityScheduleUpsertParameters parameters, string connectionString)
			{
				List<ActivityScheduleUpsertResult> ret = new List<ActivityScheduleUpsertResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
				conn.Open();
					string qry = "EXEC spActivityScheduleUpsert @GUID = @GUID, @IsDeleted = @IsDeleted, @DoW = @DoW, @StartTime = @StartTime, @EndTime = @EndTime, @ActivityTypeGUID = @ActivityTypeGUID, @ServiceProviderGUID = @ServiceProviderGUID, @SystemUserGUID = @SystemUserGUID, @ReturnResults = @ReturnResults";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUID", parameters.GUID == null ? (object)DBNull.Value :  parameters.GUID));
						cmd.Parameters.Add(new SqlParameter("@IsDeleted", parameters.IsDeleted == null ? (object)DBNull.Value :  parameters.IsDeleted));
						cmd.Parameters.Add(new SqlParameter("@DoW", parameters.DoW == null ? (object)DBNull.Value :  parameters.DoW));
						cmd.Parameters.Add(new SqlParameter("@StartTime", parameters.StartTime == null ? (object)DBNull.Value :  parameters.StartTime));
						cmd.Parameters.Add(new SqlParameter("@EndTime", parameters.EndTime == null ? (object)DBNull.Value :  parameters.EndTime));
						cmd.Parameters.Add(new SqlParameter("@ActivityTypeGUID", parameters.ActivityTypeGUID == null ? (object)DBNull.Value :  parameters.ActivityTypeGUID));
						cmd.Parameters.Add(new SqlParameter("@ServiceProviderGUID", parameters.ServiceProviderGUID == null ? (object)DBNull.Value :  parameters.ServiceProviderGUID));
						cmd.Parameters.Add(new SqlParameter("@SystemUserGUID", parameters.SystemUserGUID == null ? (object)DBNull.Value :  parameters.SystemUserGUID));
						cmd.Parameters.Add(new SqlParameter("@ReturnResults", parameters.ReturnResults == null ? (object)DBNull.Value :  parameters.ReturnResults));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            ActivityScheduleUpsertResult res = new ActivityScheduleUpsertResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								if (!String.IsNullOrWhiteSpace(reader["DoW"].ToString()))
								{
								    res.DoW = int.Parse(reader["DoW"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["StartTime"].ToString()))
								{
								    res.StartTime = TimeSpan.Parse(reader["StartTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["EndTime"].ToString()))
								{
								    res.EndTime = TimeSpan.Parse(reader["EndTime"].ToString());
								}
								res.ActivityTypeGUID = new Guid(reader["ActivityTypeGUID"].ToString());
								res.ServiceProviderGUID = new Guid(reader["ServiceProviderGUID"].ToString());
								res.SystemUserGUID = new Guid(reader["SystemUserGUID"].ToString());
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<ActivityScheduleGetResult> spActivityScheduleGetCall(Guid? ActivityScheduleGUID, string connectionString)
			{
				spActivityScheduleGetParameters parameters = new spActivityScheduleGetParameters();
				parameters.ActivityScheduleGUID = ActivityScheduleGUID;

				return spActivityScheduleGetCall (parameters, connectionString);
			}
			public static List<ActivityScheduleGetResult> spActivityScheduleGetCall (spActivityScheduleGetParameters parameters, string connectionString)
			{
				List<ActivityScheduleGetResult> ret = new List<ActivityScheduleGetResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
				conn.Open();
					string qry = "EXEC spActivityScheduleGet @ActivityScheduleGUID = @ActivityScheduleGUID";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@ActivityScheduleGUID", parameters.ActivityScheduleGUID == null ? (object)DBNull.Value :  parameters.ActivityScheduleGUID));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            ActivityScheduleGetResult res = new ActivityScheduleGetResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								if (!String.IsNullOrWhiteSpace(reader["DoW"].ToString()))
								{
								    res.DoW = int.Parse(reader["DoW"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["StartTime"].ToString()))
								{
								    res.StartTime = TimeSpan.Parse(reader["StartTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["EndTime"].ToString()))
								{
								    res.EndTime = TimeSpan.Parse(reader["EndTime"].ToString());
								}
								res.ActivityTypeGUID = new Guid(reader["ActivityTypeGUID"].ToString());
								res.ServiceProviderGUID = new Guid(reader["ServiceProviderGUID"].ToString());
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<StoreUpsertResult> spStoreUpsertCall(Guid? GUID, bool? IsDeleted, DateTime? ActiveDateTime, DateTime? TerminationDateTime, string StoreName, Guid? AccountGUID, Guid? SystemUserGUID, bool? ReturnResults, string connectionString)
			{
				spStoreUpsertParameters parameters = new spStoreUpsertParameters();
				parameters.GUID = GUID;
				parameters.IsDeleted = IsDeleted;
				parameters.ActiveDateTime = ActiveDateTime;
				parameters.TerminationDateTime = TerminationDateTime;
				parameters.StoreName = StoreName;
				parameters.AccountGUID = AccountGUID;
				parameters.SystemUserGUID = SystemUserGUID;
				parameters.ReturnResults = ReturnResults;

				return spStoreUpsertCall (parameters, connectionString);
			}
			public static List<StoreUpsertResult> spStoreUpsertCall (spStoreUpsertParameters parameters, string connectionString)
			{
				List<StoreUpsertResult> ret = new List<StoreUpsertResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
				conn.Open();
					string qry = "EXEC spStoreUpsert @GUID = @GUID, @IsDeleted = @IsDeleted, @ActiveDateTime = @ActiveDateTime, @TerminationDateTime = @TerminationDateTime, @StoreName = @StoreName, @AccountGUID = @AccountGUID, @SystemUserGUID = @SystemUserGUID, @ReturnResults = @ReturnResults";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUID", parameters.GUID == null ? (object)DBNull.Value :  parameters.GUID));
						cmd.Parameters.Add(new SqlParameter("@IsDeleted", parameters.IsDeleted == null ? (object)DBNull.Value :  parameters.IsDeleted));
						cmd.Parameters.Add(new SqlParameter("@ActiveDateTime", parameters.ActiveDateTime == null ? (object)DBNull.Value :  parameters.ActiveDateTime));
						cmd.Parameters.Add(new SqlParameter("@TerminationDateTime", parameters.TerminationDateTime == null ? (object)DBNull.Value :  parameters.TerminationDateTime));
						cmd.Parameters.Add(new SqlParameter("@StoreName", parameters.StoreName == null ? (object)DBNull.Value :  parameters.StoreName));
						cmd.Parameters.Add(new SqlParameter("@AccountGUID", parameters.AccountGUID == null ? (object)DBNull.Value :  parameters.AccountGUID));
						cmd.Parameters.Add(new SqlParameter("@SystemUserGUID", parameters.SystemUserGUID == null ? (object)DBNull.Value :  parameters.SystemUserGUID));
						cmd.Parameters.Add(new SqlParameter("@ReturnResults", parameters.ReturnResults == null ? (object)DBNull.Value :  parameters.ReturnResults));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            StoreUpsertResult res = new StoreUpsertResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								if (!String.IsNullOrWhiteSpace(reader["ActiveDateTime"].ToString()))
								{
								    res.ActiveDateTime = DateTime.Parse(reader["ActiveDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["TerminationDateTime"].ToString()))
								{
								    res.TerminationDateTime = DateTime.Parse(reader["TerminationDateTime"].ToString());
								}
								res.IsActiveForNow = (bool)reader["IsActiveForNow"];
								res.StoreName = reader["StoreName"].ToString();
								res.AccountGUID = new Guid(reader["AccountGUID"].ToString());
								res.SystemUserGUID = new Guid(reader["SystemUserGUID"].ToString());
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<StoreGetResult> spStoreGetCall(Guid? StoreGUID, string connectionString)
			{
				spStoreGetParameters parameters = new spStoreGetParameters();
				parameters.StoreGUID = StoreGUID;

				return spStoreGetCall (parameters, connectionString);
			}
			public static List<StoreGetResult> spStoreGetCall (spStoreGetParameters parameters, string connectionString)
			{
				List<StoreGetResult> ret = new List<StoreGetResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
				conn.Open();
					string qry = "EXEC spStoreGet @StoreGUID = @StoreGUID";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@StoreGUID", parameters.StoreGUID == null ? (object)DBNull.Value :  parameters.StoreGUID));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            StoreGetResult res = new StoreGetResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								if (!String.IsNullOrWhiteSpace(reader["ActiveDateTime"].ToString()))
								{
								    res.ActiveDateTime = DateTime.Parse(reader["ActiveDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["TerminationDateTime"].ToString()))
								{
								    res.TerminationDateTime = DateTime.Parse(reader["TerminationDateTime"].ToString());
								}
								res.IsActiveForNow = (bool)reader["IsActiveForNow"];
								res.StoreName = reader["StoreName"].ToString();
								res.AccountGUID = new Guid(reader["AccountGUID"].ToString());
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<AccountToXMLResult> spAccountToXMLCall(string GUIDS, string connectionString)
			{
				spAccountToXMLParameters parameters = new spAccountToXMLParameters();
				parameters.GUIDS = GUIDS;

				return spAccountToXMLCall (parameters, connectionString);
			}
			public static List<AccountToXMLResult> spAccountToXMLCall (spAccountToXMLParameters parameters, string connectionString)
			{
				List<AccountToXMLResult> ret = new List<AccountToXMLResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
				conn.Open();
					string qry = "EXEC spAccountToXML @GUIDS = @GUIDS";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUIDS", parameters.GUIDS == null ? (object)DBNull.Value :  parameters.GUIDS));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            AccountToXMLResult res = new AccountToXMLResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<AccountToXMLByDateTimeResult> spAccountToXMLByDateTimeCall(DateTime? FromDateTime, DateTime? ToDateTime, string connectionString)
			{
				spAccountToXMLByDateTimeParameters parameters = new spAccountToXMLByDateTimeParameters();
				parameters.FromDateTime = FromDateTime;
				parameters.ToDateTime = ToDateTime;

				return spAccountToXMLByDateTimeCall (parameters, connectionString);
			}
			public static List<AccountToXMLByDateTimeResult> spAccountToXMLByDateTimeCall (spAccountToXMLByDateTimeParameters parameters, string connectionString)
			{
				List<AccountToXMLByDateTimeResult> ret = new List<AccountToXMLByDateTimeResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
				conn.Open();
					string qry = "EXEC spAccountToXMLByDateTime @FromDateTime = @FromDateTime, @ToDateTime = @ToDateTime";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@FromDateTime", parameters.FromDateTime == null ? (object)DBNull.Value :  parameters.FromDateTime));
						cmd.Parameters.Add(new SqlParameter("@ToDateTime", parameters.ToDateTime == null ? (object)DBNull.Value :  parameters.ToDateTime));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            AccountToXMLByDateTimeResult res = new AccountToXMLByDateTimeResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<ActivityTypeToXMLResult> spActivityTypeToXMLCall(string GUIDS, string connectionString)
			{
				spActivityTypeToXMLParameters parameters = new spActivityTypeToXMLParameters();
				parameters.GUIDS = GUIDS;

				return spActivityTypeToXMLCall (parameters, connectionString);
			}
			public static List<ActivityTypeToXMLResult> spActivityTypeToXMLCall (spActivityTypeToXMLParameters parameters, string connectionString)
			{
				List<ActivityTypeToXMLResult> ret = new List<ActivityTypeToXMLResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
				conn.Open();
					string qry = "EXEC spActivityTypeToXML @GUIDS = @GUIDS";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUIDS", parameters.GUIDS == null ? (object)DBNull.Value :  parameters.GUIDS));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            ActivityTypeToXMLResult res = new ActivityTypeToXMLResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<ActivityTypeToXMLByDateTimeResult> spActivityTypeToXMLByDateTimeCall(DateTime? FromDateTime, DateTime? ToDateTime, string connectionString)
			{
				spActivityTypeToXMLByDateTimeParameters parameters = new spActivityTypeToXMLByDateTimeParameters();
				parameters.FromDateTime = FromDateTime;
				parameters.ToDateTime = ToDateTime;

				return spActivityTypeToXMLByDateTimeCall (parameters, connectionString);
			}
			public static List<ActivityTypeToXMLByDateTimeResult> spActivityTypeToXMLByDateTimeCall (spActivityTypeToXMLByDateTimeParameters parameters, string connectionString)
			{
				List<ActivityTypeToXMLByDateTimeResult> ret = new List<ActivityTypeToXMLByDateTimeResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
				conn.Open();
					string qry = "EXEC spActivityTypeToXMLByDateTime @FromDateTime = @FromDateTime, @ToDateTime = @ToDateTime";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@FromDateTime", parameters.FromDateTime == null ? (object)DBNull.Value :  parameters.FromDateTime));
						cmd.Parameters.Add(new SqlParameter("@ToDateTime", parameters.ToDateTime == null ? (object)DBNull.Value :  parameters.ToDateTime));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            ActivityTypeToXMLByDateTimeResult res = new ActivityTypeToXMLByDateTimeResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<AppointmentToXMLResult> spAppointmentToXMLCall(string GUIDS, string connectionString)
			{
				spAppointmentToXMLParameters parameters = new spAppointmentToXMLParameters();
				parameters.GUIDS = GUIDS;

				return spAppointmentToXMLCall (parameters, connectionString);
			}
			public static List<AppointmentToXMLResult> spAppointmentToXMLCall (spAppointmentToXMLParameters parameters, string connectionString)
			{
				List<AppointmentToXMLResult> ret = new List<AppointmentToXMLResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
				conn.Open();
					string qry = "EXEC spAppointmentToXML @GUIDS = @GUIDS";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUIDS", parameters.GUIDS == null ? (object)DBNull.Value :  parameters.GUIDS));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            AppointmentToXMLResult res = new AppointmentToXMLResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<AppointmentToXMLByDateTimeResult> spAppointmentToXMLByDateTimeCall(DateTime? FromDateTime, DateTime? ToDateTime, string connectionString)
			{
				spAppointmentToXMLByDateTimeParameters parameters = new spAppointmentToXMLByDateTimeParameters();
				parameters.FromDateTime = FromDateTime;
				parameters.ToDateTime = ToDateTime;

				return spAppointmentToXMLByDateTimeCall (parameters, connectionString);
			}
			public static List<AppointmentToXMLByDateTimeResult> spAppointmentToXMLByDateTimeCall (spAppointmentToXMLByDateTimeParameters parameters, string connectionString)
			{
				List<AppointmentToXMLByDateTimeResult> ret = new List<AppointmentToXMLByDateTimeResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
				conn.Open();
					string qry = "EXEC spAppointmentToXMLByDateTime @FromDateTime = @FromDateTime, @ToDateTime = @ToDateTime";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@FromDateTime", parameters.FromDateTime == null ? (object)DBNull.Value :  parameters.FromDateTime));
						cmd.Parameters.Add(new SqlParameter("@ToDateTime", parameters.ToDateTime == null ? (object)DBNull.Value :  parameters.ToDateTime));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            AppointmentToXMLByDateTimeResult res = new AppointmentToXMLByDateTimeResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<ServiceProviderToXMLResult> spServiceProviderToXMLCall(string GUIDS, string connectionString)
			{
				spServiceProviderToXMLParameters parameters = new spServiceProviderToXMLParameters();
				parameters.GUIDS = GUIDS;

				return spServiceProviderToXMLCall (parameters, connectionString);
			}
			public static List<ServiceProviderToXMLResult> spServiceProviderToXMLCall (spServiceProviderToXMLParameters parameters, string connectionString)
			{
				List<ServiceProviderToXMLResult> ret = new List<ServiceProviderToXMLResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
				conn.Open();
					string qry = "EXEC spServiceProviderToXML @GUIDS = @GUIDS";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUIDS", parameters.GUIDS == null ? (object)DBNull.Value :  parameters.GUIDS));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            ServiceProviderToXMLResult res = new ServiceProviderToXMLResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<ServiceProviderToXMLByDateTimeResult> spServiceProviderToXMLByDateTimeCall(DateTime? FromDateTime, DateTime? ToDateTime, string connectionString)
			{
				spServiceProviderToXMLByDateTimeParameters parameters = new spServiceProviderToXMLByDateTimeParameters();
				parameters.FromDateTime = FromDateTime;
				parameters.ToDateTime = ToDateTime;

				return spServiceProviderToXMLByDateTimeCall (parameters, connectionString);
			}
			public static List<ServiceProviderToXMLByDateTimeResult> spServiceProviderToXMLByDateTimeCall (spServiceProviderToXMLByDateTimeParameters parameters, string connectionString)
			{
				List<ServiceProviderToXMLByDateTimeResult> ret = new List<ServiceProviderToXMLByDateTimeResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
				conn.Open();
					string qry = "EXEC spServiceProviderToXMLByDateTime @FromDateTime = @FromDateTime, @ToDateTime = @ToDateTime";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@FromDateTime", parameters.FromDateTime == null ? (object)DBNull.Value :  parameters.FromDateTime));
						cmd.Parameters.Add(new SqlParameter("@ToDateTime", parameters.ToDateTime == null ? (object)DBNull.Value :  parameters.ToDateTime));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            ServiceProviderToXMLByDateTimeResult res = new ServiceProviderToXMLByDateTimeResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<CustomerToXMLResult> spCustomerToXMLCall(string GUIDS, string connectionString)
			{
				spCustomerToXMLParameters parameters = new spCustomerToXMLParameters();
				parameters.GUIDS = GUIDS;

				return spCustomerToXMLCall (parameters, connectionString);
			}
			public static List<CustomerToXMLResult> spCustomerToXMLCall (spCustomerToXMLParameters parameters, string connectionString)
			{
				List<CustomerToXMLResult> ret = new List<CustomerToXMLResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
				conn.Open();
					string qry = "EXEC spCustomerToXML @GUIDS = @GUIDS";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUIDS", parameters.GUIDS == null ? (object)DBNull.Value :  parameters.GUIDS));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            CustomerToXMLResult res = new CustomerToXMLResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<CustomerToXMLByDateTimeResult> spCustomerToXMLByDateTimeCall(DateTime? FromDateTime, DateTime? ToDateTime, string connectionString)
			{
				spCustomerToXMLByDateTimeParameters parameters = new spCustomerToXMLByDateTimeParameters();
				parameters.FromDateTime = FromDateTime;
				parameters.ToDateTime = ToDateTime;

				return spCustomerToXMLByDateTimeCall (parameters, connectionString);
			}
			public static List<CustomerToXMLByDateTimeResult> spCustomerToXMLByDateTimeCall (spCustomerToXMLByDateTimeParameters parameters, string connectionString)
			{
				List<CustomerToXMLByDateTimeResult> ret = new List<CustomerToXMLByDateTimeResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
				conn.Open();
					string qry = "EXEC spCustomerToXMLByDateTime @FromDateTime = @FromDateTime, @ToDateTime = @ToDateTime";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@FromDateTime", parameters.FromDateTime == null ? (object)DBNull.Value :  parameters.FromDateTime));
						cmd.Parameters.Add(new SqlParameter("@ToDateTime", parameters.ToDateTime == null ? (object)DBNull.Value :  parameters.ToDateTime));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            CustomerToXMLByDateTimeResult res = new CustomerToXMLByDateTimeResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<ActivityScheduleToXMLResult> spActivityScheduleToXMLCall(string GUIDS, string connectionString)
			{
				spActivityScheduleToXMLParameters parameters = new spActivityScheduleToXMLParameters();
				parameters.GUIDS = GUIDS;

				return spActivityScheduleToXMLCall (parameters, connectionString);
			}
			public static List<ActivityScheduleToXMLResult> spActivityScheduleToXMLCall (spActivityScheduleToXMLParameters parameters, string connectionString)
			{
				List<ActivityScheduleToXMLResult> ret = new List<ActivityScheduleToXMLResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
				conn.Open();
					string qry = "EXEC spActivityScheduleToXML @GUIDS = @GUIDS";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUIDS", parameters.GUIDS == null ? (object)DBNull.Value :  parameters.GUIDS));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            ActivityScheduleToXMLResult res = new ActivityScheduleToXMLResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<ActivityScheduleToXMLByDateTimeResult> spActivityScheduleToXMLByDateTimeCall(DateTime? FromDateTime, DateTime? ToDateTime, string connectionString)
			{
				spActivityScheduleToXMLByDateTimeParameters parameters = new spActivityScheduleToXMLByDateTimeParameters();
				parameters.FromDateTime = FromDateTime;
				parameters.ToDateTime = ToDateTime;

				return spActivityScheduleToXMLByDateTimeCall (parameters, connectionString);
			}
			public static List<ActivityScheduleToXMLByDateTimeResult> spActivityScheduleToXMLByDateTimeCall (spActivityScheduleToXMLByDateTimeParameters parameters, string connectionString)
			{
				List<ActivityScheduleToXMLByDateTimeResult> ret = new List<ActivityScheduleToXMLByDateTimeResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
				conn.Open();
					string qry = "EXEC spActivityScheduleToXMLByDateTime @FromDateTime = @FromDateTime, @ToDateTime = @ToDateTime";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@FromDateTime", parameters.FromDateTime == null ? (object)DBNull.Value :  parameters.FromDateTime));
						cmd.Parameters.Add(new SqlParameter("@ToDateTime", parameters.ToDateTime == null ? (object)DBNull.Value :  parameters.ToDateTime));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            ActivityScheduleToXMLByDateTimeResult res = new ActivityScheduleToXMLByDateTimeResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<StoreToXMLResult> spStoreToXMLCall(string GUIDS, string connectionString)
			{
				spStoreToXMLParameters parameters = new spStoreToXMLParameters();
				parameters.GUIDS = GUIDS;

				return spStoreToXMLCall (parameters, connectionString);
			}
			public static List<StoreToXMLResult> spStoreToXMLCall (spStoreToXMLParameters parameters, string connectionString)
			{
				List<StoreToXMLResult> ret = new List<StoreToXMLResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
				conn.Open();
					string qry = "EXEC spStoreToXML @GUIDS = @GUIDS";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUIDS", parameters.GUIDS == null ? (object)DBNull.Value :  parameters.GUIDS));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            StoreToXMLResult res = new StoreToXMLResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<StoreToXMLByDateTimeResult> spStoreToXMLByDateTimeCall(DateTime? FromDateTime, DateTime? ToDateTime, string connectionString)
			{
				spStoreToXMLByDateTimeParameters parameters = new spStoreToXMLByDateTimeParameters();
				parameters.FromDateTime = FromDateTime;
				parameters.ToDateTime = ToDateTime;

				return spStoreToXMLByDateTimeCall (parameters, connectionString);
			}
			public static List<StoreToXMLByDateTimeResult> spStoreToXMLByDateTimeCall (spStoreToXMLByDateTimeParameters parameters, string connectionString)
			{
				List<StoreToXMLByDateTimeResult> ret = new List<StoreToXMLByDateTimeResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
				conn.Open();
					string qry = "EXEC spStoreToXMLByDateTime @FromDateTime = @FromDateTime, @ToDateTime = @ToDateTime";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@FromDateTime", parameters.FromDateTime == null ? (object)DBNull.Value :  parameters.FromDateTime));
						cmd.Parameters.Add(new SqlParameter("@ToDateTime", parameters.ToDateTime == null ? (object)DBNull.Value :  parameters.ToDateTime));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            StoreToXMLByDateTimeResult res = new StoreToXMLByDateTimeResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<AuditLogUpsertResult> spAuditLogUpsertCall(Guid? GUID, string Source, string TableName, string BeforeSnapshot, string AfterSnapshot, Guid? TableGUID, Guid? SystemUserGUID, bool? ReturnResults, string connectionString)
			{
				spAuditLogUpsertParameters parameters = new spAuditLogUpsertParameters();
				parameters.GUID = GUID;
				parameters.Source = Source;
				parameters.TableName = TableName;
				parameters.BeforeSnapshot = BeforeSnapshot;
				parameters.AfterSnapshot = AfterSnapshot;
				parameters.TableGUID = TableGUID;
				parameters.SystemUserGUID = SystemUserGUID;
				parameters.ReturnResults = ReturnResults;

				return spAuditLogUpsertCall (parameters, connectionString);
			}
			public static List<AuditLogUpsertResult> spAuditLogUpsertCall (spAuditLogUpsertParameters parameters, string connectionString)
			{
				List<AuditLogUpsertResult> ret = new List<AuditLogUpsertResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
				conn.Open();
					string qry = "EXEC spAuditLogUpsert @GUID = @GUID, @Source = @Source, @TableName = @TableName, @BeforeSnapshot = @BeforeSnapshot, @AfterSnapshot = @AfterSnapshot, @TableGUID = @TableGUID, @SystemUserGUID = @SystemUserGUID, @ReturnResults = @ReturnResults";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUID", parameters.GUID == null ? (object)DBNull.Value :  parameters.GUID));
						cmd.Parameters.Add(new SqlParameter("@Source", parameters.Source == null ? (object)DBNull.Value :  parameters.Source));
						cmd.Parameters.Add(new SqlParameter("@TableName", parameters.TableName == null ? (object)DBNull.Value :  parameters.TableName));
						cmd.Parameters.Add(new SqlParameter("@BeforeSnapshot", parameters.BeforeSnapshot == null ? (object)DBNull.Value :  parameters.BeforeSnapshot));
						cmd.Parameters.Add(new SqlParameter("@AfterSnapshot", parameters.AfterSnapshot == null ? (object)DBNull.Value :  parameters.AfterSnapshot));
						cmd.Parameters.Add(new SqlParameter("@TableGUID", parameters.TableGUID == null ? (object)DBNull.Value :  parameters.TableGUID));
						cmd.Parameters.Add(new SqlParameter("@SystemUserGUID", parameters.SystemUserGUID == null ? (object)DBNull.Value :  parameters.SystemUserGUID));
						cmd.Parameters.Add(new SqlParameter("@ReturnResults", parameters.ReturnResults == null ? (object)DBNull.Value :  parameters.ReturnResults));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            AuditLogUpsertResult res = new AuditLogUpsertResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.Source = reader["Source"].ToString();
								res.TableGUID = new Guid(reader["TableGUID"].ToString());
								res.TableName = reader["TableName"].ToString();
								res.BeforeSnapshot = reader["BeforeSnapshot"].ToString();
								res.AfterSnapshot = reader["AfterSnapshot"].ToString();
								res.SystemUserGUID = new Guid(reader["SystemUserGUID"].ToString());
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
	}
}
