//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace AppointmentLibrary.Calls
{
	using System;
	using System.Text ;
	using System.Data.SqlClient;
	using AppointmentLibrary.ProcResults;
	using AppointmentLibrary.Parameters;
	using System.Collections.Generic;
	public static class Calls
	{
			public static List<CustomerAddressToXMLResult> spCustomerAddressToXMLCall(string gUIDS, Byte[] token, string connectionString)
			{
				CustomerAddressToXMLParameters parameters = new CustomerAddressToXMLParameters();
				parameters.GUIDS = gUIDS;
				parameters.Token = token;

				return spCustomerAddressToXMLCall (parameters, connectionString);
			}
			public static List<CustomerAddressToXMLResult> spCustomerAddressToXMLCall (CustomerAddressToXMLParameters parameters, string connectionString)
			{
				List<CustomerAddressToXMLResult> ret = new List<CustomerAddressToXMLResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spCustomerAddressToXML @GUIDS = @GUIDS, @Token = @Token";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUIDS", parameters.GUIDS == null ? (object)DBNull.Value :  parameters.GUIDS));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            CustomerAddressToXMLResult res = new CustomerAddressToXMLResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<CustomerAddressToXMLByDateTimeResult> spCustomerAddressToXMLByDateTimeCall(DateTime? fromDateTime, DateTime? toDateTime, Byte[] token, string connectionString)
			{
				CustomerAddressToXMLByDateTimeParameters parameters = new CustomerAddressToXMLByDateTimeParameters();
				parameters.FromDateTime = fromDateTime;
				parameters.ToDateTime = toDateTime;
				parameters.Token = token;

				return spCustomerAddressToXMLByDateTimeCall (parameters, connectionString);
			}
			public static List<CustomerAddressToXMLByDateTimeResult> spCustomerAddressToXMLByDateTimeCall (CustomerAddressToXMLByDateTimeParameters parameters, string connectionString)
			{
				List<CustomerAddressToXMLByDateTimeResult> ret = new List<CustomerAddressToXMLByDateTimeResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spCustomerAddressToXMLByDateTime @FromDateTime = @FromDateTime, @ToDateTime = @ToDateTime, @Token = @Token";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@FromDateTime", parameters.FromDateTime == null ? (object)DBNull.Value :  parameters.FromDateTime));
						cmd.Parameters.Add(new SqlParameter("@ToDateTime", parameters.ToDateTime == null ? (object)DBNull.Value :  parameters.ToDateTime));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            CustomerAddressToXMLByDateTimeResult res = new CustomerAddressToXMLByDateTimeResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<StoreUpsertResult> spStoreUpsertCall(Guid? gUID, bool? isDeleted, DateTime? activeDateTime, DateTime? terminationDateTime, string storeName, Guid? accountGUID, Byte[] token, bool? returnResults, string connectionString)
			{
				StoreUpsertParameters parameters = new StoreUpsertParameters();
				parameters.GUID = gUID;
				parameters.IsDeleted = isDeleted;
				parameters.ActiveDateTime = activeDateTime;
				parameters.TerminationDateTime = terminationDateTime;
				parameters.StoreName = storeName;
				parameters.AccountGUID = accountGUID;
				parameters.Token = token;
				parameters.ReturnResults = returnResults;

				return spStoreUpsertCall (parameters, connectionString);
			}
			public static List<StoreUpsertResult> spStoreUpsertCall (StoreUpsertParameters parameters, string connectionString)
			{
				List<StoreUpsertResult> ret = new List<StoreUpsertResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spStoreUpsert @GUID = @GUID, @IsDeleted = @IsDeleted, @ActiveDateTime = @ActiveDateTime, @TerminationDateTime = @TerminationDateTime, @StoreName = @StoreName, @AccountGUID = @AccountGUID, @Token = @Token, @ReturnResults = @ReturnResults";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUID", parameters.GUID == null ? (object)DBNull.Value :  parameters.GUID));
						cmd.Parameters.Add(new SqlParameter("@IsDeleted", parameters.IsDeleted == null ? (object)DBNull.Value :  parameters.IsDeleted));
						cmd.Parameters.Add(new SqlParameter("@ActiveDateTime", parameters.ActiveDateTime == null ? (object)DBNull.Value :  parameters.ActiveDateTime));
						cmd.Parameters.Add(new SqlParameter("@TerminationDateTime", parameters.TerminationDateTime == null ? (object)DBNull.Value :  parameters.TerminationDateTime));
						cmd.Parameters.Add(new SqlParameter("@StoreName", parameters.StoreName == null ? (object)DBNull.Value :  parameters.StoreName));
						cmd.Parameters.Add(new SqlParameter("@AccountGUID", parameters.AccountGUID == null ? (object)DBNull.Value :  parameters.AccountGUID));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
						cmd.Parameters.Add(new SqlParameter("@ReturnResults", parameters.ReturnResults == null ? (object)DBNull.Value :  parameters.ReturnResults));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            StoreUpsertResult res = new StoreUpsertResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								if (!String.IsNullOrWhiteSpace(reader["ActiveDateTime"].ToString()))
								{
								    res.ActiveDateTime = DateTime.Parse(reader["ActiveDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["TerminationDateTime"].ToString()))
								{
								    res.TerminationDateTime = DateTime.Parse(reader["TerminationDateTime"].ToString());
								}
								res.IsActiveForNow = (bool)reader["IsActiveForNow"];
								res.StoreName = reader["StoreName"].ToString();
								res.AccountGUID = new Guid(reader["AccountGUID"].ToString());
								res.SystemUserGUID = new Guid(reader["SystemUserGUID"].ToString());
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<StoreGetResult> spStoreGetCall(Guid? storeGUID, Byte[] token, string connectionString)
			{
				StoreGetParameters parameters = new StoreGetParameters();
				parameters.StoreGUID = storeGUID;
				parameters.Token = token;

				return spStoreGetCall (parameters, connectionString);
			}
			public static List<StoreGetResult> spStoreGetCall (StoreGetParameters parameters, string connectionString)
			{
				List<StoreGetResult> ret = new List<StoreGetResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spStoreGet @StoreGUID = @StoreGUID, @Token = @Token";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@StoreGUID", parameters.StoreGUID == null ? (object)DBNull.Value :  parameters.StoreGUID));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            StoreGetResult res = new StoreGetResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								if (!String.IsNullOrWhiteSpace(reader["ActiveDateTime"].ToString()))
								{
								    res.ActiveDateTime = DateTime.Parse(reader["ActiveDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["TerminationDateTime"].ToString()))
								{
								    res.TerminationDateTime = DateTime.Parse(reader["TerminationDateTime"].ToString());
								}
								res.IsActiveForNow = (bool)reader["IsActiveForNow"];
								res.StoreName = reader["StoreName"].ToString();
								res.AccountGUID = new Guid(reader["AccountGUID"].ToString());
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<StoreToXMLResult> spStoreToXMLCall(string gUIDS, Byte[] token, string connectionString)
			{
				StoreToXMLParameters parameters = new StoreToXMLParameters();
				parameters.GUIDS = gUIDS;
				parameters.Token = token;

				return spStoreToXMLCall (parameters, connectionString);
			}
			public static List<StoreToXMLResult> spStoreToXMLCall (StoreToXMLParameters parameters, string connectionString)
			{
				List<StoreToXMLResult> ret = new List<StoreToXMLResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spStoreToXML @GUIDS = @GUIDS, @Token = @Token";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUIDS", parameters.GUIDS == null ? (object)DBNull.Value :  parameters.GUIDS));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            StoreToXMLResult res = new StoreToXMLResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<StoreToXMLByDateTimeResult> spStoreToXMLByDateTimeCall(DateTime? fromDateTime, DateTime? toDateTime, Byte[] token, string connectionString)
			{
				StoreToXMLByDateTimeParameters parameters = new StoreToXMLByDateTimeParameters();
				parameters.FromDateTime = fromDateTime;
				parameters.ToDateTime = toDateTime;
				parameters.Token = token;

				return spStoreToXMLByDateTimeCall (parameters, connectionString);
			}
			public static List<StoreToXMLByDateTimeResult> spStoreToXMLByDateTimeCall (StoreToXMLByDateTimeParameters parameters, string connectionString)
			{
				List<StoreToXMLByDateTimeResult> ret = new List<StoreToXMLByDateTimeResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spStoreToXMLByDateTime @FromDateTime = @FromDateTime, @ToDateTime = @ToDateTime, @Token = @Token";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@FromDateTime", parameters.FromDateTime == null ? (object)DBNull.Value :  parameters.FromDateTime));
						cmd.Parameters.Add(new SqlParameter("@ToDateTime", parameters.ToDateTime == null ? (object)DBNull.Value :  parameters.ToDateTime));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            StoreToXMLByDateTimeResult res = new StoreToXMLByDateTimeResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<RefreshTokenNoReturnResult> spRefreshTokenNoReturnCall(Guid? systemUserGUID, string connectionString)
			{
				RefreshTokenNoReturnParameters parameters = new RefreshTokenNoReturnParameters();
				parameters.SystemUserGUID = systemUserGUID;

				return spRefreshTokenNoReturnCall (parameters, connectionString);
			}
			public static List<RefreshTokenNoReturnResult> spRefreshTokenNoReturnCall (RefreshTokenNoReturnParameters parameters, string connectionString)
			{
				List<RefreshTokenNoReturnResult> ret = new List<RefreshTokenNoReturnResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spRefreshTokenNoReturn @SystemUserGUID = @SystemUserGUID";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@SystemUserGUID", parameters.SystemUserGUID == null ? (object)DBNull.Value :  parameters.SystemUserGUID));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            RefreshTokenNoReturnResult res = new RefreshTokenNoReturnResult();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<LUPermissionUpsertResult> spLUPermissionUpsertCall(Guid? gUID, bool? isDeleted, string permission, Byte[] token, bool? returnResults, string connectionString)
			{
				LUPermissionUpsertParameters parameters = new LUPermissionUpsertParameters();
				parameters.GUID = gUID;
				parameters.IsDeleted = isDeleted;
				parameters.Permission = permission;
				parameters.Token = token;
				parameters.ReturnResults = returnResults;

				return spLUPermissionUpsertCall (parameters, connectionString);
			}
			public static List<LUPermissionUpsertResult> spLUPermissionUpsertCall (LUPermissionUpsertParameters parameters, string connectionString)
			{
				List<LUPermissionUpsertResult> ret = new List<LUPermissionUpsertResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spLUPermissionUpsert @GUID = @GUID, @IsDeleted = @IsDeleted, @Permission = @Permission, @Token = @Token, @ReturnResults = @ReturnResults";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUID", parameters.GUID == null ? (object)DBNull.Value :  parameters.GUID));
						cmd.Parameters.Add(new SqlParameter("@IsDeleted", parameters.IsDeleted == null ? (object)DBNull.Value :  parameters.IsDeleted));
						cmd.Parameters.Add(new SqlParameter("@Permission", parameters.Permission == null ? (object)DBNull.Value :  parameters.Permission));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
						cmd.Parameters.Add(new SqlParameter("@ReturnResults", parameters.ReturnResults == null ? (object)DBNull.Value :  parameters.ReturnResults));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            LUPermissionUpsertResult res = new LUPermissionUpsertResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								res.Permission = reader["Permission"].ToString();
								res.SystemUserGUID = new Guid(reader["SystemUserGUID"].ToString());
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<LUPermissionGetResult> spLUPermissionGetCall(Guid? lUPermissionGUID, Byte[] token, string connectionString)
			{
				LUPermissionGetParameters parameters = new LUPermissionGetParameters();
				parameters.LUPermissionGUID = lUPermissionGUID;
				parameters.Token = token;

				return spLUPermissionGetCall (parameters, connectionString);
			}
			public static List<LUPermissionGetResult> spLUPermissionGetCall (LUPermissionGetParameters parameters, string connectionString)
			{
				List<LUPermissionGetResult> ret = new List<LUPermissionGetResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spLUPermissionGet @LUPermissionGUID = @LUPermissionGUID, @Token = @Token";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@LUPermissionGUID", parameters.LUPermissionGUID == null ? (object)DBNull.Value :  parameters.LUPermissionGUID));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            LUPermissionGetResult res = new LUPermissionGetResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								res.Permission = reader["Permission"].ToString();
								res.SystemUserGUID = new Guid(reader["SystemUserGUID"].ToString());
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<LUPermissionToXMLResult> spLUPermissionToXMLCall(string gUIDS, Byte[] token, string connectionString)
			{
				LUPermissionToXMLParameters parameters = new LUPermissionToXMLParameters();
				parameters.GUIDS = gUIDS;
				parameters.Token = token;

				return spLUPermissionToXMLCall (parameters, connectionString);
			}
			public static List<LUPermissionToXMLResult> spLUPermissionToXMLCall (LUPermissionToXMLParameters parameters, string connectionString)
			{
				List<LUPermissionToXMLResult> ret = new List<LUPermissionToXMLResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spLUPermissionToXML @GUIDS = @GUIDS, @Token = @Token";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUIDS", parameters.GUIDS == null ? (object)DBNull.Value :  parameters.GUIDS));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            LUPermissionToXMLResult res = new LUPermissionToXMLResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<LUPermissionToXMLByDateTimeResult> spLUPermissionToXMLByDateTimeCall(DateTime? fromDateTime, DateTime? toDateTime, Byte[] token, string connectionString)
			{
				LUPermissionToXMLByDateTimeParameters parameters = new LUPermissionToXMLByDateTimeParameters();
				parameters.FromDateTime = fromDateTime;
				parameters.ToDateTime = toDateTime;
				parameters.Token = token;

				return spLUPermissionToXMLByDateTimeCall (parameters, connectionString);
			}
			public static List<LUPermissionToXMLByDateTimeResult> spLUPermissionToXMLByDateTimeCall (LUPermissionToXMLByDateTimeParameters parameters, string connectionString)
			{
				List<LUPermissionToXMLByDateTimeResult> ret = new List<LUPermissionToXMLByDateTimeResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spLUPermissionToXMLByDateTime @FromDateTime = @FromDateTime, @ToDateTime = @ToDateTime, @Token = @Token";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@FromDateTime", parameters.FromDateTime == null ? (object)DBNull.Value :  parameters.FromDateTime));
						cmd.Parameters.Add(new SqlParameter("@ToDateTime", parameters.ToDateTime == null ? (object)DBNull.Value :  parameters.ToDateTime));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            LUPermissionToXMLByDateTimeResult res = new LUPermissionToXMLByDateTimeResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<CreateUpsertResult> spCreateUpsertCall(string tableName, string connectionString)
			{
				CreateUpsertParameters parameters = new CreateUpsertParameters();
				parameters.TableName = tableName;

				return spCreateUpsertCall (parameters, connectionString);
			}
			public static List<CreateUpsertResult> spCreateUpsertCall (CreateUpsertParameters parameters, string connectionString)
			{
				List<CreateUpsertResult> ret = new List<CreateUpsertResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spCreateUpsert @TableName = @TableName";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@TableName", parameters.TableName == null ? (object)DBNull.Value :  parameters.TableName));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            CreateUpsertResult res = new CreateUpsertResult();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<SystemUserGroupUpsertResult> spSystemUserGroupUpsertCall(Guid? gUID, bool? isDeleted, DateTime? activeDateTime, DateTime? terminationDateTime, string description, Byte[] token, bool? returnResults, string connectionString)
			{
				SystemUserGroupUpsertParameters parameters = new SystemUserGroupUpsertParameters();
				parameters.GUID = gUID;
				parameters.IsDeleted = isDeleted;
				parameters.ActiveDateTime = activeDateTime;
				parameters.TerminationDateTime = terminationDateTime;
				parameters.Description = description;
				parameters.Token = token;
				parameters.ReturnResults = returnResults;

				return spSystemUserGroupUpsertCall (parameters, connectionString);
			}
			public static List<SystemUserGroupUpsertResult> spSystemUserGroupUpsertCall (SystemUserGroupUpsertParameters parameters, string connectionString)
			{
				List<SystemUserGroupUpsertResult> ret = new List<SystemUserGroupUpsertResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spSystemUserGroupUpsert @GUID = @GUID, @IsDeleted = @IsDeleted, @ActiveDateTime = @ActiveDateTime, @TerminationDateTime = @TerminationDateTime, @Description = @Description, @Token = @Token, @ReturnResults = @ReturnResults";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUID", parameters.GUID == null ? (object)DBNull.Value :  parameters.GUID));
						cmd.Parameters.Add(new SqlParameter("@IsDeleted", parameters.IsDeleted == null ? (object)DBNull.Value :  parameters.IsDeleted));
						cmd.Parameters.Add(new SqlParameter("@ActiveDateTime", parameters.ActiveDateTime == null ? (object)DBNull.Value :  parameters.ActiveDateTime));
						cmd.Parameters.Add(new SqlParameter("@TerminationDateTime", parameters.TerminationDateTime == null ? (object)DBNull.Value :  parameters.TerminationDateTime));
						cmd.Parameters.Add(new SqlParameter("@Description", parameters.Description == null ? (object)DBNull.Value :  parameters.Description));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
						cmd.Parameters.Add(new SqlParameter("@ReturnResults", parameters.ReturnResults == null ? (object)DBNull.Value :  parameters.ReturnResults));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            SystemUserGroupUpsertResult res = new SystemUserGroupUpsertResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								if (!String.IsNullOrWhiteSpace(reader["ActiveDateTime"].ToString()))
								{
								    res.ActiveDateTime = DateTime.Parse(reader["ActiveDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["TerminationDateTime"].ToString()))
								{
								    res.TerminationDateTime = DateTime.Parse(reader["TerminationDateTime"].ToString());
								}
								res.IsActiveForNow = (bool)reader["IsActiveForNow"];
								res.Description = reader["Description"].ToString();
								res.SystemUserGUID = new Guid(reader["SystemUserGUID"].ToString());
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<SystemUserGroupGetResult> spSystemUserGroupGetCall(Guid? systemUserGroupGUID, Byte[] token, string connectionString)
			{
				SystemUserGroupGetParameters parameters = new SystemUserGroupGetParameters();
				parameters.SystemUserGroupGUID = systemUserGroupGUID;
				parameters.Token = token;

				return spSystemUserGroupGetCall (parameters, connectionString);
			}
			public static List<SystemUserGroupGetResult> spSystemUserGroupGetCall (SystemUserGroupGetParameters parameters, string connectionString)
			{
				List<SystemUserGroupGetResult> ret = new List<SystemUserGroupGetResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spSystemUserGroupGet @SystemUserGroupGUID = @SystemUserGroupGUID, @Token = @Token";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@SystemUserGroupGUID", parameters.SystemUserGroupGUID == null ? (object)DBNull.Value :  parameters.SystemUserGroupGUID));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            SystemUserGroupGetResult res = new SystemUserGroupGetResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								if (!String.IsNullOrWhiteSpace(reader["ActiveDateTime"].ToString()))
								{
								    res.ActiveDateTime = DateTime.Parse(reader["ActiveDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["TerminationDateTime"].ToString()))
								{
								    res.TerminationDateTime = DateTime.Parse(reader["TerminationDateTime"].ToString());
								}
								res.IsActiveForNow = (bool)reader["IsActiveForNow"];
								res.Description = reader["Description"].ToString();
								res.SystemUserGUID = new Guid(reader["SystemUserGUID"].ToString());
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<GenerateTokenResult> spGenerateTokenCall(Guid? systemUserGUID, bool? returnResults, string connectionString)
			{
				GenerateTokenParameters parameters = new GenerateTokenParameters();
				parameters.SystemUserGUID = systemUserGUID;
				parameters.ReturnResults = returnResults;

				return spGenerateTokenCall (parameters, connectionString);
			}
			public static List<GenerateTokenResult> spGenerateTokenCall (GenerateTokenParameters parameters, string connectionString)
			{
				List<GenerateTokenResult> ret = new List<GenerateTokenResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spGenerateToken @SystemUserGUID = @SystemUserGUID, @ReturnResults = @ReturnResults";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@SystemUserGUID", parameters.SystemUserGUID == null ? (object)DBNull.Value :  parameters.SystemUserGUID));
						cmd.Parameters.Add(new SqlParameter("@ReturnResults", parameters.ReturnResults == null ? (object)DBNull.Value :  parameters.ReturnResults));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            GenerateTokenResult res = new GenerateTokenResult();
								if (!String.IsNullOrWhiteSpace(reader["TokenExpires"].ToString()))
								{
								    res.TokenExpires = DateTime.Parse(reader["TokenExpires"].ToString());
								}
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<SystemUserUpsertResult> spSystemUserUpsertCall(Guid? gUID, bool? isDeleted, DateTime? activeDateTime, DateTime? terminationDateTime, string username, string password, Byte[] token, bool? returnResults, string connectionString)
			{
				SystemUserUpsertParameters parameters = new SystemUserUpsertParameters();
				parameters.GUID = gUID;
				parameters.IsDeleted = isDeleted;
				parameters.ActiveDateTime = activeDateTime;
				parameters.TerminationDateTime = terminationDateTime;
				parameters.Username = username;
				parameters.Password = password;
				parameters.Token = token;
				parameters.ReturnResults = returnResults;

				return spSystemUserUpsertCall (parameters, connectionString);
			}
			public static List<SystemUserUpsertResult> spSystemUserUpsertCall (SystemUserUpsertParameters parameters, string connectionString)
			{
				List<SystemUserUpsertResult> ret = new List<SystemUserUpsertResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spSystemUserUpsert @GUID = @GUID, @IsDeleted = @IsDeleted, @ActiveDateTime = @ActiveDateTime, @TerminationDateTime = @TerminationDateTime, @Username = @Username, @Password = @Password, @Token = @Token, @ReturnResults = @ReturnResults";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUID", parameters.GUID == null ? (object)DBNull.Value :  parameters.GUID));
						cmd.Parameters.Add(new SqlParameter("@IsDeleted", parameters.IsDeleted == null ? (object)DBNull.Value :  parameters.IsDeleted));
						cmd.Parameters.Add(new SqlParameter("@ActiveDateTime", parameters.ActiveDateTime == null ? (object)DBNull.Value :  parameters.ActiveDateTime));
						cmd.Parameters.Add(new SqlParameter("@TerminationDateTime", parameters.TerminationDateTime == null ? (object)DBNull.Value :  parameters.TerminationDateTime));
						cmd.Parameters.Add(new SqlParameter("@Username", parameters.Username == null ? (object)DBNull.Value :  parameters.Username));
						cmd.Parameters.Add(new SqlParameter("@Password", parameters.Password == null ? (object)DBNull.Value :  parameters.Password));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
						cmd.Parameters.Add(new SqlParameter("@ReturnResults", parameters.ReturnResults == null ? (object)DBNull.Value :  parameters.ReturnResults));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            SystemUserUpsertResult res = new SystemUserUpsertResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								if (!String.IsNullOrWhiteSpace(reader["ActiveDateTime"].ToString()))
								{
								    res.ActiveDateTime = DateTime.Parse(reader["ActiveDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["TerminationDateTime"].ToString()))
								{
								    res.TerminationDateTime = DateTime.Parse(reader["TerminationDateTime"].ToString());
								}
								res.IsActiveForNow = (bool)reader["IsActiveForNow"];
								if (!String.IsNullOrWhiteSpace(reader["Token"].ToString()))
								{
								    res.Token =  Encoding.ASCII.GetBytes(reader["Token"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["TokenExpires"].ToString()))
								{
								    res.TokenExpires = DateTime.Parse(reader["TokenExpires"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["TokenIsValid"].ToString()))
								{
								    res.TokenIsValid = int.Parse(reader["TokenIsValid"].ToString());
								}
								res.Username = reader["Username"].ToString();
								if (!String.IsNullOrWhiteSpace(reader["PasswordHash"].ToString()))
								{
								    res.PasswordHash =  Encoding.ASCII.GetBytes(reader["PasswordHash"].ToString());
								}
								res.PasswordSalt = new Guid(reader["PasswordSalt"].ToString());
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<SystemUserGroupToXMLResult> spSystemUserGroupToXMLCall(string gUIDS, Byte[] token, string connectionString)
			{
				SystemUserGroupToXMLParameters parameters = new SystemUserGroupToXMLParameters();
				parameters.GUIDS = gUIDS;
				parameters.Token = token;

				return spSystemUserGroupToXMLCall (parameters, connectionString);
			}
			public static List<SystemUserGroupToXMLResult> spSystemUserGroupToXMLCall (SystemUserGroupToXMLParameters parameters, string connectionString)
			{
				List<SystemUserGroupToXMLResult> ret = new List<SystemUserGroupToXMLResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spSystemUserGroupToXML @GUIDS = @GUIDS, @Token = @Token";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUIDS", parameters.GUIDS == null ? (object)DBNull.Value :  parameters.GUIDS));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            SystemUserGroupToXMLResult res = new SystemUserGroupToXMLResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<SystemUserGetResult> spSystemUserGetCall(Guid? forSystemUserGUID, Byte[] token, string connectionString)
			{
				SystemUserGetParameters parameters = new SystemUserGetParameters();
				parameters.ForSystemUserGUID = forSystemUserGUID;
				parameters.Token = token;

				return spSystemUserGetCall (parameters, connectionString);
			}
			public static List<SystemUserGetResult> spSystemUserGetCall (SystemUserGetParameters parameters, string connectionString)
			{
				List<SystemUserGetResult> ret = new List<SystemUserGetResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spSystemUserGet @ForSystemUserGUID = @ForSystemUserGUID, @Token = @Token";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@ForSystemUserGUID", parameters.ForSystemUserGUID == null ? (object)DBNull.Value :  parameters.ForSystemUserGUID));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            SystemUserGetResult res = new SystemUserGetResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								if (!String.IsNullOrWhiteSpace(reader["ActiveDateTime"].ToString()))
								{
								    res.ActiveDateTime = DateTime.Parse(reader["ActiveDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["TerminationDateTime"].ToString()))
								{
								    res.TerminationDateTime = DateTime.Parse(reader["TerminationDateTime"].ToString());
								}
								res.IsActiveForNow = (bool)reader["IsActiveForNow"];
								if (!String.IsNullOrWhiteSpace(reader["Token"].ToString()))
								{
								    res.Token =  Encoding.ASCII.GetBytes(reader["Token"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["TokenExpires"].ToString()))
								{
								    res.TokenExpires = DateTime.Parse(reader["TokenExpires"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["TokenIsValid"].ToString()))
								{
								    res.TokenIsValid = int.Parse(reader["TokenIsValid"].ToString());
								}
								res.Username = reader["Username"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<SystemUserGroupToXMLByDateTimeResult> spSystemUserGroupToXMLByDateTimeCall(DateTime? fromDateTime, DateTime? toDateTime, Byte[] token, string connectionString)
			{
				SystemUserGroupToXMLByDateTimeParameters parameters = new SystemUserGroupToXMLByDateTimeParameters();
				parameters.FromDateTime = fromDateTime;
				parameters.ToDateTime = toDateTime;
				parameters.Token = token;

				return spSystemUserGroupToXMLByDateTimeCall (parameters, connectionString);
			}
			public static List<SystemUserGroupToXMLByDateTimeResult> spSystemUserGroupToXMLByDateTimeCall (SystemUserGroupToXMLByDateTimeParameters parameters, string connectionString)
			{
				List<SystemUserGroupToXMLByDateTimeResult> ret = new List<SystemUserGroupToXMLByDateTimeResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spSystemUserGroupToXMLByDateTime @FromDateTime = @FromDateTime, @ToDateTime = @ToDateTime, @Token = @Token";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@FromDateTime", parameters.FromDateTime == null ? (object)DBNull.Value :  parameters.FromDateTime));
						cmd.Parameters.Add(new SqlParameter("@ToDateTime", parameters.ToDateTime == null ? (object)DBNull.Value :  parameters.ToDateTime));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            SystemUserGroupToXMLByDateTimeResult res = new SystemUserGroupToXMLByDateTimeResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<SystemUserGroupPermissionUpsertResult> spSystemUserGroupPermissionUpsertCall(Guid? gUID, bool? isDeleted, DateTime? activeDateTime, DateTime? terminationDateTime, Guid? permissionGUID, Guid? systemUserGroupGUID, Byte[] token, bool? returnResults, string connectionString)
			{
				SystemUserGroupPermissionUpsertParameters parameters = new SystemUserGroupPermissionUpsertParameters();
				parameters.GUID = gUID;
				parameters.IsDeleted = isDeleted;
				parameters.ActiveDateTime = activeDateTime;
				parameters.TerminationDateTime = terminationDateTime;
				parameters.PermissionGUID = permissionGUID;
				parameters.SystemUserGroupGUID = systemUserGroupGUID;
				parameters.Token = token;
				parameters.ReturnResults = returnResults;

				return spSystemUserGroupPermissionUpsertCall (parameters, connectionString);
			}
			public static List<SystemUserGroupPermissionUpsertResult> spSystemUserGroupPermissionUpsertCall (SystemUserGroupPermissionUpsertParameters parameters, string connectionString)
			{
				List<SystemUserGroupPermissionUpsertResult> ret = new List<SystemUserGroupPermissionUpsertResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spSystemUserGroupPermissionUpsert @GUID = @GUID, @IsDeleted = @IsDeleted, @ActiveDateTime = @ActiveDateTime, @TerminationDateTime = @TerminationDateTime, @PermissionGUID = @PermissionGUID, @SystemUserGroupGUID = @SystemUserGroupGUID, @Token = @Token, @ReturnResults = @ReturnResults";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUID", parameters.GUID == null ? (object)DBNull.Value :  parameters.GUID));
						cmd.Parameters.Add(new SqlParameter("@IsDeleted", parameters.IsDeleted == null ? (object)DBNull.Value :  parameters.IsDeleted));
						cmd.Parameters.Add(new SqlParameter("@ActiveDateTime", parameters.ActiveDateTime == null ? (object)DBNull.Value :  parameters.ActiveDateTime));
						cmd.Parameters.Add(new SqlParameter("@TerminationDateTime", parameters.TerminationDateTime == null ? (object)DBNull.Value :  parameters.TerminationDateTime));
						cmd.Parameters.Add(new SqlParameter("@PermissionGUID", parameters.PermissionGUID == null ? (object)DBNull.Value :  parameters.PermissionGUID));
						cmd.Parameters.Add(new SqlParameter("@SystemUserGroupGUID", parameters.SystemUserGroupGUID == null ? (object)DBNull.Value :  parameters.SystemUserGroupGUID));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
						cmd.Parameters.Add(new SqlParameter("@ReturnResults", parameters.ReturnResults == null ? (object)DBNull.Value :  parameters.ReturnResults));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            SystemUserGroupPermissionUpsertResult res = new SystemUserGroupPermissionUpsertResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								if (!String.IsNullOrWhiteSpace(reader["ActiveDateTime"].ToString()))
								{
								    res.ActiveDateTime = DateTime.Parse(reader["ActiveDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["TerminationDateTime"].ToString()))
								{
								    res.TerminationDateTime = DateTime.Parse(reader["TerminationDateTime"].ToString());
								}
								res.IsActiveForNow = (bool)reader["IsActiveForNow"];
								res.PermissionGUID = new Guid(reader["PermissionGUID"].ToString());
								res.SystemUserGroupGUID = new Guid(reader["SystemUserGroupGUID"].ToString());
								res.SystemUserGUID = new Guid(reader["SystemUserGUID"].ToString());
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<RefreshTokenResult> spRefreshTokenCall(Guid? systemUserGUID, bool? returnResults, string connectionString)
			{
				RefreshTokenParameters parameters = new RefreshTokenParameters();
				parameters.SystemUserGUID = systemUserGUID;
				parameters.ReturnResults = returnResults;

				return spRefreshTokenCall (parameters, connectionString);
			}
			public static List<RefreshTokenResult> spRefreshTokenCall (RefreshTokenParameters parameters, string connectionString)
			{
				List<RefreshTokenResult> ret = new List<RefreshTokenResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spRefreshToken @SystemUserGUID = @SystemUserGUID, @ReturnResults = @ReturnResults";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@SystemUserGUID", parameters.SystemUserGUID == null ? (object)DBNull.Value :  parameters.SystemUserGUID));
						cmd.Parameters.Add(new SqlParameter("@ReturnResults", parameters.ReturnResults == null ? (object)DBNull.Value :  parameters.ReturnResults));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            RefreshTokenResult res = new RefreshTokenResult();
								if (!String.IsNullOrWhiteSpace(reader["TokenExpires"].ToString()))
								{
								    res.TokenExpires = DateTime.Parse(reader["TokenExpires"].ToString());
								}
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<SystemUserGroupPermissionGetResult> spSystemUserGroupPermissionGetCall(Guid? systemUserGroupPermissionGUID, Byte[] token, string connectionString)
			{
				SystemUserGroupPermissionGetParameters parameters = new SystemUserGroupPermissionGetParameters();
				parameters.SystemUserGroupPermissionGUID = systemUserGroupPermissionGUID;
				parameters.Token = token;

				return spSystemUserGroupPermissionGetCall (parameters, connectionString);
			}
			public static List<SystemUserGroupPermissionGetResult> spSystemUserGroupPermissionGetCall (SystemUserGroupPermissionGetParameters parameters, string connectionString)
			{
				List<SystemUserGroupPermissionGetResult> ret = new List<SystemUserGroupPermissionGetResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spSystemUserGroupPermissionGet @SystemUserGroupPermissionGUID = @SystemUserGroupPermissionGUID, @Token = @Token";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@SystemUserGroupPermissionGUID", parameters.SystemUserGroupPermissionGUID == null ? (object)DBNull.Value :  parameters.SystemUserGroupPermissionGUID));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            SystemUserGroupPermissionGetResult res = new SystemUserGroupPermissionGetResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								if (!String.IsNullOrWhiteSpace(reader["ActiveDateTime"].ToString()))
								{
								    res.ActiveDateTime = DateTime.Parse(reader["ActiveDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["TerminationDateTime"].ToString()))
								{
								    res.TerminationDateTime = DateTime.Parse(reader["TerminationDateTime"].ToString());
								}
								res.IsActiveForNow = (bool)reader["IsActiveForNow"];
								res.PermissionGUID = new Guid(reader["PermissionGUID"].ToString());
								res.SystemUserGroupGUID = new Guid(reader["SystemUserGroupGUID"].ToString());
								res.SystemUserGUID = new Guid(reader["SystemUserGUID"].ToString());
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<SystemUserGroupPermissionToXMLResult> spSystemUserGroupPermissionToXMLCall(string gUIDS, Byte[] token, string connectionString)
			{
				SystemUserGroupPermissionToXMLParameters parameters = new SystemUserGroupPermissionToXMLParameters();
				parameters.GUIDS = gUIDS;
				parameters.Token = token;

				return spSystemUserGroupPermissionToXMLCall (parameters, connectionString);
			}
			public static List<SystemUserGroupPermissionToXMLResult> spSystemUserGroupPermissionToXMLCall (SystemUserGroupPermissionToXMLParameters parameters, string connectionString)
			{
				List<SystemUserGroupPermissionToXMLResult> ret = new List<SystemUserGroupPermissionToXMLResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spSystemUserGroupPermissionToXML @GUIDS = @GUIDS, @Token = @Token";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUIDS", parameters.GUIDS == null ? (object)DBNull.Value :  parameters.GUIDS));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            SystemUserGroupPermissionToXMLResult res = new SystemUserGroupPermissionToXMLResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<SystemUserGroupPermissionToXMLByDateTimeResult> spSystemUserGroupPermissionToXMLByDateTimeCall(DateTime? fromDateTime, DateTime? toDateTime, Byte[] token, string connectionString)
			{
				SystemUserGroupPermissionToXMLByDateTimeParameters parameters = new SystemUserGroupPermissionToXMLByDateTimeParameters();
				parameters.FromDateTime = fromDateTime;
				parameters.ToDateTime = toDateTime;
				parameters.Token = token;

				return spSystemUserGroupPermissionToXMLByDateTimeCall (parameters, connectionString);
			}
			public static List<SystemUserGroupPermissionToXMLByDateTimeResult> spSystemUserGroupPermissionToXMLByDateTimeCall (SystemUserGroupPermissionToXMLByDateTimeParameters parameters, string connectionString)
			{
				List<SystemUserGroupPermissionToXMLByDateTimeResult> ret = new List<SystemUserGroupPermissionToXMLByDateTimeResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spSystemUserGroupPermissionToXMLByDateTime @FromDateTime = @FromDateTime, @ToDateTime = @ToDateTime, @Token = @Token";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@FromDateTime", parameters.FromDateTime == null ? (object)DBNull.Value :  parameters.FromDateTime));
						cmd.Parameters.Add(new SqlParameter("@ToDateTime", parameters.ToDateTime == null ? (object)DBNull.Value :  parameters.ToDateTime));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            SystemUserGroupPermissionToXMLByDateTimeResult res = new SystemUserGroupPermissionToXMLByDateTimeResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<SystemUserPermissionToXMLResult> spSystemUserPermissionToXMLCall(string gUIDS, string connectionString)
			{
				SystemUserPermissionToXMLParameters parameters = new SystemUserPermissionToXMLParameters();
				parameters.GUIDS = gUIDS;

				return spSystemUserPermissionToXMLCall (parameters, connectionString);
			}
			public static List<SystemUserPermissionToXMLResult> spSystemUserPermissionToXMLCall (SystemUserPermissionToXMLParameters parameters, string connectionString)
			{
				List<SystemUserPermissionToXMLResult> ret = new List<SystemUserPermissionToXMLResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spSystemUserPermissionToXML @GUIDS = @GUIDS";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUIDS", parameters.GUIDS == null ? (object)DBNull.Value :  parameters.GUIDS));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            SystemUserPermissionToXMLResult res = new SystemUserPermissionToXMLResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<SystemUserPermissionToXMLByDateTimeResult> spSystemUserPermissionToXMLByDateTimeCall(DateTime? fromDateTime, DateTime? toDateTime, string connectionString)
			{
				SystemUserPermissionToXMLByDateTimeParameters parameters = new SystemUserPermissionToXMLByDateTimeParameters();
				parameters.FromDateTime = fromDateTime;
				parameters.ToDateTime = toDateTime;

				return spSystemUserPermissionToXMLByDateTimeCall (parameters, connectionString);
			}
			public static List<SystemUserPermissionToXMLByDateTimeResult> spSystemUserPermissionToXMLByDateTimeCall (SystemUserPermissionToXMLByDateTimeParameters parameters, string connectionString)
			{
				List<SystemUserPermissionToXMLByDateTimeResult> ret = new List<SystemUserPermissionToXMLByDateTimeResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spSystemUserPermissionToXMLByDateTime @FromDateTime = @FromDateTime, @ToDateTime = @ToDateTime";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@FromDateTime", parameters.FromDateTime == null ? (object)DBNull.Value :  parameters.FromDateTime));
						cmd.Parameters.Add(new SqlParameter("@ToDateTime", parameters.ToDateTime == null ? (object)DBNull.Value :  parameters.ToDateTime));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            SystemUserPermissionToXMLByDateTimeResult res = new SystemUserPermissionToXMLByDateTimeResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<SystemUserGroupLineToXMLResult> spSystemUserGroupLineToXMLCall(string gUIDS, string connectionString)
			{
				SystemUserGroupLineToXMLParameters parameters = new SystemUserGroupLineToXMLParameters();
				parameters.GUIDS = gUIDS;

				return spSystemUserGroupLineToXMLCall (parameters, connectionString);
			}
			public static List<SystemUserGroupLineToXMLResult> spSystemUserGroupLineToXMLCall (SystemUserGroupLineToXMLParameters parameters, string connectionString)
			{
				List<SystemUserGroupLineToXMLResult> ret = new List<SystemUserGroupLineToXMLResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spSystemUserGroupLineToXML @GUIDS = @GUIDS";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUIDS", parameters.GUIDS == null ? (object)DBNull.Value :  parameters.GUIDS));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            SystemUserGroupLineToXMLResult res = new SystemUserGroupLineToXMLResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<SystemUserGroupLineToXMLByDateTimeResult> spSystemUserGroupLineToXMLByDateTimeCall(DateTime? fromDateTime, DateTime? toDateTime, string connectionString)
			{
				SystemUserGroupLineToXMLByDateTimeParameters parameters = new SystemUserGroupLineToXMLByDateTimeParameters();
				parameters.FromDateTime = fromDateTime;
				parameters.ToDateTime = toDateTime;

				return spSystemUserGroupLineToXMLByDateTimeCall (parameters, connectionString);
			}
			public static List<SystemUserGroupLineToXMLByDateTimeResult> spSystemUserGroupLineToXMLByDateTimeCall (SystemUserGroupLineToXMLByDateTimeParameters parameters, string connectionString)
			{
				List<SystemUserGroupLineToXMLByDateTimeResult> ret = new List<SystemUserGroupLineToXMLByDateTimeResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spSystemUserGroupLineToXMLByDateTime @FromDateTime = @FromDateTime, @ToDateTime = @ToDateTime";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@FromDateTime", parameters.FromDateTime == null ? (object)DBNull.Value :  parameters.FromDateTime));
						cmd.Parameters.Add(new SqlParameter("@ToDateTime", parameters.ToDateTime == null ? (object)DBNull.Value :  parameters.ToDateTime));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            SystemUserGroupLineToXMLByDateTimeResult res = new SystemUserGroupLineToXMLByDateTimeResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<GetChildrenResult> spGetChildrenCall(string tableName, string connectionString)
			{
				GetChildrenParameters parameters = new GetChildrenParameters();
				parameters.TableName = tableName;

				return spGetChildrenCall (parameters, connectionString);
			}
			public static List<GetChildrenResult> spGetChildrenCall (GetChildrenParameters parameters, string connectionString)
			{
				List<GetChildrenResult> ret = new List<GetChildrenResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spGetChildren @TableName = @TableName";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@TableName", parameters.TableName == null ? (object)DBNull.Value :  parameters.TableName));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            GetChildrenResult res = new GetChildrenResult();
								if (!String.IsNullOrWhiteSpace(reader["depth"].ToString()))
								{
								    res.depth = int.Parse(reader["depth"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["constraint_id"].ToString()))
								{
								    res.constraint_id = int.Parse(reader["constraint_id"].ToString());
								}
								res.constraint_name = reader["constraint_name"].ToString();
								if (!String.IsNullOrWhiteSpace(reader["parent_object_id"].ToString()))
								{
								    res.parent_object_id = int.Parse(reader["parent_object_id"].ToString());
								}
								res.parent_name = reader["parent_name"].ToString();
								if (!String.IsNullOrWhiteSpace(reader["referenced_object_id"].ToString()))
								{
								    res.referenced_object_id = int.Parse(reader["referenced_object_id"].ToString());
								}
								res.referenced_object_name = reader["referenced_object_name"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<HasPermissionResult> spHasPermissionCall(Guid? systemUserGUID, Guid? permissionGUID, string connectionString)
			{
				HasPermissionParameters parameters = new HasPermissionParameters();
				parameters.SystemUserGUID = systemUserGUID;
				parameters.PermissionGUID = permissionGUID;

				return spHasPermissionCall (parameters, connectionString);
			}
			public static List<HasPermissionResult> spHasPermissionCall (HasPermissionParameters parameters, string connectionString)
			{
				List<HasPermissionResult> ret = new List<HasPermissionResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spHasPermission @SystemUserGUID = @SystemUserGUID, @PermissionGUID = @PermissionGUID";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@SystemUserGUID", parameters.SystemUserGUID == null ? (object)DBNull.Value :  parameters.SystemUserGUID));
						cmd.Parameters.Add(new SqlParameter("@PermissionGUID", parameters.PermissionGUID == null ? (object)DBNull.Value :  parameters.PermissionGUID));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            HasPermissionResult res = new HasPermissionResult();
								res.HasPermission = (bool)reader["HasPermission"];
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<CreateToXmlResult> spCreateToXmlCall(string tableName, string connectionString)
			{
				CreateToXmlParameters parameters = new CreateToXmlParameters();
				parameters.TableName = tableName;

				return spCreateToXmlCall (parameters, connectionString);
			}
			public static List<CreateToXmlResult> spCreateToXmlCall (CreateToXmlParameters parameters, string connectionString)
			{
				List<CreateToXmlResult> ret = new List<CreateToXmlResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spCreateToXml @TableName = @TableName";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@TableName", parameters.TableName == null ? (object)DBNull.Value :  parameters.TableName));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            CreateToXmlResult res = new CreateToXmlResult();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<SystemUserPermissionUpsertResult> spSystemUserPermissionUpsertCall(Guid? gUID, bool? isDeleted, DateTime? activeDateTime, DateTime? terminationDateTime, Guid? forSystemUserGUID, Guid? permissionGUID, Byte[] token, bool? returnResults, string connectionString)
			{
				SystemUserPermissionUpsertParameters parameters = new SystemUserPermissionUpsertParameters();
				parameters.GUID = gUID;
				parameters.IsDeleted = isDeleted;
				parameters.ActiveDateTime = activeDateTime;
				parameters.TerminationDateTime = terminationDateTime;
				parameters.ForSystemUserGUID = forSystemUserGUID;
				parameters.PermissionGUID = permissionGUID;
				parameters.Token = token;
				parameters.ReturnResults = returnResults;

				return spSystemUserPermissionUpsertCall (parameters, connectionString);
			}
			public static List<SystemUserPermissionUpsertResult> spSystemUserPermissionUpsertCall (SystemUserPermissionUpsertParameters parameters, string connectionString)
			{
				List<SystemUserPermissionUpsertResult> ret = new List<SystemUserPermissionUpsertResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spSystemUserPermissionUpsert @GUID = @GUID, @IsDeleted = @IsDeleted, @ActiveDateTime = @ActiveDateTime, @TerminationDateTime = @TerminationDateTime, @ForSystemUserGUID = @ForSystemUserGUID, @PermissionGUID = @PermissionGUID, @Token = @Token, @ReturnResults = @ReturnResults";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUID", parameters.GUID == null ? (object)DBNull.Value :  parameters.GUID));
						cmd.Parameters.Add(new SqlParameter("@IsDeleted", parameters.IsDeleted == null ? (object)DBNull.Value :  parameters.IsDeleted));
						cmd.Parameters.Add(new SqlParameter("@ActiveDateTime", parameters.ActiveDateTime == null ? (object)DBNull.Value :  parameters.ActiveDateTime));
						cmd.Parameters.Add(new SqlParameter("@TerminationDateTime", parameters.TerminationDateTime == null ? (object)DBNull.Value :  parameters.TerminationDateTime));
						cmd.Parameters.Add(new SqlParameter("@ForSystemUserGUID", parameters.ForSystemUserGUID == null ? (object)DBNull.Value :  parameters.ForSystemUserGUID));
						cmd.Parameters.Add(new SqlParameter("@PermissionGUID", parameters.PermissionGUID == null ? (object)DBNull.Value :  parameters.PermissionGUID));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
						cmd.Parameters.Add(new SqlParameter("@ReturnResults", parameters.ReturnResults == null ? (object)DBNull.Value :  parameters.ReturnResults));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            SystemUserPermissionUpsertResult res = new SystemUserPermissionUpsertResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								if (!String.IsNullOrWhiteSpace(reader["ActiveDateTime"].ToString()))
								{
								    res.ActiveDateTime = DateTime.Parse(reader["ActiveDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["TerminationDateTime"].ToString()))
								{
								    res.TerminationDateTime = DateTime.Parse(reader["TerminationDateTime"].ToString());
								}
								res.IsActiveForNow = (bool)reader["IsActiveForNow"];
								res.ForSystemUserGUID = new Guid(reader["ForSystemUserGUID"].ToString());
								res.PermissionGUID = new Guid(reader["PermissionGUID"].ToString());
								res.SystemUserGUID = new Guid(reader["SystemUserGUID"].ToString());
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<SystemUserPermissionGetResult> spSystemUserPermissionGetCall(Guid? systemUserPermissionGUID, Byte[] token, string connectionString)
			{
				SystemUserPermissionGetParameters parameters = new SystemUserPermissionGetParameters();
				parameters.SystemUserPermissionGUID = systemUserPermissionGUID;
				parameters.Token = token;

				return spSystemUserPermissionGetCall (parameters, connectionString);
			}
			public static List<SystemUserPermissionGetResult> spSystemUserPermissionGetCall (SystemUserPermissionGetParameters parameters, string connectionString)
			{
				List<SystemUserPermissionGetResult> ret = new List<SystemUserPermissionGetResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spSystemUserPermissionGet @SystemUserPermissionGUID = @SystemUserPermissionGUID, @Token = @Token";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@SystemUserPermissionGUID", parameters.SystemUserPermissionGUID == null ? (object)DBNull.Value :  parameters.SystemUserPermissionGUID));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            SystemUserPermissionGetResult res = new SystemUserPermissionGetResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								if (!String.IsNullOrWhiteSpace(reader["ActiveDateTime"].ToString()))
								{
								    res.ActiveDateTime = DateTime.Parse(reader["ActiveDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["TerminationDateTime"].ToString()))
								{
								    res.TerminationDateTime = DateTime.Parse(reader["TerminationDateTime"].ToString());
								}
								res.IsActiveForNow = (bool)reader["IsActiveForNow"];
								res.ForSystemUserGUID = new Guid(reader["ForSystemUserGUID"].ToString());
								res.PermissionGUID = new Guid(reader["PermissionGUID"].ToString());
								res.SystemUserGUID = new Guid(reader["SystemUserGUID"].ToString());
								res.Username = reader["Username"].ToString();
								res.Permission = reader["Permission"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<LoginResult> spLoginCall(string userName, string password, string connectionString)
			{
				LoginParameters parameters = new LoginParameters();
				parameters.UserName = userName;
				parameters.Password = password;

				return spLoginCall (parameters, connectionString);
			}
			public static List<LoginResult> spLoginCall (LoginParameters parameters, string connectionString)
			{
				List<LoginResult> ret = new List<LoginResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spLogin @UserName = @UserName, @Password = @Password";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@UserName", parameters.UserName == null ? (object)DBNull.Value :  parameters.UserName));
						cmd.Parameters.Add(new SqlParameter("@Password", parameters.Password == null ? (object)DBNull.Value :  parameters.Password));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            LoginResult res = new LoginResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								res.Username = reader["Username"].ToString();
								if (!String.IsNullOrWhiteSpace(reader["Token"].ToString()))
								{
								    res.Token =  Encoding.ASCII.GetBytes(reader["Token"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["TokenExpires"].ToString()))
								{
								    res.TokenExpires = DateTime.Parse(reader["TokenExpires"].ToString());
								}
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<GenerateTokenNoReturnResult> spGenerateTokenNoReturnCall(Guid? systemUserGUID, string connectionString)
			{
				GenerateTokenNoReturnParameters parameters = new GenerateTokenNoReturnParameters();
				parameters.SystemUserGUID = systemUserGUID;

				return spGenerateTokenNoReturnCall (parameters, connectionString);
			}
			public static List<GenerateTokenNoReturnResult> spGenerateTokenNoReturnCall (GenerateTokenNoReturnParameters parameters, string connectionString)
			{
				List<GenerateTokenNoReturnResult> ret = new List<GenerateTokenNoReturnResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spGenerateTokenNoReturn @SystemUserGUID = @SystemUserGUID";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@SystemUserGUID", parameters.SystemUserGUID == null ? (object)DBNull.Value :  parameters.SystemUserGUID));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            GenerateTokenNoReturnResult res = new GenerateTokenNoReturnResult();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<AccountUpsertResult> spAccountUpsertCall(Guid? gUID, bool? isDeleted, DateTime? activeDateTime, DateTime? terminationDateTime, string accountName, Byte[] token, bool? returnResults, string connectionString)
			{
				AccountUpsertParameters parameters = new AccountUpsertParameters();
				parameters.GUID = gUID;
				parameters.IsDeleted = isDeleted;
				parameters.ActiveDateTime = activeDateTime;
				parameters.TerminationDateTime = terminationDateTime;
				parameters.AccountName = accountName;
				parameters.Token = token;
				parameters.ReturnResults = returnResults;

				return spAccountUpsertCall (parameters, connectionString);
			}
			public static List<AccountUpsertResult> spAccountUpsertCall (AccountUpsertParameters parameters, string connectionString)
			{
				List<AccountUpsertResult> ret = new List<AccountUpsertResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spAccountUpsert @GUID = @GUID, @IsDeleted = @IsDeleted, @ActiveDateTime = @ActiveDateTime, @TerminationDateTime = @TerminationDateTime, @AccountName = @AccountName, @Token = @Token, @ReturnResults = @ReturnResults";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUID", parameters.GUID == null ? (object)DBNull.Value :  parameters.GUID));
						cmd.Parameters.Add(new SqlParameter("@IsDeleted", parameters.IsDeleted == null ? (object)DBNull.Value :  parameters.IsDeleted));
						cmd.Parameters.Add(new SqlParameter("@ActiveDateTime", parameters.ActiveDateTime == null ? (object)DBNull.Value :  parameters.ActiveDateTime));
						cmd.Parameters.Add(new SqlParameter("@TerminationDateTime", parameters.TerminationDateTime == null ? (object)DBNull.Value :  parameters.TerminationDateTime));
						cmd.Parameters.Add(new SqlParameter("@AccountName", parameters.AccountName == null ? (object)DBNull.Value :  parameters.AccountName));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
						cmd.Parameters.Add(new SqlParameter("@ReturnResults", parameters.ReturnResults == null ? (object)DBNull.Value :  parameters.ReturnResults));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            AccountUpsertResult res = new AccountUpsertResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								if (!String.IsNullOrWhiteSpace(reader["ActiveDateTime"].ToString()))
								{
								    res.ActiveDateTime = DateTime.Parse(reader["ActiveDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["TerminationDateTime"].ToString()))
								{
								    res.TerminationDateTime = DateTime.Parse(reader["TerminationDateTime"].ToString());
								}
								res.IsActiveForNow = (bool)reader["IsActiveForNow"];
								res.AccountName = reader["AccountName"].ToString();
								res.SystemUserGUID = new Guid(reader["SystemUserGUID"].ToString());
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<AccountGetResult> spAccountGetCall(Guid? accountGUID, Byte[] token, string connectionString)
			{
				AccountGetParameters parameters = new AccountGetParameters();
				parameters.AccountGUID = accountGUID;
				parameters.Token = token;

				return spAccountGetCall (parameters, connectionString);
			}
			public static List<AccountGetResult> spAccountGetCall (AccountGetParameters parameters, string connectionString)
			{
				List<AccountGetResult> ret = new List<AccountGetResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spAccountGet @AccountGUID = @AccountGUID, @Token = @Token";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@AccountGUID", parameters.AccountGUID == null ? (object)DBNull.Value :  parameters.AccountGUID));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            AccountGetResult res = new AccountGetResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								if (!String.IsNullOrWhiteSpace(reader["ActiveDateTime"].ToString()))
								{
								    res.ActiveDateTime = DateTime.Parse(reader["ActiveDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["TerminationDateTime"].ToString()))
								{
								    res.TerminationDateTime = DateTime.Parse(reader["TerminationDateTime"].ToString());
								}
								res.IsActiveForNow = (bool)reader["IsActiveForNow"];
								res.AccountName = reader["AccountName"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<AccountToXMLResult> spAccountToXMLCall(string gUIDS, Byte[] token, string connectionString)
			{
				AccountToXMLParameters parameters = new AccountToXMLParameters();
				parameters.GUIDS = gUIDS;
				parameters.Token = token;

				return spAccountToXMLCall (parameters, connectionString);
			}
			public static List<AccountToXMLResult> spAccountToXMLCall (AccountToXMLParameters parameters, string connectionString)
			{
				List<AccountToXMLResult> ret = new List<AccountToXMLResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spAccountToXML @GUIDS = @GUIDS, @Token = @Token";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUIDS", parameters.GUIDS == null ? (object)DBNull.Value :  parameters.GUIDS));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            AccountToXMLResult res = new AccountToXMLResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<AccountToXMLByDateTimeResult> spAccountToXMLByDateTimeCall(DateTime? fromDateTime, DateTime? toDateTime, Byte[] token, string connectionString)
			{
				AccountToXMLByDateTimeParameters parameters = new AccountToXMLByDateTimeParameters();
				parameters.FromDateTime = fromDateTime;
				parameters.ToDateTime = toDateTime;
				parameters.Token = token;

				return spAccountToXMLByDateTimeCall (parameters, connectionString);
			}
			public static List<AccountToXMLByDateTimeResult> spAccountToXMLByDateTimeCall (AccountToXMLByDateTimeParameters parameters, string connectionString)
			{
				List<AccountToXMLByDateTimeResult> ret = new List<AccountToXMLByDateTimeResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spAccountToXMLByDateTime @FromDateTime = @FromDateTime, @ToDateTime = @ToDateTime, @Token = @Token";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@FromDateTime", parameters.FromDateTime == null ? (object)DBNull.Value :  parameters.FromDateTime));
						cmd.Parameters.Add(new SqlParameter("@ToDateTime", parameters.ToDateTime == null ? (object)DBNull.Value :  parameters.ToDateTime));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            AccountToXMLByDateTimeResult res = new AccountToXMLByDateTimeResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<ActivityScheduleUpsertResult> spActivityScheduleUpsertCall(Guid? gUID, bool? isDeleted, int? doW, TimeSpan? startTime, TimeSpan? endTime, Guid? activityTypeGUID, Guid? serviceProviderGUID, Byte[] token, bool? returnResults, string connectionString)
			{
				ActivityScheduleUpsertParameters parameters = new ActivityScheduleUpsertParameters();
				parameters.GUID = gUID;
				parameters.IsDeleted = isDeleted;
				parameters.DoW = doW;
				parameters.StartTime = startTime;
				parameters.EndTime = endTime;
				parameters.ActivityTypeGUID = activityTypeGUID;
				parameters.ServiceProviderGUID = serviceProviderGUID;
				parameters.Token = token;
				parameters.ReturnResults = returnResults;

				return spActivityScheduleUpsertCall (parameters, connectionString);
			}
			public static List<ActivityScheduleUpsertResult> spActivityScheduleUpsertCall (ActivityScheduleUpsertParameters parameters, string connectionString)
			{
				List<ActivityScheduleUpsertResult> ret = new List<ActivityScheduleUpsertResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spActivityScheduleUpsert @GUID = @GUID, @IsDeleted = @IsDeleted, @DoW = @DoW, @StartTime = @StartTime, @EndTime = @EndTime, @ActivityTypeGUID = @ActivityTypeGUID, @ServiceProviderGUID = @ServiceProviderGUID, @Token = @Token, @ReturnResults = @ReturnResults";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUID", parameters.GUID == null ? (object)DBNull.Value :  parameters.GUID));
						cmd.Parameters.Add(new SqlParameter("@IsDeleted", parameters.IsDeleted == null ? (object)DBNull.Value :  parameters.IsDeleted));
						cmd.Parameters.Add(new SqlParameter("@DoW", parameters.DoW == null ? (object)DBNull.Value :  parameters.DoW));
						cmd.Parameters.Add(new SqlParameter("@StartTime", parameters.StartTime == null ? (object)DBNull.Value :  parameters.StartTime));
						cmd.Parameters.Add(new SqlParameter("@EndTime", parameters.EndTime == null ? (object)DBNull.Value :  parameters.EndTime));
						cmd.Parameters.Add(new SqlParameter("@ActivityTypeGUID", parameters.ActivityTypeGUID == null ? (object)DBNull.Value :  parameters.ActivityTypeGUID));
						cmd.Parameters.Add(new SqlParameter("@ServiceProviderGUID", parameters.ServiceProviderGUID == null ? (object)DBNull.Value :  parameters.ServiceProviderGUID));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
						cmd.Parameters.Add(new SqlParameter("@ReturnResults", parameters.ReturnResults == null ? (object)DBNull.Value :  parameters.ReturnResults));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            ActivityScheduleUpsertResult res = new ActivityScheduleUpsertResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								if (!String.IsNullOrWhiteSpace(reader["DoW"].ToString()))
								{
								    res.DoW = int.Parse(reader["DoW"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["StartTime"].ToString()))
								{
								    res.StartTime = TimeSpan.Parse(reader["StartTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["EndTime"].ToString()))
								{
								    res.EndTime = TimeSpan.Parse(reader["EndTime"].ToString());
								}
								res.ActivityTypeGUID = new Guid(reader["ActivityTypeGUID"].ToString());
								res.ServiceProviderGUID = new Guid(reader["ServiceProviderGUID"].ToString());
								res.SystemUserGUID = new Guid(reader["SystemUserGUID"].ToString());
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<ActivityScheduleGetResult> spActivityScheduleGetCall(Guid? activityScheduleGUID, Byte[] token, string connectionString)
			{
				ActivityScheduleGetParameters parameters = new ActivityScheduleGetParameters();
				parameters.ActivityScheduleGUID = activityScheduleGUID;
				parameters.Token = token;

				return spActivityScheduleGetCall (parameters, connectionString);
			}
			public static List<ActivityScheduleGetResult> spActivityScheduleGetCall (ActivityScheduleGetParameters parameters, string connectionString)
			{
				List<ActivityScheduleGetResult> ret = new List<ActivityScheduleGetResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spActivityScheduleGet @ActivityScheduleGUID = @ActivityScheduleGUID, @Token = @Token";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@ActivityScheduleGUID", parameters.ActivityScheduleGUID == null ? (object)DBNull.Value :  parameters.ActivityScheduleGUID));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            ActivityScheduleGetResult res = new ActivityScheduleGetResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								if (!String.IsNullOrWhiteSpace(reader["DoW"].ToString()))
								{
								    res.DoW = int.Parse(reader["DoW"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["StartTime"].ToString()))
								{
								    res.StartTime = TimeSpan.Parse(reader["StartTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["EndTime"].ToString()))
								{
								    res.EndTime = TimeSpan.Parse(reader["EndTime"].ToString());
								}
								res.ActivityTypeGUID = new Guid(reader["ActivityTypeGUID"].ToString());
								res.ServiceProviderGUID = new Guid(reader["ServiceProviderGUID"].ToString());
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<ActivityScheduleToXMLResult> spActivityScheduleToXMLCall(string gUIDS, Byte[] token, string connectionString)
			{
				ActivityScheduleToXMLParameters parameters = new ActivityScheduleToXMLParameters();
				parameters.GUIDS = gUIDS;
				parameters.Token = token;

				return spActivityScheduleToXMLCall (parameters, connectionString);
			}
			public static List<ActivityScheduleToXMLResult> spActivityScheduleToXMLCall (ActivityScheduleToXMLParameters parameters, string connectionString)
			{
				List<ActivityScheduleToXMLResult> ret = new List<ActivityScheduleToXMLResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spActivityScheduleToXML @GUIDS = @GUIDS, @Token = @Token";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUIDS", parameters.GUIDS == null ? (object)DBNull.Value :  parameters.GUIDS));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            ActivityScheduleToXMLResult res = new ActivityScheduleToXMLResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<ActivityScheduleToXMLByDateTimeResult> spActivityScheduleToXMLByDateTimeCall(DateTime? fromDateTime, DateTime? toDateTime, Byte[] token, string connectionString)
			{
				ActivityScheduleToXMLByDateTimeParameters parameters = new ActivityScheduleToXMLByDateTimeParameters();
				parameters.FromDateTime = fromDateTime;
				parameters.ToDateTime = toDateTime;
				parameters.Token = token;

				return spActivityScheduleToXMLByDateTimeCall (parameters, connectionString);
			}
			public static List<ActivityScheduleToXMLByDateTimeResult> spActivityScheduleToXMLByDateTimeCall (ActivityScheduleToXMLByDateTimeParameters parameters, string connectionString)
			{
				List<ActivityScheduleToXMLByDateTimeResult> ret = new List<ActivityScheduleToXMLByDateTimeResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spActivityScheduleToXMLByDateTime @FromDateTime = @FromDateTime, @ToDateTime = @ToDateTime, @Token = @Token";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@FromDateTime", parameters.FromDateTime == null ? (object)DBNull.Value :  parameters.FromDateTime));
						cmd.Parameters.Add(new SqlParameter("@ToDateTime", parameters.ToDateTime == null ? (object)DBNull.Value :  parameters.ToDateTime));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            ActivityScheduleToXMLByDateTimeResult res = new ActivityScheduleToXMLByDateTimeResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<LUActivityTypeUpsertResult> spLUActivityTypeUpsertCall(Guid? gUID, bool? isDeleted, string activityType, Guid? accountGUID, Byte[] token, bool? returnResults, string connectionString)
			{
				LUActivityTypeUpsertParameters parameters = new LUActivityTypeUpsertParameters();
				parameters.GUID = gUID;
				parameters.IsDeleted = isDeleted;
				parameters.ActivityType = activityType;
				parameters.AccountGUID = accountGUID;
				parameters.Token = token;
				parameters.ReturnResults = returnResults;

				return spLUActivityTypeUpsertCall (parameters, connectionString);
			}
			public static List<LUActivityTypeUpsertResult> spLUActivityTypeUpsertCall (LUActivityTypeUpsertParameters parameters, string connectionString)
			{
				List<LUActivityTypeUpsertResult> ret = new List<LUActivityTypeUpsertResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spLUActivityTypeUpsert @GUID = @GUID, @IsDeleted = @IsDeleted, @ActivityType = @ActivityType, @AccountGUID = @AccountGUID, @Token = @Token, @ReturnResults = @ReturnResults";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUID", parameters.GUID == null ? (object)DBNull.Value :  parameters.GUID));
						cmd.Parameters.Add(new SqlParameter("@IsDeleted", parameters.IsDeleted == null ? (object)DBNull.Value :  parameters.IsDeleted));
						cmd.Parameters.Add(new SqlParameter("@ActivityType", parameters.ActivityType == null ? (object)DBNull.Value :  parameters.ActivityType));
						cmd.Parameters.Add(new SqlParameter("@AccountGUID", parameters.AccountGUID == null ? (object)DBNull.Value :  parameters.AccountGUID));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
						cmd.Parameters.Add(new SqlParameter("@ReturnResults", parameters.ReturnResults == null ? (object)DBNull.Value :  parameters.ReturnResults));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            LUActivityTypeUpsertResult res = new LUActivityTypeUpsertResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								res.ActivityType = reader["ActivityType"].ToString();
								res.AccountGUID = new Guid(reader["AccountGUID"].ToString());
								res.SystemUserGUID = new Guid(reader["SystemUserGUID"].ToString());
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<LUActivityTypeGetResult> spLUActivityTypeGetCall(Guid? lUActivityTypeGUID, Byte[] token, string connectionString)
			{
				LUActivityTypeGetParameters parameters = new LUActivityTypeGetParameters();
				parameters.LUActivityTypeGUID = lUActivityTypeGUID;
				parameters.Token = token;

				return spLUActivityTypeGetCall (parameters, connectionString);
			}
			public static List<LUActivityTypeGetResult> spLUActivityTypeGetCall (LUActivityTypeGetParameters parameters, string connectionString)
			{
				List<LUActivityTypeGetResult> ret = new List<LUActivityTypeGetResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spLUActivityTypeGet @LUActivityTypeGUID = @LUActivityTypeGUID, @Token = @Token";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@LUActivityTypeGUID", parameters.LUActivityTypeGUID == null ? (object)DBNull.Value :  parameters.LUActivityTypeGUID));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            LUActivityTypeGetResult res = new LUActivityTypeGetResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								res.ActivityType = reader["ActivityType"].ToString();
								res.AccountGUID = new Guid(reader["AccountGUID"].ToString());
								res.SystemUserGUID = new Guid(reader["SystemUserGUID"].ToString());
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<LUActivityTypeToXMLResult> spLUActivityTypeToXMLCall(string gUIDS, Byte[] token, string connectionString)
			{
				LUActivityTypeToXMLParameters parameters = new LUActivityTypeToXMLParameters();
				parameters.GUIDS = gUIDS;
				parameters.Token = token;

				return spLUActivityTypeToXMLCall (parameters, connectionString);
			}
			public static List<LUActivityTypeToXMLResult> spLUActivityTypeToXMLCall (LUActivityTypeToXMLParameters parameters, string connectionString)
			{
				List<LUActivityTypeToXMLResult> ret = new List<LUActivityTypeToXMLResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spLUActivityTypeToXML @GUIDS = @GUIDS, @Token = @Token";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUIDS", parameters.GUIDS == null ? (object)DBNull.Value :  parameters.GUIDS));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            LUActivityTypeToXMLResult res = new LUActivityTypeToXMLResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<LUActivityTypeToXMLByDateTimeResult> spLUActivityTypeToXMLByDateTimeCall(DateTime? fromDateTime, DateTime? toDateTime, Byte[] token, string connectionString)
			{
				LUActivityTypeToXMLByDateTimeParameters parameters = new LUActivityTypeToXMLByDateTimeParameters();
				parameters.FromDateTime = fromDateTime;
				parameters.ToDateTime = toDateTime;
				parameters.Token = token;

				return spLUActivityTypeToXMLByDateTimeCall (parameters, connectionString);
			}
			public static List<LUActivityTypeToXMLByDateTimeResult> spLUActivityTypeToXMLByDateTimeCall (LUActivityTypeToXMLByDateTimeParameters parameters, string connectionString)
			{
				List<LUActivityTypeToXMLByDateTimeResult> ret = new List<LUActivityTypeToXMLByDateTimeResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spLUActivityTypeToXMLByDateTime @FromDateTime = @FromDateTime, @ToDateTime = @ToDateTime, @Token = @Token";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@FromDateTime", parameters.FromDateTime == null ? (object)DBNull.Value :  parameters.FromDateTime));
						cmd.Parameters.Add(new SqlParameter("@ToDateTime", parameters.ToDateTime == null ? (object)DBNull.Value :  parameters.ToDateTime));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            LUActivityTypeToXMLByDateTimeResult res = new LUActivityTypeToXMLByDateTimeResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<LUAddressTypeUpsertResult> spLUAddressTypeUpsertCall(Guid? gUID, bool? isDeleted, DateTime? activeDateTime, DateTime? terminationDateTime, string addressType, Byte[] token, bool? returnResults, string connectionString)
			{
				LUAddressTypeUpsertParameters parameters = new LUAddressTypeUpsertParameters();
				parameters.GUID = gUID;
				parameters.IsDeleted = isDeleted;
				parameters.ActiveDateTime = activeDateTime;
				parameters.TerminationDateTime = terminationDateTime;
				parameters.AddressType = addressType;
				parameters.Token = token;
				parameters.ReturnResults = returnResults;

				return spLUAddressTypeUpsertCall (parameters, connectionString);
			}
			public static List<LUAddressTypeUpsertResult> spLUAddressTypeUpsertCall (LUAddressTypeUpsertParameters parameters, string connectionString)
			{
				List<LUAddressTypeUpsertResult> ret = new List<LUAddressTypeUpsertResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spLUAddressTypeUpsert @GUID = @GUID, @IsDeleted = @IsDeleted, @ActiveDateTime = @ActiveDateTime, @TerminationDateTime = @TerminationDateTime, @AddressType = @AddressType, @Token = @Token, @ReturnResults = @ReturnResults";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUID", parameters.GUID == null ? (object)DBNull.Value :  parameters.GUID));
						cmd.Parameters.Add(new SqlParameter("@IsDeleted", parameters.IsDeleted == null ? (object)DBNull.Value :  parameters.IsDeleted));
						cmd.Parameters.Add(new SqlParameter("@ActiveDateTime", parameters.ActiveDateTime == null ? (object)DBNull.Value :  parameters.ActiveDateTime));
						cmd.Parameters.Add(new SqlParameter("@TerminationDateTime", parameters.TerminationDateTime == null ? (object)DBNull.Value :  parameters.TerminationDateTime));
						cmd.Parameters.Add(new SqlParameter("@AddressType", parameters.AddressType == null ? (object)DBNull.Value :  parameters.AddressType));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
						cmd.Parameters.Add(new SqlParameter("@ReturnResults", parameters.ReturnResults == null ? (object)DBNull.Value :  parameters.ReturnResults));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            LUAddressTypeUpsertResult res = new LUAddressTypeUpsertResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								if (!String.IsNullOrWhiteSpace(reader["ActiveDateTime"].ToString()))
								{
								    res.ActiveDateTime = DateTime.Parse(reader["ActiveDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["TerminationDateTime"].ToString()))
								{
								    res.TerminationDateTime = DateTime.Parse(reader["TerminationDateTime"].ToString());
								}
								res.IsActiveForNow = (bool)reader["IsActiveForNow"];
								res.AddressType = reader["AddressType"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<AuditLogUpsertResult> spAuditLogUpsertCall(Guid? gUID, string source, string tableName, string beforeSnapshot, string afterSnapshot, Guid? tableGUID, Guid? systemUserGUID, bool? returnResults, string connectionString)
			{
				AuditLogUpsertParameters parameters = new AuditLogUpsertParameters();
				parameters.GUID = gUID;
				parameters.Source = source;
				parameters.TableName = tableName;
				parameters.BeforeSnapshot = beforeSnapshot;
				parameters.AfterSnapshot = afterSnapshot;
				parameters.TableGUID = tableGUID;
				parameters.SystemUserGUID = systemUserGUID;
				parameters.ReturnResults = returnResults;

				return spAuditLogUpsertCall (parameters, connectionString);
			}
			public static List<AuditLogUpsertResult> spAuditLogUpsertCall (AuditLogUpsertParameters parameters, string connectionString)
			{
				List<AuditLogUpsertResult> ret = new List<AuditLogUpsertResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spAuditLogUpsert @GUID = @GUID, @Source = @Source, @TableName = @TableName, @BeforeSnapshot = @BeforeSnapshot, @AfterSnapshot = @AfterSnapshot, @TableGUID = @TableGUID, @SystemUserGUID = @SystemUserGUID, @ReturnResults = @ReturnResults";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUID", parameters.GUID == null ? (object)DBNull.Value :  parameters.GUID));
						cmd.Parameters.Add(new SqlParameter("@Source", parameters.Source == null ? (object)DBNull.Value :  parameters.Source));
						cmd.Parameters.Add(new SqlParameter("@TableName", parameters.TableName == null ? (object)DBNull.Value :  parameters.TableName));
						cmd.Parameters.Add(new SqlParameter("@BeforeSnapshot", parameters.BeforeSnapshot == null ? (object)DBNull.Value :  parameters.BeforeSnapshot));
						cmd.Parameters.Add(new SqlParameter("@AfterSnapshot", parameters.AfterSnapshot == null ? (object)DBNull.Value :  parameters.AfterSnapshot));
						cmd.Parameters.Add(new SqlParameter("@TableGUID", parameters.TableGUID == null ? (object)DBNull.Value :  parameters.TableGUID));
						cmd.Parameters.Add(new SqlParameter("@SystemUserGUID", parameters.SystemUserGUID == null ? (object)DBNull.Value :  parameters.SystemUserGUID));
						cmd.Parameters.Add(new SqlParameter("@ReturnResults", parameters.ReturnResults == null ? (object)DBNull.Value :  parameters.ReturnResults));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            AuditLogUpsertResult res = new AuditLogUpsertResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.Source = reader["Source"].ToString();
								res.TableGUID = new Guid(reader["TableGUID"].ToString());
								res.TableName = reader["TableName"].ToString();
								res.BeforeSnapshot = reader["BeforeSnapshot"].ToString();
								res.AfterSnapshot = reader["AfterSnapshot"].ToString();
								res.SystemUserGUID = new Guid(reader["SystemUserGUID"].ToString());
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<LUAddressTypeGetResult> spLUAddressTypeGetCall(Guid? lUAddressTypeGUID, Byte[] token, string connectionString)
			{
				LUAddressTypeGetParameters parameters = new LUAddressTypeGetParameters();
				parameters.LUAddressTypeGUID = lUAddressTypeGUID;
				parameters.Token = token;

				return spLUAddressTypeGetCall (parameters, connectionString);
			}
			public static List<LUAddressTypeGetResult> spLUAddressTypeGetCall (LUAddressTypeGetParameters parameters, string connectionString)
			{
				List<LUAddressTypeGetResult> ret = new List<LUAddressTypeGetResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spLUAddressTypeGet @LUAddressTypeGUID = @LUAddressTypeGUID, @Token = @Token";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@LUAddressTypeGUID", parameters.LUAddressTypeGUID == null ? (object)DBNull.Value :  parameters.LUAddressTypeGUID));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            LUAddressTypeGetResult res = new LUAddressTypeGetResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								if (!String.IsNullOrWhiteSpace(reader["ActiveDateTime"].ToString()))
								{
								    res.ActiveDateTime = DateTime.Parse(reader["ActiveDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["TerminationDateTime"].ToString()))
								{
								    res.TerminationDateTime = DateTime.Parse(reader["TerminationDateTime"].ToString());
								}
								res.IsActiveForNow = (bool)reader["IsActiveForNow"];
								res.AddressType = reader["AddressType"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<LUAddressTypeToXMLResult> spLUAddressTypeToXMLCall(string gUIDS, Byte[] token, string connectionString)
			{
				LUAddressTypeToXMLParameters parameters = new LUAddressTypeToXMLParameters();
				parameters.GUIDS = gUIDS;
				parameters.Token = token;

				return spLUAddressTypeToXMLCall (parameters, connectionString);
			}
			public static List<LUAddressTypeToXMLResult> spLUAddressTypeToXMLCall (LUAddressTypeToXMLParameters parameters, string connectionString)
			{
				List<LUAddressTypeToXMLResult> ret = new List<LUAddressTypeToXMLResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spLUAddressTypeToXML @GUIDS = @GUIDS, @Token = @Token";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUIDS", parameters.GUIDS == null ? (object)DBNull.Value :  parameters.GUIDS));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            LUAddressTypeToXMLResult res = new LUAddressTypeToXMLResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<LUAddressTypeToXMLByDateTimeResult> spLUAddressTypeToXMLByDateTimeCall(DateTime? fromDateTime, DateTime? toDateTime, Byte[] token, string connectionString)
			{
				LUAddressTypeToXMLByDateTimeParameters parameters = new LUAddressTypeToXMLByDateTimeParameters();
				parameters.FromDateTime = fromDateTime;
				parameters.ToDateTime = toDateTime;
				parameters.Token = token;

				return spLUAddressTypeToXMLByDateTimeCall (parameters, connectionString);
			}
			public static List<LUAddressTypeToXMLByDateTimeResult> spLUAddressTypeToXMLByDateTimeCall (LUAddressTypeToXMLByDateTimeParameters parameters, string connectionString)
			{
				List<LUAddressTypeToXMLByDateTimeResult> ret = new List<LUAddressTypeToXMLByDateTimeResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spLUAddressTypeToXMLByDateTime @FromDateTime = @FromDateTime, @ToDateTime = @ToDateTime, @Token = @Token";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@FromDateTime", parameters.FromDateTime == null ? (object)DBNull.Value :  parameters.FromDateTime));
						cmd.Parameters.Add(new SqlParameter("@ToDateTime", parameters.ToDateTime == null ? (object)DBNull.Value :  parameters.ToDateTime));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            LUAddressTypeToXMLByDateTimeResult res = new LUAddressTypeToXMLByDateTimeResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<AppointmentUpsertResult> spAppointmentUpsertCall(Guid? gUID, bool? isDeleted, DateTime? startDateTime, TimeSpan? duration, DateTime? actualStartDateTime, DateTime? actualEndDateTime, Guid? customerGUID, Guid? storeGUID, Guid? serviceProviderGUID, Byte[] token, bool? returnResults, string connectionString)
			{
				AppointmentUpsertParameters parameters = new AppointmentUpsertParameters();
				parameters.GUID = gUID;
				parameters.IsDeleted = isDeleted;
				parameters.StartDateTime = startDateTime;
				parameters.Duration = duration;
				parameters.ActualStartDateTime = actualStartDateTime;
				parameters.ActualEndDateTime = actualEndDateTime;
				parameters.CustomerGUID = customerGUID;
				parameters.StoreGUID = storeGUID;
				parameters.ServiceProviderGUID = serviceProviderGUID;
				parameters.Token = token;
				parameters.ReturnResults = returnResults;

				return spAppointmentUpsertCall (parameters, connectionString);
			}
			public static List<AppointmentUpsertResult> spAppointmentUpsertCall (AppointmentUpsertParameters parameters, string connectionString)
			{
				List<AppointmentUpsertResult> ret = new List<AppointmentUpsertResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spAppointmentUpsert @GUID = @GUID, @IsDeleted = @IsDeleted, @StartDateTime = @StartDateTime, @Duration = @Duration, @ActualStartDateTime = @ActualStartDateTime, @ActualEndDateTime = @ActualEndDateTime, @CustomerGUID = @CustomerGUID, @StoreGUID = @StoreGUID, @ServiceProviderGUID = @ServiceProviderGUID, @Token = @Token, @ReturnResults = @ReturnResults";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUID", parameters.GUID == null ? (object)DBNull.Value :  parameters.GUID));
						cmd.Parameters.Add(new SqlParameter("@IsDeleted", parameters.IsDeleted == null ? (object)DBNull.Value :  parameters.IsDeleted));
						cmd.Parameters.Add(new SqlParameter("@StartDateTime", parameters.StartDateTime == null ? (object)DBNull.Value :  parameters.StartDateTime));
						cmd.Parameters.Add(new SqlParameter("@Duration", parameters.Duration == null ? (object)DBNull.Value :  parameters.Duration));
						cmd.Parameters.Add(new SqlParameter("@ActualStartDateTime", parameters.ActualStartDateTime == null ? (object)DBNull.Value :  parameters.ActualStartDateTime));
						cmd.Parameters.Add(new SqlParameter("@ActualEndDateTime", parameters.ActualEndDateTime == null ? (object)DBNull.Value :  parameters.ActualEndDateTime));
						cmd.Parameters.Add(new SqlParameter("@CustomerGUID", parameters.CustomerGUID == null ? (object)DBNull.Value :  parameters.CustomerGUID));
						cmd.Parameters.Add(new SqlParameter("@StoreGUID", parameters.StoreGUID == null ? (object)DBNull.Value :  parameters.StoreGUID));
						cmd.Parameters.Add(new SqlParameter("@ServiceProviderGUID", parameters.ServiceProviderGUID == null ? (object)DBNull.Value :  parameters.ServiceProviderGUID));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
						cmd.Parameters.Add(new SqlParameter("@ReturnResults", parameters.ReturnResults == null ? (object)DBNull.Value :  parameters.ReturnResults));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            AppointmentUpsertResult res = new AppointmentUpsertResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								if (!String.IsNullOrWhiteSpace(reader["StartDateTime"].ToString()))
								{
								    res.StartDateTime = DateTime.Parse(reader["StartDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["EndDateTime"].ToString()))
								{
								    res.EndDateTime = DateTime.Parse(reader["EndDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["Duration"].ToString()))
								{
								    res.Duration = TimeSpan.Parse(reader["Duration"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["ActualStartDateTime"].ToString()))
								{
								    res.ActualStartDateTime = DateTime.Parse(reader["ActualStartDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["ActualEndDateTime"].ToString()))
								{
								    res.ActualEndDateTime = DateTime.Parse(reader["ActualEndDateTime"].ToString());
								}
								res.CustomerGUID = new Guid(reader["CustomerGUID"].ToString());
								res.StoreGUID = new Guid(reader["StoreGUID"].ToString());
								res.ServiceProviderGUID = new Guid(reader["ServiceProviderGUID"].ToString());
								res.SystemUserGUID = new Guid(reader["SystemUserGUID"].ToString());
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<AppointmentGetResult> spAppointmentGetCall(Guid? appointmentGUID, Byte[] token, string connectionString)
			{
				AppointmentGetParameters parameters = new AppointmentGetParameters();
				parameters.AppointmentGUID = appointmentGUID;
				parameters.Token = token;

				return spAppointmentGetCall (parameters, connectionString);
			}
			public static List<AppointmentGetResult> spAppointmentGetCall (AppointmentGetParameters parameters, string connectionString)
			{
				List<AppointmentGetResult> ret = new List<AppointmentGetResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spAppointmentGet @AppointmentGUID = @AppointmentGUID, @Token = @Token";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@AppointmentGUID", parameters.AppointmentGUID == null ? (object)DBNull.Value :  parameters.AppointmentGUID));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            AppointmentGetResult res = new AppointmentGetResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								res.ServiceProviderFirstname = reader["ServiceProviderFirstname"].ToString();
								res.ServiceProviderSurname = reader["ServiceProviderSurname"].ToString();
								res.CustomerFirstname = reader["CustomerFirstname"].ToString();
								res.CustomerSurname = reader["CustomerSurname"].ToString();
								if (!String.IsNullOrWhiteSpace(reader["StartDateTime"].ToString()))
								{
								    res.StartDateTime = DateTime.Parse(reader["StartDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["EndDateTime"].ToString()))
								{
								    res.EndDateTime = DateTime.Parse(reader["EndDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["Duration"].ToString()))
								{
								    res.Duration = TimeSpan.Parse(reader["Duration"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["ActualStartDateTime"].ToString()))
								{
								    res.ActualStartDateTime = DateTime.Parse(reader["ActualStartDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["ActualEndDateTime"].ToString()))
								{
								    res.ActualEndDateTime = DateTime.Parse(reader["ActualEndDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["ActualDuration"].ToString()))
								{
								    res.ActualDuration = TimeSpan.Parse(reader["ActualDuration"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DelayTime"].ToString()))
								{
								    res.DelayTime = int.Parse(reader["DelayTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["ExpectedDelay"].ToString()))
								{
								    res.ExpectedDelay = int.Parse(reader["ExpectedDelay"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["ExpectedStartDateTime"].ToString()))
								{
								    res.ExpectedStartDateTime = DateTime.Parse(reader["ExpectedStartDateTime"].ToString());
								}
								res.Colour = reader["Colour"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<AppointmentToXMLResult> spAppointmentToXMLCall(string gUIDS, Byte[] token, string connectionString)
			{
				AppointmentToXMLParameters parameters = new AppointmentToXMLParameters();
				parameters.GUIDS = gUIDS;
				parameters.Token = token;

				return spAppointmentToXMLCall (parameters, connectionString);
			}
			public static List<AppointmentToXMLResult> spAppointmentToXMLCall (AppointmentToXMLParameters parameters, string connectionString)
			{
				List<AppointmentToXMLResult> ret = new List<AppointmentToXMLResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spAppointmentToXML @GUIDS = @GUIDS, @Token = @Token";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUIDS", parameters.GUIDS == null ? (object)DBNull.Value :  parameters.GUIDS));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            AppointmentToXMLResult res = new AppointmentToXMLResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<AppointmentToXMLByDateTimeResult> spAppointmentToXMLByDateTimeCall(DateTime? fromDateTime, DateTime? toDateTime, Byte[] token, string connectionString)
			{
				AppointmentToXMLByDateTimeParameters parameters = new AppointmentToXMLByDateTimeParameters();
				parameters.FromDateTime = fromDateTime;
				parameters.ToDateTime = toDateTime;
				parameters.Token = token;

				return spAppointmentToXMLByDateTimeCall (parameters, connectionString);
			}
			public static List<AppointmentToXMLByDateTimeResult> spAppointmentToXMLByDateTimeCall (AppointmentToXMLByDateTimeParameters parameters, string connectionString)
			{
				List<AppointmentToXMLByDateTimeResult> ret = new List<AppointmentToXMLByDateTimeResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spAppointmentToXMLByDateTime @FromDateTime = @FromDateTime, @ToDateTime = @ToDateTime, @Token = @Token";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@FromDateTime", parameters.FromDateTime == null ? (object)DBNull.Value :  parameters.FromDateTime));
						cmd.Parameters.Add(new SqlParameter("@ToDateTime", parameters.ToDateTime == null ? (object)DBNull.Value :  parameters.ToDateTime));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            AppointmentToXMLByDateTimeResult res = new AppointmentToXMLByDateTimeResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<ServiceProviderUpsertResult> spServiceProviderUpsertCall(Guid? gUID, bool? isDeleted, DateTime? activeDateTime, DateTime? terminationDateTime, string firstname, string surname, Guid? accountGUID, Byte[] token, bool? returnResults, string connectionString)
			{
				ServiceProviderUpsertParameters parameters = new ServiceProviderUpsertParameters();
				parameters.GUID = gUID;
				parameters.IsDeleted = isDeleted;
				parameters.ActiveDateTime = activeDateTime;
				parameters.TerminationDateTime = terminationDateTime;
				parameters.Firstname = firstname;
				parameters.Surname = surname;
				parameters.AccountGUID = accountGUID;
				parameters.Token = token;
				parameters.ReturnResults = returnResults;

				return spServiceProviderUpsertCall (parameters, connectionString);
			}
			public static List<ServiceProviderUpsertResult> spServiceProviderUpsertCall (ServiceProviderUpsertParameters parameters, string connectionString)
			{
				List<ServiceProviderUpsertResult> ret = new List<ServiceProviderUpsertResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spServiceProviderUpsert @GUID = @GUID, @IsDeleted = @IsDeleted, @ActiveDateTime = @ActiveDateTime, @TerminationDateTime = @TerminationDateTime, @Firstname = @Firstname, @Surname = @Surname, @AccountGUID = @AccountGUID, @Token = @Token, @ReturnResults = @ReturnResults";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUID", parameters.GUID == null ? (object)DBNull.Value :  parameters.GUID));
						cmd.Parameters.Add(new SqlParameter("@IsDeleted", parameters.IsDeleted == null ? (object)DBNull.Value :  parameters.IsDeleted));
						cmd.Parameters.Add(new SqlParameter("@ActiveDateTime", parameters.ActiveDateTime == null ? (object)DBNull.Value :  parameters.ActiveDateTime));
						cmd.Parameters.Add(new SqlParameter("@TerminationDateTime", parameters.TerminationDateTime == null ? (object)DBNull.Value :  parameters.TerminationDateTime));
						cmd.Parameters.Add(new SqlParameter("@Firstname", parameters.Firstname == null ? (object)DBNull.Value :  parameters.Firstname));
						cmd.Parameters.Add(new SqlParameter("@Surname", parameters.Surname == null ? (object)DBNull.Value :  parameters.Surname));
						cmd.Parameters.Add(new SqlParameter("@AccountGUID", parameters.AccountGUID == null ? (object)DBNull.Value :  parameters.AccountGUID));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
						cmd.Parameters.Add(new SqlParameter("@ReturnResults", parameters.ReturnResults == null ? (object)DBNull.Value :  parameters.ReturnResults));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            ServiceProviderUpsertResult res = new ServiceProviderUpsertResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								if (!String.IsNullOrWhiteSpace(reader["ActiveDateTime"].ToString()))
								{
								    res.ActiveDateTime = DateTime.Parse(reader["ActiveDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["TerminationDateTime"].ToString()))
								{
								    res.TerminationDateTime = DateTime.Parse(reader["TerminationDateTime"].ToString());
								}
								res.IsActiveForNow = (bool)reader["IsActiveForNow"];
								res.Firstname = reader["Firstname"].ToString();
								res.Surname = reader["Surname"].ToString();
								res.AccountGUID = new Guid(reader["AccountGUID"].ToString());
								res.SystemUserGUID = new Guid(reader["SystemUserGUID"].ToString());
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<ServiceProviderGetResult> spServiceProviderGetCall(Guid? serviceProviderGUID, Byte[] token, string connectionString)
			{
				ServiceProviderGetParameters parameters = new ServiceProviderGetParameters();
				parameters.ServiceProviderGUID = serviceProviderGUID;
				parameters.Token = token;

				return spServiceProviderGetCall (parameters, connectionString);
			}
			public static List<ServiceProviderGetResult> spServiceProviderGetCall (ServiceProviderGetParameters parameters, string connectionString)
			{
				List<ServiceProviderGetResult> ret = new List<ServiceProviderGetResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spServiceProviderGet @ServiceProviderGUID = @ServiceProviderGUID, @Token = @Token";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@ServiceProviderGUID", parameters.ServiceProviderGUID == null ? (object)DBNull.Value :  parameters.ServiceProviderGUID));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            ServiceProviderGetResult res = new ServiceProviderGetResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								if (!String.IsNullOrWhiteSpace(reader["ActiveDateTime"].ToString()))
								{
								    res.ActiveDateTime = DateTime.Parse(reader["ActiveDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["TerminationDateTime"].ToString()))
								{
								    res.TerminationDateTime = DateTime.Parse(reader["TerminationDateTime"].ToString());
								}
								res.IsActiveForNow = (bool)reader["IsActiveForNow"];
								res.Firstname = reader["Firstname"].ToString();
								res.Surname = reader["Surname"].ToString();
								res.AccountGUID = new Guid(reader["AccountGUID"].ToString());
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<ServiceProviderToXMLResult> spServiceProviderToXMLCall(string gUIDS, Byte[] token, string connectionString)
			{
				ServiceProviderToXMLParameters parameters = new ServiceProviderToXMLParameters();
				parameters.GUIDS = gUIDS;
				parameters.Token = token;

				return spServiceProviderToXMLCall (parameters, connectionString);
			}
			public static List<ServiceProviderToXMLResult> spServiceProviderToXMLCall (ServiceProviderToXMLParameters parameters, string connectionString)
			{
				List<ServiceProviderToXMLResult> ret = new List<ServiceProviderToXMLResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spServiceProviderToXML @GUIDS = @GUIDS, @Token = @Token";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUIDS", parameters.GUIDS == null ? (object)DBNull.Value :  parameters.GUIDS));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            ServiceProviderToXMLResult res = new ServiceProviderToXMLResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<ServiceProviderToXMLByDateTimeResult> spServiceProviderToXMLByDateTimeCall(DateTime? fromDateTime, DateTime? toDateTime, Byte[] token, string connectionString)
			{
				ServiceProviderToXMLByDateTimeParameters parameters = new ServiceProviderToXMLByDateTimeParameters();
				parameters.FromDateTime = fromDateTime;
				parameters.ToDateTime = toDateTime;
				parameters.Token = token;

				return spServiceProviderToXMLByDateTimeCall (parameters, connectionString);
			}
			public static List<ServiceProviderToXMLByDateTimeResult> spServiceProviderToXMLByDateTimeCall (ServiceProviderToXMLByDateTimeParameters parameters, string connectionString)
			{
				List<ServiceProviderToXMLByDateTimeResult> ret = new List<ServiceProviderToXMLByDateTimeResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spServiceProviderToXMLByDateTime @FromDateTime = @FromDateTime, @ToDateTime = @ToDateTime, @Token = @Token";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@FromDateTime", parameters.FromDateTime == null ? (object)DBNull.Value :  parameters.FromDateTime));
						cmd.Parameters.Add(new SqlParameter("@ToDateTime", parameters.ToDateTime == null ? (object)DBNull.Value :  parameters.ToDateTime));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            ServiceProviderToXMLByDateTimeResult res = new ServiceProviderToXMLByDateTimeResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<CustomerUpsertResult> spCustomerUpsertCall(Guid? gUID, bool? isDeleted, DateTime? activeDateTime, DateTime? terminationDateTime, string firstname, string surname, string emailAddress, string iDNumber, DateTime? birthDate, string cellphoneNumber, Guid? accountGUID, Byte[] token, bool? returnResults, string connectionString)
			{
				CustomerUpsertParameters parameters = new CustomerUpsertParameters();
				parameters.GUID = gUID;
				parameters.IsDeleted = isDeleted;
				parameters.ActiveDateTime = activeDateTime;
				parameters.TerminationDateTime = terminationDateTime;
				parameters.Firstname = firstname;
				parameters.Surname = surname;
				parameters.EmailAddress = emailAddress;
				parameters.IDNumber = iDNumber;
				parameters.BirthDate = birthDate;
				parameters.CellphoneNumber = cellphoneNumber;
				parameters.AccountGUID = accountGUID;
				parameters.Token = token;
				parameters.ReturnResults = returnResults;

				return spCustomerUpsertCall (parameters, connectionString);
			}
			public static List<CustomerUpsertResult> spCustomerUpsertCall (CustomerUpsertParameters parameters, string connectionString)
			{
				List<CustomerUpsertResult> ret = new List<CustomerUpsertResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spCustomerUpsert @GUID = @GUID, @IsDeleted = @IsDeleted, @ActiveDateTime = @ActiveDateTime, @TerminationDateTime = @TerminationDateTime, @Firstname = @Firstname, @Surname = @Surname, @EmailAddress = @EmailAddress, @IDNumber = @IDNumber, @BirthDate = @BirthDate, @CellphoneNumber = @CellphoneNumber, @AccountGUID = @AccountGUID, @Token = @Token, @ReturnResults = @ReturnResults";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUID", parameters.GUID == null ? (object)DBNull.Value :  parameters.GUID));
						cmd.Parameters.Add(new SqlParameter("@IsDeleted", parameters.IsDeleted == null ? (object)DBNull.Value :  parameters.IsDeleted));
						cmd.Parameters.Add(new SqlParameter("@ActiveDateTime", parameters.ActiveDateTime == null ? (object)DBNull.Value :  parameters.ActiveDateTime));
						cmd.Parameters.Add(new SqlParameter("@TerminationDateTime", parameters.TerminationDateTime == null ? (object)DBNull.Value :  parameters.TerminationDateTime));
						cmd.Parameters.Add(new SqlParameter("@Firstname", parameters.Firstname == null ? (object)DBNull.Value :  parameters.Firstname));
						cmd.Parameters.Add(new SqlParameter("@Surname", parameters.Surname == null ? (object)DBNull.Value :  parameters.Surname));
						cmd.Parameters.Add(new SqlParameter("@EmailAddress", parameters.EmailAddress == null ? (object)DBNull.Value :  parameters.EmailAddress));
						cmd.Parameters.Add(new SqlParameter("@IDNumber", parameters.IDNumber == null ? (object)DBNull.Value :  parameters.IDNumber));
						cmd.Parameters.Add(new SqlParameter("@BirthDate", parameters.BirthDate == null ? (object)DBNull.Value :  parameters.BirthDate));
						cmd.Parameters.Add(new SqlParameter("@CellphoneNumber", parameters.CellphoneNumber == null ? (object)DBNull.Value :  parameters.CellphoneNumber));
						cmd.Parameters.Add(new SqlParameter("@AccountGUID", parameters.AccountGUID == null ? (object)DBNull.Value :  parameters.AccountGUID));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
						cmd.Parameters.Add(new SqlParameter("@ReturnResults", parameters.ReturnResults == null ? (object)DBNull.Value :  parameters.ReturnResults));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            CustomerUpsertResult res = new CustomerUpsertResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								if (!String.IsNullOrWhiteSpace(reader["ActiveDateTime"].ToString()))
								{
								    res.ActiveDateTime = DateTime.Parse(reader["ActiveDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["TerminationDateTime"].ToString()))
								{
								    res.TerminationDateTime = DateTime.Parse(reader["TerminationDateTime"].ToString());
								}
								res.IsActiveForNow = (bool)reader["IsActiveForNow"];
								res.Firstname = reader["Firstname"].ToString();
								res.Surname = reader["Surname"].ToString();
								res.EmailAddress = reader["EmailAddress"].ToString();
								res.IDNumber = reader["IDNumber"].ToString();
								if (!String.IsNullOrWhiteSpace(reader["BirthDate"].ToString()))
								{
								    res.BirthDate = DateTime.Parse(reader["BirthDate"].ToString());
								}
								res.CellphoneNumber = reader["CellphoneNumber"].ToString();
								res.AccountGUID = new Guid(reader["AccountGUID"].ToString());
								res.SystemUserGUID = new Guid(reader["SystemUserGUID"].ToString());
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<CustomerGetResult> spCustomerGetCall(Guid? customerGUID, Byte[] token, string connectionString)
			{
				CustomerGetParameters parameters = new CustomerGetParameters();
				parameters.CustomerGUID = customerGUID;
				parameters.Token = token;

				return spCustomerGetCall (parameters, connectionString);
			}
			public static List<CustomerGetResult> spCustomerGetCall (CustomerGetParameters parameters, string connectionString)
			{
				List<CustomerGetResult> ret = new List<CustomerGetResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spCustomerGet @CustomerGUID = @CustomerGUID, @Token = @Token";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@CustomerGUID", parameters.CustomerGUID == null ? (object)DBNull.Value :  parameters.CustomerGUID));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            CustomerGetResult res = new CustomerGetResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								if (!String.IsNullOrWhiteSpace(reader["ActiveDateTime"].ToString()))
								{
								    res.ActiveDateTime = DateTime.Parse(reader["ActiveDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["TerminationDateTime"].ToString()))
								{
								    res.TerminationDateTime = DateTime.Parse(reader["TerminationDateTime"].ToString());
								}
								res.IsActiveForNow = (bool)reader["IsActiveForNow"];
								res.Firstname = reader["Firstname"].ToString();
								res.Surname = reader["Surname"].ToString();
								res.AccountGUID = reader["AccountGUID"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<CustomerToXMLResult> spCustomerToXMLCall(string gUIDS, Byte[] token, string connectionString)
			{
				CustomerToXMLParameters parameters = new CustomerToXMLParameters();
				parameters.GUIDS = gUIDS;
				parameters.Token = token;

				return spCustomerToXMLCall (parameters, connectionString);
			}
			public static List<CustomerToXMLResult> spCustomerToXMLCall (CustomerToXMLParameters parameters, string connectionString)
			{
				List<CustomerToXMLResult> ret = new List<CustomerToXMLResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spCustomerToXML @GUIDS = @GUIDS, @Token = @Token";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUIDS", parameters.GUIDS == null ? (object)DBNull.Value :  parameters.GUIDS));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            CustomerToXMLResult res = new CustomerToXMLResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<CustomerToXMLByDateTimeResult> spCustomerToXMLByDateTimeCall(DateTime? fromDateTime, DateTime? toDateTime, Byte[] token, string connectionString)
			{
				CustomerToXMLByDateTimeParameters parameters = new CustomerToXMLByDateTimeParameters();
				parameters.FromDateTime = fromDateTime;
				parameters.ToDateTime = toDateTime;
				parameters.Token = token;

				return spCustomerToXMLByDateTimeCall (parameters, connectionString);
			}
			public static List<CustomerToXMLByDateTimeResult> spCustomerToXMLByDateTimeCall (CustomerToXMLByDateTimeParameters parameters, string connectionString)
			{
				List<CustomerToXMLByDateTimeResult> ret = new List<CustomerToXMLByDateTimeResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spCustomerToXMLByDateTime @FromDateTime = @FromDateTime, @ToDateTime = @ToDateTime, @Token = @Token";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@FromDateTime", parameters.FromDateTime == null ? (object)DBNull.Value :  parameters.FromDateTime));
						cmd.Parameters.Add(new SqlParameter("@ToDateTime", parameters.ToDateTime == null ? (object)DBNull.Value :  parameters.ToDateTime));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            CustomerToXMLByDateTimeResult res = new CustomerToXMLByDateTimeResult();
								res.XML = reader["XML"].ToString();
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<CustomerAddressUpsertResult> spCustomerAddressUpsertCall(Guid? gUID, bool? isDeleted, DateTime? activeDateTime, DateTime? terminationDateTime, string address1, string address2, string address3, string code, string province, Guid? customerGUID, Guid? addressTypeGUID, Byte[] token, bool? returnResults, string connectionString)
			{
				CustomerAddressUpsertParameters parameters = new CustomerAddressUpsertParameters();
				parameters.GUID = gUID;
				parameters.IsDeleted = isDeleted;
				parameters.ActiveDateTime = activeDateTime;
				parameters.TerminationDateTime = terminationDateTime;
				parameters.Address1 = address1;
				parameters.Address2 = address2;
				parameters.Address3 = address3;
				parameters.Code = code;
				parameters.Province = province;
				parameters.CustomerGUID = customerGUID;
				parameters.AddressTypeGUID = addressTypeGUID;
				parameters.Token = token;
				parameters.ReturnResults = returnResults;

				return spCustomerAddressUpsertCall (parameters, connectionString);
			}
			public static List<CustomerAddressUpsertResult> spCustomerAddressUpsertCall (CustomerAddressUpsertParameters parameters, string connectionString)
			{
				List<CustomerAddressUpsertResult> ret = new List<CustomerAddressUpsertResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spCustomerAddressUpsert @GUID = @GUID, @IsDeleted = @IsDeleted, @ActiveDateTime = @ActiveDateTime, @TerminationDateTime = @TerminationDateTime, @Address1 = @Address1, @Address2 = @Address2, @Address3 = @Address3, @Code = @Code, @Province = @Province, @CustomerGUID = @CustomerGUID, @AddressTypeGUID = @AddressTypeGUID, @Token = @Token, @ReturnResults = @ReturnResults";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@GUID", parameters.GUID == null ? (object)DBNull.Value :  parameters.GUID));
						cmd.Parameters.Add(new SqlParameter("@IsDeleted", parameters.IsDeleted == null ? (object)DBNull.Value :  parameters.IsDeleted));
						cmd.Parameters.Add(new SqlParameter("@ActiveDateTime", parameters.ActiveDateTime == null ? (object)DBNull.Value :  parameters.ActiveDateTime));
						cmd.Parameters.Add(new SqlParameter("@TerminationDateTime", parameters.TerminationDateTime == null ? (object)DBNull.Value :  parameters.TerminationDateTime));
						cmd.Parameters.Add(new SqlParameter("@Address1", parameters.Address1 == null ? (object)DBNull.Value :  parameters.Address1));
						cmd.Parameters.Add(new SqlParameter("@Address2", parameters.Address2 == null ? (object)DBNull.Value :  parameters.Address2));
						cmd.Parameters.Add(new SqlParameter("@Address3", parameters.Address3 == null ? (object)DBNull.Value :  parameters.Address3));
						cmd.Parameters.Add(new SqlParameter("@Code", parameters.Code == null ? (object)DBNull.Value :  parameters.Code));
						cmd.Parameters.Add(new SqlParameter("@Province", parameters.Province == null ? (object)DBNull.Value :  parameters.Province));
						cmd.Parameters.Add(new SqlParameter("@CustomerGUID", parameters.CustomerGUID == null ? (object)DBNull.Value :  parameters.CustomerGUID));
						cmd.Parameters.Add(new SqlParameter("@AddressTypeGUID", parameters.AddressTypeGUID == null ? (object)DBNull.Value :  parameters.AddressTypeGUID));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
						cmd.Parameters.Add(new SqlParameter("@ReturnResults", parameters.ReturnResults == null ? (object)DBNull.Value :  parameters.ReturnResults));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            CustomerAddressUpsertResult res = new CustomerAddressUpsertResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								if (!String.IsNullOrWhiteSpace(reader["ActiveDateTime"].ToString()))
								{
								    res.ActiveDateTime = DateTime.Parse(reader["ActiveDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["TerminationDateTime"].ToString()))
								{
								    res.TerminationDateTime = DateTime.Parse(reader["TerminationDateTime"].ToString());
								}
								res.IsActiveForNow = (bool)reader["IsActiveForNow"];
								res.Address1 = reader["Address1"].ToString();
								res.Address2 = reader["Address2"].ToString();
								res.Address3 = reader["Address3"].ToString();
								res.Code = reader["Code"].ToString();
								res.Province = reader["Province"].ToString();
								res.CustomerGUID = new Guid(reader["CustomerGUID"].ToString());
								res.AddressTypeGUID = new Guid(reader["AddressTypeGUID"].ToString());
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
			public static List<CustomerAddressGetResult> spCustomerAddressGetCall(Guid? customerAddressGUID, Byte[] token, string connectionString)
			{
				CustomerAddressGetParameters parameters = new CustomerAddressGetParameters();
				parameters.CustomerAddressGUID = customerAddressGUID;
				parameters.Token = token;

				return spCustomerAddressGetCall (parameters, connectionString);
			}
			public static List<CustomerAddressGetResult> spCustomerAddressGetCall (CustomerAddressGetParameters parameters, string connectionString)
			{
				List<CustomerAddressGetResult> ret = new List<CustomerAddressGetResult>();
				using (SqlConnection conn = new SqlConnection(connectionString))
				{
					conn.Open();
					string qry = "EXEC spCustomerAddressGet @CustomerAddressGUID = @CustomerAddressGUID, @Token = @Token";

					using (SqlCommand cmd = new SqlCommand(qry, conn))
					{
						cmd.Parameters.Add(new SqlParameter("@CustomerAddressGUID", parameters.CustomerAddressGUID == null ? (object)DBNull.Value :  parameters.CustomerAddressGUID));
						cmd.Parameters.Add(new SqlParameter("@Token", parameters.Token == null ? (object)DBNull.Value :  parameters.Token));
				        using (SqlDataReader reader = cmd.ExecuteReader())
				        {
				            while (reader.Read())
				            { 
					            CustomerAddressGetResult res = new CustomerAddressGetResult();
								res.GUID = new Guid(reader["GUID"].ToString());
								if (!String.IsNullOrWhiteSpace(reader["ID"].ToString()))
								{
								    res.ID = int.Parse(reader["ID"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["DateTimeCreated"].ToString()))
								{
								    res.DateTimeCreated = DateTime.Parse(reader["DateTimeCreated"].ToString());
								}
								res.IsDeleted = (bool)reader["IsDeleted"];
								if (!String.IsNullOrWhiteSpace(reader["ActiveDateTime"].ToString()))
								{
								    res.ActiveDateTime = DateTime.Parse(reader["ActiveDateTime"].ToString());
								}
								if (!String.IsNullOrWhiteSpace(reader["TerminationDateTime"].ToString()))
								{
								    res.TerminationDateTime = DateTime.Parse(reader["TerminationDateTime"].ToString());
								}
								res.IsActiveForNow = (bool)reader["IsActiveForNow"];
								res.Address1 = reader["Address1"].ToString();
								res.Address2 = reader["Address2"].ToString();
								res.Address3 = reader["Address3"].ToString();
								res.Code = reader["Code"].ToString();
								res.Province = reader["Province"].ToString();
								res.CustomerGUID = new Guid(reader["CustomerGUID"].ToString());
								res.AddressTypeGUID = new Guid(reader["AddressTypeGUID"].ToString());
								ret.Add(res);
				            }
				        }
				    }
				}
				return ret;
			}
	}
}
