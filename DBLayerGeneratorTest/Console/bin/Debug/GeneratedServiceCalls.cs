//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using AppointmentLibrary.Parameters;
using AppointmentLibrary.ProcResults;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ApplicationClient
{
    public partial class AppointmentServiceClient
    {
        public AppointmentServiceClient(string username, string password)
        {
            service = new AppointmentService.AppointmentServiceClient();
            service.ClientCredentials.UserName.UserName = username;
            service.ClientCredentials.UserName.Password = password;
        }
        private static AppointmentService.AppointmentServiceClient service;

        public static AppointmentService.AppointmentServiceClient Service
        {
            get
            {
                return service;
            }
        }
		public static List<spCreateUpsertResult> CreateUpsert (string tableName)
		{
			spCreateUpsertParameters p = new spCreateUpsertParameters()
			{
				TableName = tableName

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.CreateUpsert(parameters);
			List<CreateUpsertResult> result = JsonConvert.DeserializeObject<List<CreateUpsertResult>>(resultStr);
			return result;
		}
		public static List<spSystemUserUpsertResult> SystemUserUpsert (Guid? gUID, bool? isDeleted, DateTime? activeDateTime, DateTime? terminationDateTime, string username, string password, Guid? systemUserGUID, bool? returnResults)
		{
			spSystemUserUpsertParameters p = new spSystemUserUpsertParameters()
			{
				GUID = gUID
				, IsDeleted = isDeleted
				, ActiveDateTime = activeDateTime
				, TerminationDateTime = terminationDateTime
				, Username = username
				, Password = password
				, SystemUserGUID = systemUserGUID
				, ReturnResults = returnResults

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.SystemUserUpsert(parameters);
			List<SystemUserUpsertResult> result = JsonConvert.DeserializeObject<List<SystemUserUpsertResult>>(resultStr);
			return result;
		}
		public static List<spSystemUserGetResult> SystemUserGet (Guid? systemUserGUID)
		{
			spSystemUserGetParameters p = new spSystemUserGetParameters()
			{
				SystemUserGUID = systemUserGUID

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.SystemUserGet(parameters);
			List<SystemUserGetResult> result = JsonConvert.DeserializeObject<List<SystemUserGetResult>>(resultStr);
			return result;
		}
		public static List<spGetChildrenResult> GetChildren (string tableName)
		{
			spGetChildrenParameters p = new spGetChildrenParameters()
			{
				TableName = tableName

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.GetChildren(parameters);
			List<GetChildrenResult> result = JsonConvert.DeserializeObject<List<GetChildrenResult>>(resultStr);
			return result;
		}
		public static List<spCreateToXmlResult> CreateToXml (string tableName)
		{
			spCreateToXmlParameters p = new spCreateToXmlParameters()
			{
				TableName = tableName

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.CreateToXml(parameters);
			List<CreateToXmlResult> result = JsonConvert.DeserializeObject<List<CreateToXmlResult>>(resultStr);
			return result;
		}
		public static List<spAccountUpsertResult> AccountUpsert (Guid? gUID, bool? isDeleted, DateTime? activeDateTime, DateTime? terminationDateTime, string accountName, Guid? systemUserGUID, bool? returnResults)
		{
			spAccountUpsertParameters p = new spAccountUpsertParameters()
			{
				GUID = gUID
				, IsDeleted = isDeleted
				, ActiveDateTime = activeDateTime
				, TerminationDateTime = terminationDateTime
				, AccountName = accountName
				, SystemUserGUID = systemUserGUID
				, ReturnResults = returnResults

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.AccountUpsert(parameters);
			List<AccountUpsertResult> result = JsonConvert.DeserializeObject<List<AccountUpsertResult>>(resultStr);
			return result;
		}
		public static List<spAccountGetResult> AccountGet (Guid? accountGUID)
		{
			spAccountGetParameters p = new spAccountGetParameters()
			{
				AccountGUID = accountGUID

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.AccountGet(parameters);
			List<AccountGetResult> result = JsonConvert.DeserializeObject<List<AccountGetResult>>(resultStr);
			return result;
		}
		public static List<spActivityTypeUpsertResult> ActivityTypeUpsert (Guid? gUID, bool? isDeleted, string activityType, Guid? accountGUID, Guid? systemUserGUID, bool? returnResults)
		{
			spActivityTypeUpsertParameters p = new spActivityTypeUpsertParameters()
			{
				GUID = gUID
				, IsDeleted = isDeleted
				, ActivityType = activityType
				, AccountGUID = accountGUID
				, SystemUserGUID = systemUserGUID
				, ReturnResults = returnResults

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.ActivityTypeUpsert(parameters);
			List<ActivityTypeUpsertResult> result = JsonConvert.DeserializeObject<List<ActivityTypeUpsertResult>>(resultStr);
			return result;
		}
		public static List<spActivityTypeGetResult> ActivityTypeGet (Guid? activityTypeGUID)
		{
			spActivityTypeGetParameters p = new spActivityTypeGetParameters()
			{
				ActivityTypeGUID = activityTypeGUID

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.ActivityTypeGet(parameters);
			List<ActivityTypeGetResult> result = JsonConvert.DeserializeObject<List<ActivityTypeGetResult>>(resultStr);
			return result;
		}
		public static List<spAppointmentUpsertResult> AppointmentUpsert (Guid? gUID, bool? isDeleted, DateTime? startDateTime, TimeSpan? duration, DateTime? actualStartDateTime, DateTime? actualEndDateTime, Guid? customerGUID, Guid? storeGUID, Guid? serviceProviderGUID, Guid? systemUserGUID, bool? returnResults)
		{
			spAppointmentUpsertParameters p = new spAppointmentUpsertParameters()
			{
				GUID = gUID
				, IsDeleted = isDeleted
				, StartDateTime = startDateTime
				, Duration = duration
				, ActualStartDateTime = actualStartDateTime
				, ActualEndDateTime = actualEndDateTime
				, CustomerGUID = customerGUID
				, StoreGUID = storeGUID
				, ServiceProviderGUID = serviceProviderGUID
				, SystemUserGUID = systemUserGUID
				, ReturnResults = returnResults

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.AppointmentUpsert(parameters);
			List<AppointmentUpsertResult> result = JsonConvert.DeserializeObject<List<AppointmentUpsertResult>>(resultStr);
			return result;
		}
		public static List<spAppointmentGetResult> AppointmentGet (Guid? appointmentGUID)
		{
			spAppointmentGetParameters p = new spAppointmentGetParameters()
			{
				AppointmentGUID = appointmentGUID

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.AppointmentGet(parameters);
			List<AppointmentGetResult> result = JsonConvert.DeserializeObject<List<AppointmentGetResult>>(resultStr);
			return result;
		}
		public static List<spLoginResult> Login (string userName, string password)
		{
			spLoginParameters p = new spLoginParameters()
			{
				UserName = userName
				, Password = password

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.Login(parameters);
			List<LoginResult> result = JsonConvert.DeserializeObject<List<LoginResult>>(resultStr);
			return result;
		}
		public static List<spServiceProviderUpsertResult> ServiceProviderUpsert (Guid? gUID, bool? isDeleted, DateTime? activeDateTime, DateTime? terminationDateTime, string firstname, string surname, Guid? accountGUID, Guid? systemUserGUID, bool? returnResults)
		{
			spServiceProviderUpsertParameters p = new spServiceProviderUpsertParameters()
			{
				GUID = gUID
				, IsDeleted = isDeleted
				, ActiveDateTime = activeDateTime
				, TerminationDateTime = terminationDateTime
				, Firstname = firstname
				, Surname = surname
				, AccountGUID = accountGUID
				, SystemUserGUID = systemUserGUID
				, ReturnResults = returnResults

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.ServiceProviderUpsert(parameters);
			List<ServiceProviderUpsertResult> result = JsonConvert.DeserializeObject<List<ServiceProviderUpsertResult>>(resultStr);
			return result;
		}
		public static List<spServiceProviderGetResult> ServiceProviderGet (Guid? serviceProviderGUID)
		{
			spServiceProviderGetParameters p = new spServiceProviderGetParameters()
			{
				ServiceProviderGUID = serviceProviderGUID

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.ServiceProviderGet(parameters);
			List<ServiceProviderGetResult> result = JsonConvert.DeserializeObject<List<ServiceProviderGetResult>>(resultStr);
			return result;
		}
		public static List<spCustomerUpsertResult> CustomerUpsert (Guid? gUID, bool? isDeleted, DateTime? activeDateTime, DateTime? terminationDateTime, string firstname, string surname, Guid? accountGUID, Guid? systemUserGUID, bool? returnResults)
		{
			spCustomerUpsertParameters p = new spCustomerUpsertParameters()
			{
				GUID = gUID
				, IsDeleted = isDeleted
				, ActiveDateTime = activeDateTime
				, TerminationDateTime = terminationDateTime
				, Firstname = firstname
				, Surname = surname
				, AccountGUID = accountGUID
				, SystemUserGUID = systemUserGUID
				, ReturnResults = returnResults

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.CustomerUpsert(parameters);
			List<CustomerUpsertResult> result = JsonConvert.DeserializeObject<List<CustomerUpsertResult>>(resultStr);
			return result;
		}
		public static List<spCustomerGetResult> CustomerGet (Guid? customerGUID)
		{
			spCustomerGetParameters p = new spCustomerGetParameters()
			{
				CustomerGUID = customerGUID

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.CustomerGet(parameters);
			List<CustomerGetResult> result = JsonConvert.DeserializeObject<List<CustomerGetResult>>(resultStr);
			return result;
		}
		public static List<spActivityScheduleUpsertResult> ActivityScheduleUpsert (Guid? gUID, bool? isDeleted, int? doW, TimeSpan? startTime, TimeSpan? endTime, Guid? activityTypeGUID, Guid? serviceProviderGUID, Guid? systemUserGUID, bool? returnResults)
		{
			spActivityScheduleUpsertParameters p = new spActivityScheduleUpsertParameters()
			{
				GUID = gUID
				, IsDeleted = isDeleted
				, DoW = doW
				, StartTime = startTime
				, EndTime = endTime
				, ActivityTypeGUID = activityTypeGUID
				, ServiceProviderGUID = serviceProviderGUID
				, SystemUserGUID = systemUserGUID
				, ReturnResults = returnResults

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.ActivityScheduleUpsert(parameters);
			List<ActivityScheduleUpsertResult> result = JsonConvert.DeserializeObject<List<ActivityScheduleUpsertResult>>(resultStr);
			return result;
		}
		public static List<spActivityScheduleGetResult> ActivityScheduleGet (Guid? activityScheduleGUID)
		{
			spActivityScheduleGetParameters p = new spActivityScheduleGetParameters()
			{
				ActivityScheduleGUID = activityScheduleGUID

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.ActivityScheduleGet(parameters);
			List<ActivityScheduleGetResult> result = JsonConvert.DeserializeObject<List<ActivityScheduleGetResult>>(resultStr);
			return result;
		}
		public static List<spStoreUpsertResult> StoreUpsert (Guid? gUID, bool? isDeleted, DateTime? activeDateTime, DateTime? terminationDateTime, string storeName, Guid? accountGUID, Guid? systemUserGUID, bool? returnResults)
		{
			spStoreUpsertParameters p = new spStoreUpsertParameters()
			{
				GUID = gUID
				, IsDeleted = isDeleted
				, ActiveDateTime = activeDateTime
				, TerminationDateTime = terminationDateTime
				, StoreName = storeName
				, AccountGUID = accountGUID
				, SystemUserGUID = systemUserGUID
				, ReturnResults = returnResults

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.StoreUpsert(parameters);
			List<StoreUpsertResult> result = JsonConvert.DeserializeObject<List<StoreUpsertResult>>(resultStr);
			return result;
		}
		public static List<spStoreGetResult> StoreGet (Guid? storeGUID)
		{
			spStoreGetParameters p = new spStoreGetParameters()
			{
				StoreGUID = storeGUID

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.StoreGet(parameters);
			List<StoreGetResult> result = JsonConvert.DeserializeObject<List<StoreGetResult>>(resultStr);
			return result;
		}
		public static List<spAccountToXMLResult> AccountToXML (string gUIDS)
		{
			spAccountToXMLParameters p = new spAccountToXMLParameters()
			{
				GUIDS = gUIDS

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.AccountToXML(parameters);
			List<AccountToXMLResult> result = JsonConvert.DeserializeObject<List<AccountToXMLResult>>(resultStr);
			return result;
		}
		public static List<spAccountToXMLByDateTimeResult> AccountToXMLByDateTime (DateTime? fromDateTime, DateTime? toDateTime)
		{
			spAccountToXMLByDateTimeParameters p = new spAccountToXMLByDateTimeParameters()
			{
				FromDateTime = fromDateTime
				, ToDateTime = toDateTime

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.AccountToXMLByDateTime(parameters);
			List<AccountToXMLByDateTimeResult> result = JsonConvert.DeserializeObject<List<AccountToXMLByDateTimeResult>>(resultStr);
			return result;
		}
		public static List<spActivityTypeToXMLResult> ActivityTypeToXML (string gUIDS)
		{
			spActivityTypeToXMLParameters p = new spActivityTypeToXMLParameters()
			{
				GUIDS = gUIDS

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.ActivityTypeToXML(parameters);
			List<ActivityTypeToXMLResult> result = JsonConvert.DeserializeObject<List<ActivityTypeToXMLResult>>(resultStr);
			return result;
		}
		public static List<spActivityTypeToXMLByDateTimeResult> ActivityTypeToXMLByDateTime (DateTime? fromDateTime, DateTime? toDateTime)
		{
			spActivityTypeToXMLByDateTimeParameters p = new spActivityTypeToXMLByDateTimeParameters()
			{
				FromDateTime = fromDateTime
				, ToDateTime = toDateTime

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.ActivityTypeToXMLByDateTime(parameters);
			List<ActivityTypeToXMLByDateTimeResult> result = JsonConvert.DeserializeObject<List<ActivityTypeToXMLByDateTimeResult>>(resultStr);
			return result;
		}
		public static List<spAppointmentToXMLResult> AppointmentToXML (string gUIDS)
		{
			spAppointmentToXMLParameters p = new spAppointmentToXMLParameters()
			{
				GUIDS = gUIDS

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.AppointmentToXML(parameters);
			List<AppointmentToXMLResult> result = JsonConvert.DeserializeObject<List<AppointmentToXMLResult>>(resultStr);
			return result;
		}
		public static List<spAppointmentToXMLByDateTimeResult> AppointmentToXMLByDateTime (DateTime? fromDateTime, DateTime? toDateTime)
		{
			spAppointmentToXMLByDateTimeParameters p = new spAppointmentToXMLByDateTimeParameters()
			{
				FromDateTime = fromDateTime
				, ToDateTime = toDateTime

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.AppointmentToXMLByDateTime(parameters);
			List<AppointmentToXMLByDateTimeResult> result = JsonConvert.DeserializeObject<List<AppointmentToXMLByDateTimeResult>>(resultStr);
			return result;
		}
		public static List<spServiceProviderToXMLResult> ServiceProviderToXML (string gUIDS)
		{
			spServiceProviderToXMLParameters p = new spServiceProviderToXMLParameters()
			{
				GUIDS = gUIDS

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.ServiceProviderToXML(parameters);
			List<ServiceProviderToXMLResult> result = JsonConvert.DeserializeObject<List<ServiceProviderToXMLResult>>(resultStr);
			return result;
		}
		public static List<spServiceProviderToXMLByDateTimeResult> ServiceProviderToXMLByDateTime (DateTime? fromDateTime, DateTime? toDateTime)
		{
			spServiceProviderToXMLByDateTimeParameters p = new spServiceProviderToXMLByDateTimeParameters()
			{
				FromDateTime = fromDateTime
				, ToDateTime = toDateTime

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.ServiceProviderToXMLByDateTime(parameters);
			List<ServiceProviderToXMLByDateTimeResult> result = JsonConvert.DeserializeObject<List<ServiceProviderToXMLByDateTimeResult>>(resultStr);
			return result;
		}
		public static List<spCustomerToXMLResult> CustomerToXML (string gUIDS)
		{
			spCustomerToXMLParameters p = new spCustomerToXMLParameters()
			{
				GUIDS = gUIDS

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.CustomerToXML(parameters);
			List<CustomerToXMLResult> result = JsonConvert.DeserializeObject<List<CustomerToXMLResult>>(resultStr);
			return result;
		}
		public static List<spCustomerToXMLByDateTimeResult> CustomerToXMLByDateTime (DateTime? fromDateTime, DateTime? toDateTime)
		{
			spCustomerToXMLByDateTimeParameters p = new spCustomerToXMLByDateTimeParameters()
			{
				FromDateTime = fromDateTime
				, ToDateTime = toDateTime

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.CustomerToXMLByDateTime(parameters);
			List<CustomerToXMLByDateTimeResult> result = JsonConvert.DeserializeObject<List<CustomerToXMLByDateTimeResult>>(resultStr);
			return result;
		}
		public static List<spActivityScheduleToXMLResult> ActivityScheduleToXML (string gUIDS)
		{
			spActivityScheduleToXMLParameters p = new spActivityScheduleToXMLParameters()
			{
				GUIDS = gUIDS

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.ActivityScheduleToXML(parameters);
			List<ActivityScheduleToXMLResult> result = JsonConvert.DeserializeObject<List<ActivityScheduleToXMLResult>>(resultStr);
			return result;
		}
		public static List<spActivityScheduleToXMLByDateTimeResult> ActivityScheduleToXMLByDateTime (DateTime? fromDateTime, DateTime? toDateTime)
		{
			spActivityScheduleToXMLByDateTimeParameters p = new spActivityScheduleToXMLByDateTimeParameters()
			{
				FromDateTime = fromDateTime
				, ToDateTime = toDateTime

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.ActivityScheduleToXMLByDateTime(parameters);
			List<ActivityScheduleToXMLByDateTimeResult> result = JsonConvert.DeserializeObject<List<ActivityScheduleToXMLByDateTimeResult>>(resultStr);
			return result;
		}
		public static List<spStoreToXMLResult> StoreToXML (string gUIDS)
		{
			spStoreToXMLParameters p = new spStoreToXMLParameters()
			{
				GUIDS = gUIDS

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.StoreToXML(parameters);
			List<StoreToXMLResult> result = JsonConvert.DeserializeObject<List<StoreToXMLResult>>(resultStr);
			return result;
		}
		public static List<spStoreToXMLByDateTimeResult> StoreToXMLByDateTime (DateTime? fromDateTime, DateTime? toDateTime)
		{
			spStoreToXMLByDateTimeParameters p = new spStoreToXMLByDateTimeParameters()
			{
				FromDateTime = fromDateTime
				, ToDateTime = toDateTime

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.StoreToXMLByDateTime(parameters);
			List<StoreToXMLByDateTimeResult> result = JsonConvert.DeserializeObject<List<StoreToXMLByDateTimeResult>>(resultStr);
			return result;
		}
		public static List<spAuditLogUpsertResult> AuditLogUpsert (Guid? gUID, string source, string tableName, string beforeSnapshot, string afterSnapshot, Guid? tableGUID, Guid? systemUserGUID, bool? returnResults)
		{
			spAuditLogUpsertParameters p = new spAuditLogUpsertParameters()
			{
				GUID = gUID
				, Source = source
				, TableName = tableName
				, BeforeSnapshot = beforeSnapshot
				, AfterSnapshot = afterSnapshot
				, TableGUID = tableGUID
				, SystemUserGUID = systemUserGUID
				, ReturnResults = returnResults

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.AuditLogUpsert(parameters);
			List<AuditLogUpsertResult> result = JsonConvert.DeserializeObject<List<AuditLogUpsertResult>>(resultStr);
			return result;
		}
     }
}
