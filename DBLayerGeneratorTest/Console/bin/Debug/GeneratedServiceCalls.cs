//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using AppointmentLibrary.Parameters;
using AppointmentLibrary.ProcResults;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ApplicationClient
{
    public partial class AppointmentServiceClient
    {
        public AppointmentServiceClient(string username, string password)
        {
            service = new AppointmentService.AppointmentServiceClient();
            service.ClientCredentials.UserName.UserName = username;
            service.ClientCredentials.UserName.Password = password;
            List<LoginResult> loginResults = Login(username, password);
            LoginResult login = loginResults.FirstOrDefault();
            byte[] token = login.Token;
            Token = token;
        }
        private static AppointmentService.AppointmentServiceClient service;

        public byte[] Token;
        public static AppointmentService.AppointmentServiceClient Service
        {
            get
            {
                return service;
            }
        }
		public List<CustomerAddressToXMLResult> CustomerAddressToXML (string gUIDS)
		{
			CustomerAddressToXMLParameters p = new CustomerAddressToXMLParameters()
			{
				Token = Token,
				GUIDS = gUIDS

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.CustomerAddressToXML(parameters);
			List<CustomerAddressToXMLResult> result = JsonConvert.DeserializeObject<List<CustomerAddressToXMLResult>>(resultStr);
			return result;
		}
		public List<CustomerAddressToXMLByDateTimeResult> CustomerAddressToXMLByDateTime (DateTime? fromDateTime, DateTime? toDateTime)
		{
			CustomerAddressToXMLByDateTimeParameters p = new CustomerAddressToXMLByDateTimeParameters()
			{
				Token = Token,
				FromDateTime = fromDateTime
				, ToDateTime = toDateTime

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.CustomerAddressToXMLByDateTime(parameters);
			List<CustomerAddressToXMLByDateTimeResult> result = JsonConvert.DeserializeObject<List<CustomerAddressToXMLByDateTimeResult>>(resultStr);
			return result;
		}
		public List<StoreUpsertResult> StoreUpsert (Guid? gUID, bool? isDeleted, DateTime? activeDateTime, DateTime? terminationDateTime, string storeName, Guid? accountGUID, bool? returnResults)
		{
			StoreUpsertParameters p = new StoreUpsertParameters()
			{
				Token = Token,
				GUID = gUID
				, IsDeleted = isDeleted
				, ActiveDateTime = activeDateTime
				, TerminationDateTime = terminationDateTime
				, StoreName = storeName
				, AccountGUID = accountGUID
				, ReturnResults = returnResults

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.StoreUpsert(parameters);
			List<StoreUpsertResult> result = JsonConvert.DeserializeObject<List<StoreUpsertResult>>(resultStr);
			return result;
		}
		public List<StoreGetResult> StoreGet (Guid? storeGUID)
		{
			StoreGetParameters p = new StoreGetParameters()
			{
				Token = Token,
				StoreGUID = storeGUID

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.StoreGet(parameters);
			List<StoreGetResult> result = JsonConvert.DeserializeObject<List<StoreGetResult>>(resultStr);
			return result;
		}
		public List<StoreToXMLResult> StoreToXML (string gUIDS)
		{
			StoreToXMLParameters p = new StoreToXMLParameters()
			{
				Token = Token,
				GUIDS = gUIDS

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.StoreToXML(parameters);
			List<StoreToXMLResult> result = JsonConvert.DeserializeObject<List<StoreToXMLResult>>(resultStr);
			return result;
		}
		public List<StoreToXMLByDateTimeResult> StoreToXMLByDateTime (DateTime? fromDateTime, DateTime? toDateTime)
		{
			StoreToXMLByDateTimeParameters p = new StoreToXMLByDateTimeParameters()
			{
				Token = Token,
				FromDateTime = fromDateTime
				, ToDateTime = toDateTime

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.StoreToXMLByDateTime(parameters);
			List<StoreToXMLByDateTimeResult> result = JsonConvert.DeserializeObject<List<StoreToXMLByDateTimeResult>>(resultStr);
			return result;
		}
		public List<RefreshTokenNoReturnResult> RefreshTokenNoReturn (Guid? systemUserGUID)
		{
			RefreshTokenNoReturnParameters p = new RefreshTokenNoReturnParameters()
			{
				SystemUserGUID = systemUserGUID

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.RefreshTokenNoReturn(parameters);
			List<RefreshTokenNoReturnResult> result = JsonConvert.DeserializeObject<List<RefreshTokenNoReturnResult>>(resultStr);
			return result;
		}
		public List<LUPermissionUpsertResult> LUPermissionUpsert (Guid? gUID, bool? isDeleted, string permission, bool? returnResults)
		{
			LUPermissionUpsertParameters p = new LUPermissionUpsertParameters()
			{
				Token = Token,
				GUID = gUID
				, IsDeleted = isDeleted
				, Permission = permission
				, ReturnResults = returnResults

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.LUPermissionUpsert(parameters);
			List<LUPermissionUpsertResult> result = JsonConvert.DeserializeObject<List<LUPermissionUpsertResult>>(resultStr);
			return result;
		}
		public List<LUPermissionGetResult> LUPermissionGet (Guid? lUPermissionGUID)
		{
			LUPermissionGetParameters p = new LUPermissionGetParameters()
			{
				Token = Token,
				LUPermissionGUID = lUPermissionGUID

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.LUPermissionGet(parameters);
			List<LUPermissionGetResult> result = JsonConvert.DeserializeObject<List<LUPermissionGetResult>>(resultStr);
			return result;
		}
		public List<LUPermissionToXMLResult> LUPermissionToXML (string gUIDS)
		{
			LUPermissionToXMLParameters p = new LUPermissionToXMLParameters()
			{
				Token = Token,
				GUIDS = gUIDS

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.LUPermissionToXML(parameters);
			List<LUPermissionToXMLResult> result = JsonConvert.DeserializeObject<List<LUPermissionToXMLResult>>(resultStr);
			return result;
		}
		public List<LUPermissionToXMLByDateTimeResult> LUPermissionToXMLByDateTime (DateTime? fromDateTime, DateTime? toDateTime)
		{
			LUPermissionToXMLByDateTimeParameters p = new LUPermissionToXMLByDateTimeParameters()
			{
				Token = Token,
				FromDateTime = fromDateTime
				, ToDateTime = toDateTime

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.LUPermissionToXMLByDateTime(parameters);
			List<LUPermissionToXMLByDateTimeResult> result = JsonConvert.DeserializeObject<List<LUPermissionToXMLByDateTimeResult>>(resultStr);
			return result;
		}
		public List<CreateUpsertResult> CreateUpsert (string tableName)
		{
			CreateUpsertParameters p = new CreateUpsertParameters()
			{
				TableName = tableName

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.CreateUpsert(parameters);
			List<CreateUpsertResult> result = JsonConvert.DeserializeObject<List<CreateUpsertResult>>(resultStr);
			return result;
		}
		public List<SystemUserGroupUpsertResult> SystemUserGroupUpsert (Guid? gUID, bool? isDeleted, DateTime? activeDateTime, DateTime? terminationDateTime, string description, bool? returnResults)
		{
			SystemUserGroupUpsertParameters p = new SystemUserGroupUpsertParameters()
			{
				Token = Token,
				GUID = gUID
				, IsDeleted = isDeleted
				, ActiveDateTime = activeDateTime
				, TerminationDateTime = terminationDateTime
				, Description = description
				, ReturnResults = returnResults

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.SystemUserGroupUpsert(parameters);
			List<SystemUserGroupUpsertResult> result = JsonConvert.DeserializeObject<List<SystemUserGroupUpsertResult>>(resultStr);
			return result;
		}
		public List<SystemUserGroupGetResult> SystemUserGroupGet (Guid? systemUserGroupGUID)
		{
			SystemUserGroupGetParameters p = new SystemUserGroupGetParameters()
			{
				Token = Token,
				SystemUserGroupGUID = systemUserGroupGUID

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.SystemUserGroupGet(parameters);
			List<SystemUserGroupGetResult> result = JsonConvert.DeserializeObject<List<SystemUserGroupGetResult>>(resultStr);
			return result;
		}
		public List<GenerateTokenResult> GenerateToken (Guid? systemUserGUID, bool? returnResults)
		{
			GenerateTokenParameters p = new GenerateTokenParameters()
			{
				SystemUserGUID = systemUserGUID
				, ReturnResults = returnResults

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.GenerateToken(parameters);
			List<GenerateTokenResult> result = JsonConvert.DeserializeObject<List<GenerateTokenResult>>(resultStr);
			return result;
		}
		public List<SystemUserUpsertResult> SystemUserUpsert (Guid? gUID, bool? isDeleted, DateTime? activeDateTime, DateTime? terminationDateTime, string username, string password, bool? returnResults)
		{
			SystemUserUpsertParameters p = new SystemUserUpsertParameters()
			{
				Token = Token,
				GUID = gUID
				, IsDeleted = isDeleted
				, ActiveDateTime = activeDateTime
				, TerminationDateTime = terminationDateTime
				, Username = username
				, Password = password
				, ReturnResults = returnResults

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.SystemUserUpsert(parameters);
			List<SystemUserUpsertResult> result = JsonConvert.DeserializeObject<List<SystemUserUpsertResult>>(resultStr);
			return result;
		}
		public List<SystemUserGroupToXMLResult> SystemUserGroupToXML (string gUIDS)
		{
			SystemUserGroupToXMLParameters p = new SystemUserGroupToXMLParameters()
			{
				Token = Token,
				GUIDS = gUIDS

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.SystemUserGroupToXML(parameters);
			List<SystemUserGroupToXMLResult> result = JsonConvert.DeserializeObject<List<SystemUserGroupToXMLResult>>(resultStr);
			return result;
		}
		public List<SystemUserGetResult> SystemUserGet (Guid? forSystemUserGUID)
		{
			SystemUserGetParameters p = new SystemUserGetParameters()
			{
				Token = Token,
				ForSystemUserGUID = forSystemUserGUID

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.SystemUserGet(parameters);
			List<SystemUserGetResult> result = JsonConvert.DeserializeObject<List<SystemUserGetResult>>(resultStr);
			return result;
		}
		public List<SystemUserGroupToXMLByDateTimeResult> SystemUserGroupToXMLByDateTime (DateTime? fromDateTime, DateTime? toDateTime)
		{
			SystemUserGroupToXMLByDateTimeParameters p = new SystemUserGroupToXMLByDateTimeParameters()
			{
				Token = Token,
				FromDateTime = fromDateTime
				, ToDateTime = toDateTime

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.SystemUserGroupToXMLByDateTime(parameters);
			List<SystemUserGroupToXMLByDateTimeResult> result = JsonConvert.DeserializeObject<List<SystemUserGroupToXMLByDateTimeResult>>(resultStr);
			return result;
		}
		public List<SystemUserGroupPermissionUpsertResult> SystemUserGroupPermissionUpsert (Guid? gUID, bool? isDeleted, DateTime? activeDateTime, DateTime? terminationDateTime, Guid? permissionGUID, Guid? systemUserGroupGUID, bool? returnResults)
		{
			SystemUserGroupPermissionUpsertParameters p = new SystemUserGroupPermissionUpsertParameters()
			{
				Token = Token,
				GUID = gUID
				, IsDeleted = isDeleted
				, ActiveDateTime = activeDateTime
				, TerminationDateTime = terminationDateTime
				, PermissionGUID = permissionGUID
				, SystemUserGroupGUID = systemUserGroupGUID
				, ReturnResults = returnResults

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.SystemUserGroupPermissionUpsert(parameters);
			List<SystemUserGroupPermissionUpsertResult> result = JsonConvert.DeserializeObject<List<SystemUserGroupPermissionUpsertResult>>(resultStr);
			return result;
		}
		public List<RefreshTokenResult> RefreshToken (Guid? systemUserGUID, bool? returnResults)
		{
			RefreshTokenParameters p = new RefreshTokenParameters()
			{
				SystemUserGUID = systemUserGUID
				, ReturnResults = returnResults

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.RefreshToken(parameters);
			List<RefreshTokenResult> result = JsonConvert.DeserializeObject<List<RefreshTokenResult>>(resultStr);
			return result;
		}
		public List<SystemUserGroupPermissionGetResult> SystemUserGroupPermissionGet (Guid? systemUserGroupPermissionGUID)
		{
			SystemUserGroupPermissionGetParameters p = new SystemUserGroupPermissionGetParameters()
			{
				Token = Token,
				SystemUserGroupPermissionGUID = systemUserGroupPermissionGUID

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.SystemUserGroupPermissionGet(parameters);
			List<SystemUserGroupPermissionGetResult> result = JsonConvert.DeserializeObject<List<SystemUserGroupPermissionGetResult>>(resultStr);
			return result;
		}
		public List<SystemUserGroupPermissionToXMLResult> SystemUserGroupPermissionToXML (string gUIDS)
		{
			SystemUserGroupPermissionToXMLParameters p = new SystemUserGroupPermissionToXMLParameters()
			{
				Token = Token,
				GUIDS = gUIDS

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.SystemUserGroupPermissionToXML(parameters);
			List<SystemUserGroupPermissionToXMLResult> result = JsonConvert.DeserializeObject<List<SystemUserGroupPermissionToXMLResult>>(resultStr);
			return result;
		}
		public List<SystemUserGroupPermissionToXMLByDateTimeResult> SystemUserGroupPermissionToXMLByDateTime (DateTime? fromDateTime, DateTime? toDateTime)
		{
			SystemUserGroupPermissionToXMLByDateTimeParameters p = new SystemUserGroupPermissionToXMLByDateTimeParameters()
			{
				Token = Token,
				FromDateTime = fromDateTime
				, ToDateTime = toDateTime

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.SystemUserGroupPermissionToXMLByDateTime(parameters);
			List<SystemUserGroupPermissionToXMLByDateTimeResult> result = JsonConvert.DeserializeObject<List<SystemUserGroupPermissionToXMLByDateTimeResult>>(resultStr);
			return result;
		}
		public List<SystemUserPermissionToXMLResult> SystemUserPermissionToXML (string gUIDS)
		{
			SystemUserPermissionToXMLParameters p = new SystemUserPermissionToXMLParameters()
			{
				GUIDS = gUIDS

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.SystemUserPermissionToXML(parameters);
			List<SystemUserPermissionToXMLResult> result = JsonConvert.DeserializeObject<List<SystemUserPermissionToXMLResult>>(resultStr);
			return result;
		}
		public List<SystemUserPermissionToXMLByDateTimeResult> SystemUserPermissionToXMLByDateTime (DateTime? fromDateTime, DateTime? toDateTime)
		{
			SystemUserPermissionToXMLByDateTimeParameters p = new SystemUserPermissionToXMLByDateTimeParameters()
			{
				FromDateTime = fromDateTime
				, ToDateTime = toDateTime

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.SystemUserPermissionToXMLByDateTime(parameters);
			List<SystemUserPermissionToXMLByDateTimeResult> result = JsonConvert.DeserializeObject<List<SystemUserPermissionToXMLByDateTimeResult>>(resultStr);
			return result;
		}
		public List<SystemUserGroupLineToXMLResult> SystemUserGroupLineToXML (string gUIDS)
		{
			SystemUserGroupLineToXMLParameters p = new SystemUserGroupLineToXMLParameters()
			{
				GUIDS = gUIDS

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.SystemUserGroupLineToXML(parameters);
			List<SystemUserGroupLineToXMLResult> result = JsonConvert.DeserializeObject<List<SystemUserGroupLineToXMLResult>>(resultStr);
			return result;
		}
		public List<SystemUserGroupLineToXMLByDateTimeResult> SystemUserGroupLineToXMLByDateTime (DateTime? fromDateTime, DateTime? toDateTime)
		{
			SystemUserGroupLineToXMLByDateTimeParameters p = new SystemUserGroupLineToXMLByDateTimeParameters()
			{
				FromDateTime = fromDateTime
				, ToDateTime = toDateTime

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.SystemUserGroupLineToXMLByDateTime(parameters);
			List<SystemUserGroupLineToXMLByDateTimeResult> result = JsonConvert.DeserializeObject<List<SystemUserGroupLineToXMLByDateTimeResult>>(resultStr);
			return result;
		}
		public List<GetChildrenResult> GetChildren (string tableName)
		{
			GetChildrenParameters p = new GetChildrenParameters()
			{
				TableName = tableName

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.GetChildren(parameters);
			List<GetChildrenResult> result = JsonConvert.DeserializeObject<List<GetChildrenResult>>(resultStr);
			return result;
		}
		public List<HasPermissionResult> HasPermission (Guid? systemUserGUID, Guid? permissionGUID)
		{
			HasPermissionParameters p = new HasPermissionParameters()
			{
				SystemUserGUID = systemUserGUID
				, PermissionGUID = permissionGUID

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.HasPermission(parameters);
			List<HasPermissionResult> result = JsonConvert.DeserializeObject<List<HasPermissionResult>>(resultStr);
			return result;
		}
		public List<CreateToXmlResult> CreateToXml (string tableName)
		{
			CreateToXmlParameters p = new CreateToXmlParameters()
			{
				TableName = tableName

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.CreateToXml(parameters);
			List<CreateToXmlResult> result = JsonConvert.DeserializeObject<List<CreateToXmlResult>>(resultStr);
			return result;
		}
		public List<SystemUserPermissionUpsertResult> SystemUserPermissionUpsert (Guid? gUID, bool? isDeleted, DateTime? activeDateTime, DateTime? terminationDateTime, Guid? forSystemUserGUID, Guid? permissionGUID, bool? returnResults)
		{
			SystemUserPermissionUpsertParameters p = new SystemUserPermissionUpsertParameters()
			{
				Token = Token,
				GUID = gUID
				, IsDeleted = isDeleted
				, ActiveDateTime = activeDateTime
				, TerminationDateTime = terminationDateTime
				, ForSystemUserGUID = forSystemUserGUID
				, PermissionGUID = permissionGUID
				, ReturnResults = returnResults

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.SystemUserPermissionUpsert(parameters);
			List<SystemUserPermissionUpsertResult> result = JsonConvert.DeserializeObject<List<SystemUserPermissionUpsertResult>>(resultStr);
			return result;
		}
		public List<SystemUserPermissionGetResult> SystemUserPermissionGet (Guid? systemUserPermissionGUID)
		{
			SystemUserPermissionGetParameters p = new SystemUserPermissionGetParameters()
			{
				Token = Token,
				SystemUserPermissionGUID = systemUserPermissionGUID

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.SystemUserPermissionGet(parameters);
			List<SystemUserPermissionGetResult> result = JsonConvert.DeserializeObject<List<SystemUserPermissionGetResult>>(resultStr);
			return result;
		}
		public List<LoginResult> Login (string userName, string password)
		{
			LoginParameters p = new LoginParameters()
			{
				UserName = userName
				, Password = password

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.Login(parameters);
			List<LoginResult> result = JsonConvert.DeserializeObject<List<LoginResult>>(resultStr);
			return result;
		}
		public List<GenerateTokenNoReturnResult> GenerateTokenNoReturn (Guid? systemUserGUID)
		{
			GenerateTokenNoReturnParameters p = new GenerateTokenNoReturnParameters()
			{
				SystemUserGUID = systemUserGUID

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.GenerateTokenNoReturn(parameters);
			List<GenerateTokenNoReturnResult> result = JsonConvert.DeserializeObject<List<GenerateTokenNoReturnResult>>(resultStr);
			return result;
		}
		public List<AccountUpsertResult> AccountUpsert (Guid? gUID, bool? isDeleted, DateTime? activeDateTime, DateTime? terminationDateTime, string accountName, bool? returnResults)
		{
			AccountUpsertParameters p = new AccountUpsertParameters()
			{
				Token = Token,
				GUID = gUID
				, IsDeleted = isDeleted
				, ActiveDateTime = activeDateTime
				, TerminationDateTime = terminationDateTime
				, AccountName = accountName
				, ReturnResults = returnResults

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.AccountUpsert(parameters);
			List<AccountUpsertResult> result = JsonConvert.DeserializeObject<List<AccountUpsertResult>>(resultStr);
			return result;
		}
		public List<AccountGetResult> AccountGet (Guid? accountGUID)
		{
			AccountGetParameters p = new AccountGetParameters()
			{
				Token = Token,
				AccountGUID = accountGUID

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.AccountGet(parameters);
			List<AccountGetResult> result = JsonConvert.DeserializeObject<List<AccountGetResult>>(resultStr);
			return result;
		}
		public List<AccountToXMLResult> AccountToXML (string gUIDS)
		{
			AccountToXMLParameters p = new AccountToXMLParameters()
			{
				Token = Token,
				GUIDS = gUIDS

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.AccountToXML(parameters);
			List<AccountToXMLResult> result = JsonConvert.DeserializeObject<List<AccountToXMLResult>>(resultStr);
			return result;
		}
		public List<AccountToXMLByDateTimeResult> AccountToXMLByDateTime (DateTime? fromDateTime, DateTime? toDateTime)
		{
			AccountToXMLByDateTimeParameters p = new AccountToXMLByDateTimeParameters()
			{
				Token = Token,
				FromDateTime = fromDateTime
				, ToDateTime = toDateTime

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.AccountToXMLByDateTime(parameters);
			List<AccountToXMLByDateTimeResult> result = JsonConvert.DeserializeObject<List<AccountToXMLByDateTimeResult>>(resultStr);
			return result;
		}
		public List<ActivityScheduleUpsertResult> ActivityScheduleUpsert (Guid? gUID, bool? isDeleted, int? doW, TimeSpan? startTime, TimeSpan? endTime, Guid? activityTypeGUID, Guid? serviceProviderGUID, bool? returnResults)
		{
			ActivityScheduleUpsertParameters p = new ActivityScheduleUpsertParameters()
			{
				Token = Token,
				GUID = gUID
				, IsDeleted = isDeleted
				, DoW = doW
				, StartTime = startTime
				, EndTime = endTime
				, ActivityTypeGUID = activityTypeGUID
				, ServiceProviderGUID = serviceProviderGUID
				, ReturnResults = returnResults

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.ActivityScheduleUpsert(parameters);
			List<ActivityScheduleUpsertResult> result = JsonConvert.DeserializeObject<List<ActivityScheduleUpsertResult>>(resultStr);
			return result;
		}
		public List<ActivityScheduleGetResult> ActivityScheduleGet (Guid? activityScheduleGUID)
		{
			ActivityScheduleGetParameters p = new ActivityScheduleGetParameters()
			{
				Token = Token,
				ActivityScheduleGUID = activityScheduleGUID

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.ActivityScheduleGet(parameters);
			List<ActivityScheduleGetResult> result = JsonConvert.DeserializeObject<List<ActivityScheduleGetResult>>(resultStr);
			return result;
		}
		public List<ActivityScheduleToXMLResult> ActivityScheduleToXML (string gUIDS)
		{
			ActivityScheduleToXMLParameters p = new ActivityScheduleToXMLParameters()
			{
				Token = Token,
				GUIDS = gUIDS

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.ActivityScheduleToXML(parameters);
			List<ActivityScheduleToXMLResult> result = JsonConvert.DeserializeObject<List<ActivityScheduleToXMLResult>>(resultStr);
			return result;
		}
		public List<ActivityScheduleToXMLByDateTimeResult> ActivityScheduleToXMLByDateTime (DateTime? fromDateTime, DateTime? toDateTime)
		{
			ActivityScheduleToXMLByDateTimeParameters p = new ActivityScheduleToXMLByDateTimeParameters()
			{
				Token = Token,
				FromDateTime = fromDateTime
				, ToDateTime = toDateTime

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.ActivityScheduleToXMLByDateTime(parameters);
			List<ActivityScheduleToXMLByDateTimeResult> result = JsonConvert.DeserializeObject<List<ActivityScheduleToXMLByDateTimeResult>>(resultStr);
			return result;
		}
		public List<LUActivityTypeUpsertResult> LUActivityTypeUpsert (Guid? gUID, bool? isDeleted, string activityType, Guid? accountGUID, bool? returnResults)
		{
			LUActivityTypeUpsertParameters p = new LUActivityTypeUpsertParameters()
			{
				Token = Token,
				GUID = gUID
				, IsDeleted = isDeleted
				, ActivityType = activityType
				, AccountGUID = accountGUID
				, ReturnResults = returnResults

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.LUActivityTypeUpsert(parameters);
			List<LUActivityTypeUpsertResult> result = JsonConvert.DeserializeObject<List<LUActivityTypeUpsertResult>>(resultStr);
			return result;
		}
		public List<LUActivityTypeGetResult> LUActivityTypeGet (Guid? lUActivityTypeGUID)
		{
			LUActivityTypeGetParameters p = new LUActivityTypeGetParameters()
			{
				Token = Token,
				LUActivityTypeGUID = lUActivityTypeGUID

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.LUActivityTypeGet(parameters);
			List<LUActivityTypeGetResult> result = JsonConvert.DeserializeObject<List<LUActivityTypeGetResult>>(resultStr);
			return result;
		}
		public List<LUActivityTypeToXMLResult> LUActivityTypeToXML (string gUIDS)
		{
			LUActivityTypeToXMLParameters p = new LUActivityTypeToXMLParameters()
			{
				Token = Token,
				GUIDS = gUIDS

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.LUActivityTypeToXML(parameters);
			List<LUActivityTypeToXMLResult> result = JsonConvert.DeserializeObject<List<LUActivityTypeToXMLResult>>(resultStr);
			return result;
		}
		public List<LUActivityTypeToXMLByDateTimeResult> LUActivityTypeToXMLByDateTime (DateTime? fromDateTime, DateTime? toDateTime)
		{
			LUActivityTypeToXMLByDateTimeParameters p = new LUActivityTypeToXMLByDateTimeParameters()
			{
				Token = Token,
				FromDateTime = fromDateTime
				, ToDateTime = toDateTime

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.LUActivityTypeToXMLByDateTime(parameters);
			List<LUActivityTypeToXMLByDateTimeResult> result = JsonConvert.DeserializeObject<List<LUActivityTypeToXMLByDateTimeResult>>(resultStr);
			return result;
		}
		public List<LUAddressTypeUpsertResult> LUAddressTypeUpsert (Guid? gUID, bool? isDeleted, DateTime? activeDateTime, DateTime? terminationDateTime, string addressType, bool? returnResults)
		{
			LUAddressTypeUpsertParameters p = new LUAddressTypeUpsertParameters()
			{
				Token = Token,
				GUID = gUID
				, IsDeleted = isDeleted
				, ActiveDateTime = activeDateTime
				, TerminationDateTime = terminationDateTime
				, AddressType = addressType
				, ReturnResults = returnResults

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.LUAddressTypeUpsert(parameters);
			List<LUAddressTypeUpsertResult> result = JsonConvert.DeserializeObject<List<LUAddressTypeUpsertResult>>(resultStr);
			return result;
		}
		public List<AuditLogUpsertResult> AuditLogUpsert (Guid? gUID, string source, string tableName, string beforeSnapshot, string afterSnapshot, Guid? tableGUID, Guid? systemUserGUID, bool? returnResults)
		{
			AuditLogUpsertParameters p = new AuditLogUpsertParameters()
			{
				GUID = gUID
				, Source = source
				, TableName = tableName
				, BeforeSnapshot = beforeSnapshot
				, AfterSnapshot = afterSnapshot
				, TableGUID = tableGUID
				, SystemUserGUID = systemUserGUID
				, ReturnResults = returnResults

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.AuditLogUpsert(parameters);
			List<AuditLogUpsertResult> result = JsonConvert.DeserializeObject<List<AuditLogUpsertResult>>(resultStr);
			return result;
		}
		public List<LUAddressTypeGetResult> LUAddressTypeGet (Guid? lUAddressTypeGUID)
		{
			LUAddressTypeGetParameters p = new LUAddressTypeGetParameters()
			{
				Token = Token,
				LUAddressTypeGUID = lUAddressTypeGUID

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.LUAddressTypeGet(parameters);
			List<LUAddressTypeGetResult> result = JsonConvert.DeserializeObject<List<LUAddressTypeGetResult>>(resultStr);
			return result;
		}
		public List<LUAddressTypeToXMLResult> LUAddressTypeToXML (string gUIDS)
		{
			LUAddressTypeToXMLParameters p = new LUAddressTypeToXMLParameters()
			{
				Token = Token,
				GUIDS = gUIDS

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.LUAddressTypeToXML(parameters);
			List<LUAddressTypeToXMLResult> result = JsonConvert.DeserializeObject<List<LUAddressTypeToXMLResult>>(resultStr);
			return result;
		}
		public List<LUAddressTypeToXMLByDateTimeResult> LUAddressTypeToXMLByDateTime (DateTime? fromDateTime, DateTime? toDateTime)
		{
			LUAddressTypeToXMLByDateTimeParameters p = new LUAddressTypeToXMLByDateTimeParameters()
			{
				Token = Token,
				FromDateTime = fromDateTime
				, ToDateTime = toDateTime

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.LUAddressTypeToXMLByDateTime(parameters);
			List<LUAddressTypeToXMLByDateTimeResult> result = JsonConvert.DeserializeObject<List<LUAddressTypeToXMLByDateTimeResult>>(resultStr);
			return result;
		}
		public List<AppointmentUpsertResult> AppointmentUpsert (Guid? gUID, bool? isDeleted, DateTime? startDateTime, TimeSpan? duration, DateTime? actualStartDateTime, DateTime? actualEndDateTime, Guid? customerGUID, Guid? storeGUID, Guid? serviceProviderGUID, bool? returnResults)
		{
			AppointmentUpsertParameters p = new AppointmentUpsertParameters()
			{
				Token = Token,
				GUID = gUID
				, IsDeleted = isDeleted
				, StartDateTime = startDateTime
				, Duration = duration
				, ActualStartDateTime = actualStartDateTime
				, ActualEndDateTime = actualEndDateTime
				, CustomerGUID = customerGUID
				, StoreGUID = storeGUID
				, ServiceProviderGUID = serviceProviderGUID
				, ReturnResults = returnResults

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.AppointmentUpsert(parameters);
			List<AppointmentUpsertResult> result = JsonConvert.DeserializeObject<List<AppointmentUpsertResult>>(resultStr);
			return result;
		}
		public List<AppointmentGetResult> AppointmentGet (Guid? appointmentGUID)
		{
			AppointmentGetParameters p = new AppointmentGetParameters()
			{
				Token = Token,
				AppointmentGUID = appointmentGUID

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.AppointmentGet(parameters);
			List<AppointmentGetResult> result = JsonConvert.DeserializeObject<List<AppointmentGetResult>>(resultStr);
			return result;
		}
		public List<AppointmentToXMLResult> AppointmentToXML (string gUIDS)
		{
			AppointmentToXMLParameters p = new AppointmentToXMLParameters()
			{
				Token = Token,
				GUIDS = gUIDS

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.AppointmentToXML(parameters);
			List<AppointmentToXMLResult> result = JsonConvert.DeserializeObject<List<AppointmentToXMLResult>>(resultStr);
			return result;
		}
		public List<AppointmentToXMLByDateTimeResult> AppointmentToXMLByDateTime (DateTime? fromDateTime, DateTime? toDateTime)
		{
			AppointmentToXMLByDateTimeParameters p = new AppointmentToXMLByDateTimeParameters()
			{
				Token = Token,
				FromDateTime = fromDateTime
				, ToDateTime = toDateTime

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.AppointmentToXMLByDateTime(parameters);
			List<AppointmentToXMLByDateTimeResult> result = JsonConvert.DeserializeObject<List<AppointmentToXMLByDateTimeResult>>(resultStr);
			return result;
		}
		public List<ServiceProviderUpsertResult> ServiceProviderUpsert (Guid? gUID, bool? isDeleted, DateTime? activeDateTime, DateTime? terminationDateTime, string firstname, string surname, Guid? accountGUID, bool? returnResults)
		{
			ServiceProviderUpsertParameters p = new ServiceProviderUpsertParameters()
			{
				Token = Token,
				GUID = gUID
				, IsDeleted = isDeleted
				, ActiveDateTime = activeDateTime
				, TerminationDateTime = terminationDateTime
				, Firstname = firstname
				, Surname = surname
				, AccountGUID = accountGUID
				, ReturnResults = returnResults

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.ServiceProviderUpsert(parameters);
			List<ServiceProviderUpsertResult> result = JsonConvert.DeserializeObject<List<ServiceProviderUpsertResult>>(resultStr);
			return result;
		}
		public List<ServiceProviderGetResult> ServiceProviderGet (Guid? serviceProviderGUID)
		{
			ServiceProviderGetParameters p = new ServiceProviderGetParameters()
			{
				Token = Token,
				ServiceProviderGUID = serviceProviderGUID

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.ServiceProviderGet(parameters);
			List<ServiceProviderGetResult> result = JsonConvert.DeserializeObject<List<ServiceProviderGetResult>>(resultStr);
			return result;
		}
		public List<ServiceProviderToXMLResult> ServiceProviderToXML (string gUIDS)
		{
			ServiceProviderToXMLParameters p = new ServiceProviderToXMLParameters()
			{
				Token = Token,
				GUIDS = gUIDS

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.ServiceProviderToXML(parameters);
			List<ServiceProviderToXMLResult> result = JsonConvert.DeserializeObject<List<ServiceProviderToXMLResult>>(resultStr);
			return result;
		}
		public List<ServiceProviderToXMLByDateTimeResult> ServiceProviderToXMLByDateTime (DateTime? fromDateTime, DateTime? toDateTime)
		{
			ServiceProviderToXMLByDateTimeParameters p = new ServiceProviderToXMLByDateTimeParameters()
			{
				Token = Token,
				FromDateTime = fromDateTime
				, ToDateTime = toDateTime

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.ServiceProviderToXMLByDateTime(parameters);
			List<ServiceProviderToXMLByDateTimeResult> result = JsonConvert.DeserializeObject<List<ServiceProviderToXMLByDateTimeResult>>(resultStr);
			return result;
		}
		public List<CustomerUpsertResult> CustomerUpsert (Guid? gUID, bool? isDeleted, DateTime? activeDateTime, DateTime? terminationDateTime, string firstname, string surname, string emailAddress, string iDNumber, DateTime? birthDate, string cellphoneNumber, Guid? accountGUID, bool? returnResults)
		{
			CustomerUpsertParameters p = new CustomerUpsertParameters()
			{
				Token = Token,
				GUID = gUID
				, IsDeleted = isDeleted
				, ActiveDateTime = activeDateTime
				, TerminationDateTime = terminationDateTime
				, Firstname = firstname
				, Surname = surname
				, EmailAddress = emailAddress
				, IDNumber = iDNumber
				, BirthDate = birthDate
				, CellphoneNumber = cellphoneNumber
				, AccountGUID = accountGUID
				, ReturnResults = returnResults

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.CustomerUpsert(parameters);
			List<CustomerUpsertResult> result = JsonConvert.DeserializeObject<List<CustomerUpsertResult>>(resultStr);
			return result;
		}
		public List<CustomerGetResult> CustomerGet (Guid? customerGUID)
		{
			CustomerGetParameters p = new CustomerGetParameters()
			{
				Token = Token,
				CustomerGUID = customerGUID

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.CustomerGet(parameters);
			List<CustomerGetResult> result = JsonConvert.DeserializeObject<List<CustomerGetResult>>(resultStr);
			return result;
		}
		public List<CustomerToXMLResult> CustomerToXML (string gUIDS)
		{
			CustomerToXMLParameters p = new CustomerToXMLParameters()
			{
				Token = Token,
				GUIDS = gUIDS

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.CustomerToXML(parameters);
			List<CustomerToXMLResult> result = JsonConvert.DeserializeObject<List<CustomerToXMLResult>>(resultStr);
			return result;
		}
		public List<CustomerToXMLByDateTimeResult> CustomerToXMLByDateTime (DateTime? fromDateTime, DateTime? toDateTime)
		{
			CustomerToXMLByDateTimeParameters p = new CustomerToXMLByDateTimeParameters()
			{
				Token = Token,
				FromDateTime = fromDateTime
				, ToDateTime = toDateTime

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.CustomerToXMLByDateTime(parameters);
			List<CustomerToXMLByDateTimeResult> result = JsonConvert.DeserializeObject<List<CustomerToXMLByDateTimeResult>>(resultStr);
			return result;
		}
		public List<CustomerAddressUpsertResult> CustomerAddressUpsert (Guid? gUID, bool? isDeleted, DateTime? activeDateTime, DateTime? terminationDateTime, string address1, string address2, string address3, string code, string province, Guid? customerGUID, Guid? addressTypeGUID, bool? returnResults)
		{
			CustomerAddressUpsertParameters p = new CustomerAddressUpsertParameters()
			{
				Token = Token,
				GUID = gUID
				, IsDeleted = isDeleted
				, ActiveDateTime = activeDateTime
				, TerminationDateTime = terminationDateTime
				, Address1 = address1
				, Address2 = address2
				, Address3 = address3
				, Code = code
				, Province = province
				, CustomerGUID = customerGUID
				, AddressTypeGUID = addressTypeGUID
				, ReturnResults = returnResults

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.CustomerAddressUpsert(parameters);
			List<CustomerAddressUpsertResult> result = JsonConvert.DeserializeObject<List<CustomerAddressUpsertResult>>(resultStr);
			return result;
		}
		public List<CustomerAddressGetResult> CustomerAddressGet (Guid? customerAddressGUID)
		{
			CustomerAddressGetParameters p = new CustomerAddressGetParameters()
			{
				Token = Token,
				CustomerAddressGUID = customerAddressGUID

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.CustomerAddressGet(parameters);
			List<CustomerAddressGetResult> result = JsonConvert.DeserializeObject<List<CustomerAddressGetResult>>(resultStr);
			return result;
		}
     }
}
