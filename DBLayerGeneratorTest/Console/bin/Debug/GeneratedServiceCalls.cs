//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using AppointmentLibrary.Parameters;
using AppointmentLibrary.ProcResults;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ApplicationClient
{
    public partial class AppointmentServiceClient
    {
        public AppointmentServiceClient(string username, string password)
        {
            service = new AppointmentService.AppointmentServiceClient();
            service.ClientCredentials.UserName.UserName = username;
            service.ClientCredentials.UserName.Password = password;
        }
        private static AppointmentService.AppointmentServiceClient service;

        public static AppointmentService.AppointmentServiceClient Service
        {
            get
            {
                return service;
            }
        }
		public static List<AccountToXMLByDateTimeResult> AccountToXMLByDateTime (DateTime? fromDateTime, DateTime? toDateTime)
		{
			AccountToXMLByDateTimeParameters p = new AccountToXMLByDateTimeParameters()
			{
				FromDateTime = fromDateTime
				, ToDateTime = toDateTime

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.AccountToXMLByDateTime(parameters);
			List<AccountToXMLByDateTimeResult> result = JsonConvert.DeserializeObject<List<AccountToXMLByDateTimeResult>>(resultStr);
			return result;
		}
		public static List<ActivityTypeToXMLResult> ActivityTypeToXML (string gUIDS)
		{
			ActivityTypeToXMLParameters p = new ActivityTypeToXMLParameters()
			{
				GUIDS = gUIDS

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.ActivityTypeToXML(parameters);
			List<ActivityTypeToXMLResult> result = JsonConvert.DeserializeObject<List<ActivityTypeToXMLResult>>(resultStr);
			return result;
		}
		public static List<ActivityTypeToXMLByDateTimeResult> ActivityTypeToXMLByDateTime (DateTime? fromDateTime, DateTime? toDateTime)
		{
			ActivityTypeToXMLByDateTimeParameters p = new ActivityTypeToXMLByDateTimeParameters()
			{
				FromDateTime = fromDateTime
				, ToDateTime = toDateTime

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.ActivityTypeToXMLByDateTime(parameters);
			List<ActivityTypeToXMLByDateTimeResult> result = JsonConvert.DeserializeObject<List<ActivityTypeToXMLByDateTimeResult>>(resultStr);
			return result;
		}
		public static List<AppointmentToXMLResult> AppointmentToXML (string gUIDS)
		{
			AppointmentToXMLParameters p = new AppointmentToXMLParameters()
			{
				GUIDS = gUIDS

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.AppointmentToXML(parameters);
			List<AppointmentToXMLResult> result = JsonConvert.DeserializeObject<List<AppointmentToXMLResult>>(resultStr);
			return result;
		}
		public static List<AppointmentToXMLByDateTimeResult> AppointmentToXMLByDateTime (DateTime? fromDateTime, DateTime? toDateTime)
		{
			AppointmentToXMLByDateTimeParameters p = new AppointmentToXMLByDateTimeParameters()
			{
				FromDateTime = fromDateTime
				, ToDateTime = toDateTime

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.AppointmentToXMLByDateTime(parameters);
			List<AppointmentToXMLByDateTimeResult> result = JsonConvert.DeserializeObject<List<AppointmentToXMLByDateTimeResult>>(resultStr);
			return result;
		}
		public static List<ServiceProviderToXMLResult> ServiceProviderToXML (string gUIDS)
		{
			ServiceProviderToXMLParameters p = new ServiceProviderToXMLParameters()
			{
				GUIDS = gUIDS

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.ServiceProviderToXML(parameters);
			List<ServiceProviderToXMLResult> result = JsonConvert.DeserializeObject<List<ServiceProviderToXMLResult>>(resultStr);
			return result;
		}
		public static List<CreateUpsertResult> CreateUpsert (string tableName)
		{
			CreateUpsertParameters p = new CreateUpsertParameters()
			{
				TableName = tableName

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.CreateUpsert(parameters);
			List<CreateUpsertResult> result = JsonConvert.DeserializeObject<List<CreateUpsertResult>>(resultStr);
			return result;
		}
		public static List<ServiceProviderToXMLByDateTimeResult> ServiceProviderToXMLByDateTime (DateTime? fromDateTime, DateTime? toDateTime)
		{
			ServiceProviderToXMLByDateTimeParameters p = new ServiceProviderToXMLByDateTimeParameters()
			{
				FromDateTime = fromDateTime
				, ToDateTime = toDateTime

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.ServiceProviderToXMLByDateTime(parameters);
			List<ServiceProviderToXMLByDateTimeResult> result = JsonConvert.DeserializeObject<List<ServiceProviderToXMLByDateTimeResult>>(resultStr);
			return result;
		}
		public static List<CustomerToXMLResult> CustomerToXML (string gUIDS)
		{
			CustomerToXMLParameters p = new CustomerToXMLParameters()
			{
				GUIDS = gUIDS

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.CustomerToXML(parameters);
			List<CustomerToXMLResult> result = JsonConvert.DeserializeObject<List<CustomerToXMLResult>>(resultStr);
			return result;
		}
		public static List<SystemUserUpsertResult> SystemUserUpsert (Guid? gUID, bool? isDeleted, DateTime? activeDateTime, DateTime? terminationDateTime, string username, string password, Guid? systemUserGUID, bool? returnResults)
		{
			SystemUserUpsertParameters p = new SystemUserUpsertParameters()
			{
				GUID = gUID
				, IsDeleted = isDeleted
				, ActiveDateTime = activeDateTime
				, TerminationDateTime = terminationDateTime
				, Username = username
				, Password = password
				, SystemUserGUID = systemUserGUID
				, ReturnResults = returnResults

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.SystemUserUpsert(parameters);
			List<SystemUserUpsertResult> result = JsonConvert.DeserializeObject<List<SystemUserUpsertResult>>(resultStr);
			return result;
		}
		public static List<CustomerToXMLByDateTimeResult> CustomerToXMLByDateTime (DateTime? fromDateTime, DateTime? toDateTime)
		{
			CustomerToXMLByDateTimeParameters p = new CustomerToXMLByDateTimeParameters()
			{
				FromDateTime = fromDateTime
				, ToDateTime = toDateTime

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.CustomerToXMLByDateTime(parameters);
			List<CustomerToXMLByDateTimeResult> result = JsonConvert.DeserializeObject<List<CustomerToXMLByDateTimeResult>>(resultStr);
			return result;
		}
		public static List<SystemUserGetResult> SystemUserGet (Guid? systemUserGUID)
		{
			SystemUserGetParameters p = new SystemUserGetParameters()
			{
				SystemUserGUID = systemUserGUID

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.SystemUserGet(parameters);
			List<SystemUserGetResult> result = JsonConvert.DeserializeObject<List<SystemUserGetResult>>(resultStr);
			return result;
		}
		public static List<ActivityScheduleToXMLResult> ActivityScheduleToXML (string gUIDS)
		{
			ActivityScheduleToXMLParameters p = new ActivityScheduleToXMLParameters()
			{
				GUIDS = gUIDS

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.ActivityScheduleToXML(parameters);
			List<ActivityScheduleToXMLResult> result = JsonConvert.DeserializeObject<List<ActivityScheduleToXMLResult>>(resultStr);
			return result;
		}
		public static List<ActivityScheduleToXMLByDateTimeResult> ActivityScheduleToXMLByDateTime (DateTime? fromDateTime, DateTime? toDateTime)
		{
			ActivityScheduleToXMLByDateTimeParameters p = new ActivityScheduleToXMLByDateTimeParameters()
			{
				FromDateTime = fromDateTime
				, ToDateTime = toDateTime

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.ActivityScheduleToXMLByDateTime(parameters);
			List<ActivityScheduleToXMLByDateTimeResult> result = JsonConvert.DeserializeObject<List<ActivityScheduleToXMLByDateTimeResult>>(resultStr);
			return result;
		}
		public static List<StoreToXMLResult> StoreToXML (string gUIDS)
		{
			StoreToXMLParameters p = new StoreToXMLParameters()
			{
				GUIDS = gUIDS

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.StoreToXML(parameters);
			List<StoreToXMLResult> result = JsonConvert.DeserializeObject<List<StoreToXMLResult>>(resultStr);
			return result;
		}
		public static List<StoreToXMLByDateTimeResult> StoreToXMLByDateTime (DateTime? fromDateTime, DateTime? toDateTime)
		{
			StoreToXMLByDateTimeParameters p = new StoreToXMLByDateTimeParameters()
			{
				FromDateTime = fromDateTime
				, ToDateTime = toDateTime

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.StoreToXMLByDateTime(parameters);
			List<StoreToXMLByDateTimeResult> result = JsonConvert.DeserializeObject<List<StoreToXMLByDateTimeResult>>(resultStr);
			return result;
		}
		public static List<PermissionToXMLResult> PermissionToXML (string gUIDS)
		{
			PermissionToXMLParameters p = new PermissionToXMLParameters()
			{
				GUIDS = gUIDS

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.PermissionToXML(parameters);
			List<PermissionToXMLResult> result = JsonConvert.DeserializeObject<List<PermissionToXMLResult>>(resultStr);
			return result;
		}
		public static List<PermissionToXMLByDateTimeResult> PermissionToXMLByDateTime (DateTime? fromDateTime, DateTime? toDateTime)
		{
			PermissionToXMLByDateTimeParameters p = new PermissionToXMLByDateTimeParameters()
			{
				FromDateTime = fromDateTime
				, ToDateTime = toDateTime

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.PermissionToXMLByDateTime(parameters);
			List<PermissionToXMLByDateTimeResult> result = JsonConvert.DeserializeObject<List<PermissionToXMLByDateTimeResult>>(resultStr);
			return result;
		}
		public static List<SystemUserPermissionToXMLResult> SystemUserPermissionToXML (string gUIDS)
		{
			SystemUserPermissionToXMLParameters p = new SystemUserPermissionToXMLParameters()
			{
				GUIDS = gUIDS

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.SystemUserPermissionToXML(parameters);
			List<SystemUserPermissionToXMLResult> result = JsonConvert.DeserializeObject<List<SystemUserPermissionToXMLResult>>(resultStr);
			return result;
		}
		public static List<SystemUserPermissionToXMLByDateTimeResult> SystemUserPermissionToXMLByDateTime (DateTime? fromDateTime, DateTime? toDateTime)
		{
			SystemUserPermissionToXMLByDateTimeParameters p = new SystemUserPermissionToXMLByDateTimeParameters()
			{
				FromDateTime = fromDateTime
				, ToDateTime = toDateTime

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.SystemUserPermissionToXMLByDateTime(parameters);
			List<SystemUserPermissionToXMLByDateTimeResult> result = JsonConvert.DeserializeObject<List<SystemUserPermissionToXMLByDateTimeResult>>(resultStr);
			return result;
		}
		public static List<SystemUserGroupToXMLResult> SystemUserGroupToXML (string gUIDS)
		{
			SystemUserGroupToXMLParameters p = new SystemUserGroupToXMLParameters()
			{
				GUIDS = gUIDS

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.SystemUserGroupToXML(parameters);
			List<SystemUserGroupToXMLResult> result = JsonConvert.DeserializeObject<List<SystemUserGroupToXMLResult>>(resultStr);
			return result;
		}
		public static List<SystemUserGroupToXMLByDateTimeResult> SystemUserGroupToXMLByDateTime (DateTime? fromDateTime, DateTime? toDateTime)
		{
			SystemUserGroupToXMLByDateTimeParameters p = new SystemUserGroupToXMLByDateTimeParameters()
			{
				FromDateTime = fromDateTime
				, ToDateTime = toDateTime

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.SystemUserGroupToXMLByDateTime(parameters);
			List<SystemUserGroupToXMLByDateTimeResult> result = JsonConvert.DeserializeObject<List<SystemUserGroupToXMLByDateTimeResult>>(resultStr);
			return result;
		}
		public static List<SystemUserGroupLineToXMLResult> SystemUserGroupLineToXML (string gUIDS)
		{
			SystemUserGroupLineToXMLParameters p = new SystemUserGroupLineToXMLParameters()
			{
				GUIDS = gUIDS

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.SystemUserGroupLineToXML(parameters);
			List<SystemUserGroupLineToXMLResult> result = JsonConvert.DeserializeObject<List<SystemUserGroupLineToXMLResult>>(resultStr);
			return result;
		}
		public static List<SystemUserGroupLineToXMLByDateTimeResult> SystemUserGroupLineToXMLByDateTime (DateTime? fromDateTime, DateTime? toDateTime)
		{
			SystemUserGroupLineToXMLByDateTimeParameters p = new SystemUserGroupLineToXMLByDateTimeParameters()
			{
				FromDateTime = fromDateTime
				, ToDateTime = toDateTime

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.SystemUserGroupLineToXMLByDateTime(parameters);
			List<SystemUserGroupLineToXMLByDateTimeResult> result = JsonConvert.DeserializeObject<List<SystemUserGroupLineToXMLByDateTimeResult>>(resultStr);
			return result;
		}
		public static List<SystemUserGroupPermissionToXMLResult> SystemUserGroupPermissionToXML (string gUIDS)
		{
			SystemUserGroupPermissionToXMLParameters p = new SystemUserGroupPermissionToXMLParameters()
			{
				GUIDS = gUIDS

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.SystemUserGroupPermissionToXML(parameters);
			List<SystemUserGroupPermissionToXMLResult> result = JsonConvert.DeserializeObject<List<SystemUserGroupPermissionToXMLResult>>(resultStr);
			return result;
		}
		public static List<SystemUserGroupPermissionToXMLByDateTimeResult> SystemUserGroupPermissionToXMLByDateTime (DateTime? fromDateTime, DateTime? toDateTime)
		{
			SystemUserGroupPermissionToXMLByDateTimeParameters p = new SystemUserGroupPermissionToXMLByDateTimeParameters()
			{
				FromDateTime = fromDateTime
				, ToDateTime = toDateTime

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.SystemUserGroupPermissionToXMLByDateTime(parameters);
			List<SystemUserGroupPermissionToXMLByDateTimeResult> result = JsonConvert.DeserializeObject<List<SystemUserGroupPermissionToXMLByDateTimeResult>>(resultStr);
			return result;
		}
		public static List<GetChildrenResult> GetChildren (string tableName)
		{
			GetChildrenParameters p = new GetChildrenParameters()
			{
				TableName = tableName

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.GetChildren(parameters);
			List<GetChildrenResult> result = JsonConvert.DeserializeObject<List<GetChildrenResult>>(resultStr);
			return result;
		}
		public static List<CreateToXmlResult> CreateToXml (string tableName)
		{
			CreateToXmlParameters p = new CreateToXmlParameters()
			{
				TableName = tableName

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.CreateToXml(parameters);
			List<CreateToXmlResult> result = JsonConvert.DeserializeObject<List<CreateToXmlResult>>(resultStr);
			return result;
		}
		public static List<LoginResult> Login (string userName, string password)
		{
			LoginParameters p = new LoginParameters()
			{
				UserName = userName
				, Password = password

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.Login(parameters);
			List<LoginResult> result = JsonConvert.DeserializeObject<List<LoginResult>>(resultStr);
			return result;
		}
		public static List<AccountUpsertResult> AccountUpsert (Guid? gUID, bool? isDeleted, DateTime? activeDateTime, DateTime? terminationDateTime, string accountName, Guid? systemUserGUID, bool? returnResults)
		{
			AccountUpsertParameters p = new AccountUpsertParameters()
			{
				GUID = gUID
				, IsDeleted = isDeleted
				, ActiveDateTime = activeDateTime
				, TerminationDateTime = terminationDateTime
				, AccountName = accountName
				, SystemUserGUID = systemUserGUID
				, ReturnResults = returnResults

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.AccountUpsert(parameters);
			List<AccountUpsertResult> result = JsonConvert.DeserializeObject<List<AccountUpsertResult>>(resultStr);
			return result;
		}
		public static List<AccountGetResult> AccountGet (Guid? accountGUID, Guid? systemUserGUID)
		{
			AccountGetParameters p = new AccountGetParameters()
			{
				AccountGUID = accountGUID
				, SystemUserGUID = systemUserGUID

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.AccountGet(parameters);
			List<AccountGetResult> result = JsonConvert.DeserializeObject<List<AccountGetResult>>(resultStr);
			return result;
		}
		public static List<ActivityTypeUpsertResult> ActivityTypeUpsert (Guid? gUID, bool? isDeleted, string activityType, Guid? accountGUID, Guid? systemUserGUID, bool? returnResults)
		{
			ActivityTypeUpsertParameters p = new ActivityTypeUpsertParameters()
			{
				GUID = gUID
				, IsDeleted = isDeleted
				, ActivityType = activityType
				, AccountGUID = accountGUID
				, SystemUserGUID = systemUserGUID
				, ReturnResults = returnResults

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.ActivityTypeUpsert(parameters);
			List<ActivityTypeUpsertResult> result = JsonConvert.DeserializeObject<List<ActivityTypeUpsertResult>>(resultStr);
			return result;
		}
		public static List<ActivityTypeGetResult> ActivityTypeGet (Guid? activityTypeGUID, Guid? systemUserGUID)
		{
			ActivityTypeGetParameters p = new ActivityTypeGetParameters()
			{
				ActivityTypeGUID = activityTypeGUID
				, SystemUserGUID = systemUserGUID

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.ActivityTypeGet(parameters);
			List<ActivityTypeGetResult> result = JsonConvert.DeserializeObject<List<ActivityTypeGetResult>>(resultStr);
			return result;
		}
		public static List<AppointmentUpsertResult> AppointmentUpsert (Guid? gUID, bool? isDeleted, DateTime? startDateTime, TimeSpan? duration, DateTime? actualStartDateTime, DateTime? actualEndDateTime, Guid? customerGUID, Guid? storeGUID, Guid? serviceProviderGUID, Guid? systemUserGUID, bool? returnResults)
		{
			AppointmentUpsertParameters p = new AppointmentUpsertParameters()
			{
				GUID = gUID
				, IsDeleted = isDeleted
				, StartDateTime = startDateTime
				, Duration = duration
				, ActualStartDateTime = actualStartDateTime
				, ActualEndDateTime = actualEndDateTime
				, CustomerGUID = customerGUID
				, StoreGUID = storeGUID
				, ServiceProviderGUID = serviceProviderGUID
				, SystemUserGUID = systemUserGUID
				, ReturnResults = returnResults

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.AppointmentUpsert(parameters);
			List<AppointmentUpsertResult> result = JsonConvert.DeserializeObject<List<AppointmentUpsertResult>>(resultStr);
			return result;
		}
		public static List<AppointmentGetResult> AppointmentGet (Guid? appointmentGUID, Guid? systemUserGUID)
		{
			AppointmentGetParameters p = new AppointmentGetParameters()
			{
				AppointmentGUID = appointmentGUID
				, SystemUserGUID = systemUserGUID

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.AppointmentGet(parameters);
			List<AppointmentGetResult> result = JsonConvert.DeserializeObject<List<AppointmentGetResult>>(resultStr);
			return result;
		}
		public static List<ServiceProviderUpsertResult> ServiceProviderUpsert (Guid? gUID, bool? isDeleted, DateTime? activeDateTime, DateTime? terminationDateTime, string firstname, string surname, Guid? accountGUID, Guid? systemUserGUID, bool? returnResults)
		{
			ServiceProviderUpsertParameters p = new ServiceProviderUpsertParameters()
			{
				GUID = gUID
				, IsDeleted = isDeleted
				, ActiveDateTime = activeDateTime
				, TerminationDateTime = terminationDateTime
				, Firstname = firstname
				, Surname = surname
				, AccountGUID = accountGUID
				, SystemUserGUID = systemUserGUID
				, ReturnResults = returnResults

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.ServiceProviderUpsert(parameters);
			List<ServiceProviderUpsertResult> result = JsonConvert.DeserializeObject<List<ServiceProviderUpsertResult>>(resultStr);
			return result;
		}
		public static List<ServiceProviderGetResult> ServiceProviderGet (Guid? serviceProviderGUID, Guid? systemUserGUID)
		{
			ServiceProviderGetParameters p = new ServiceProviderGetParameters()
			{
				ServiceProviderGUID = serviceProviderGUID
				, SystemUserGUID = systemUserGUID

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.ServiceProviderGet(parameters);
			List<ServiceProviderGetResult> result = JsonConvert.DeserializeObject<List<ServiceProviderGetResult>>(resultStr);
			return result;
		}
		public static List<CustomerUpsertResult> CustomerUpsert (Guid? gUID, bool? isDeleted, DateTime? activeDateTime, DateTime? terminationDateTime, string firstname, string surname, Guid? accountGUID, Guid? systemUserGUID, bool? returnResults)
		{
			CustomerUpsertParameters p = new CustomerUpsertParameters()
			{
				GUID = gUID
				, IsDeleted = isDeleted
				, ActiveDateTime = activeDateTime
				, TerminationDateTime = terminationDateTime
				, Firstname = firstname
				, Surname = surname
				, AccountGUID = accountGUID
				, SystemUserGUID = systemUserGUID
				, ReturnResults = returnResults

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.CustomerUpsert(parameters);
			List<CustomerUpsertResult> result = JsonConvert.DeserializeObject<List<CustomerUpsertResult>>(resultStr);
			return result;
		}
		public static List<CustomerGetResult> CustomerGet (Guid? customerGUID, Guid? systemUserGUID)
		{
			CustomerGetParameters p = new CustomerGetParameters()
			{
				CustomerGUID = customerGUID
				, SystemUserGUID = systemUserGUID

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.CustomerGet(parameters);
			List<CustomerGetResult> result = JsonConvert.DeserializeObject<List<CustomerGetResult>>(resultStr);
			return result;
		}
		public static List<ActivityScheduleUpsertResult> ActivityScheduleUpsert (Guid? gUID, bool? isDeleted, int? doW, TimeSpan? startTime, TimeSpan? endTime, Guid? activityTypeGUID, Guid? serviceProviderGUID, Guid? systemUserGUID, bool? returnResults)
		{
			ActivityScheduleUpsertParameters p = new ActivityScheduleUpsertParameters()
			{
				GUID = gUID
				, IsDeleted = isDeleted
				, DoW = doW
				, StartTime = startTime
				, EndTime = endTime
				, ActivityTypeGUID = activityTypeGUID
				, ServiceProviderGUID = serviceProviderGUID
				, SystemUserGUID = systemUserGUID
				, ReturnResults = returnResults

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.ActivityScheduleUpsert(parameters);
			List<ActivityScheduleUpsertResult> result = JsonConvert.DeserializeObject<List<ActivityScheduleUpsertResult>>(resultStr);
			return result;
		}
		public static List<ActivityScheduleGetResult> ActivityScheduleGet (Guid? activityScheduleGUID, Guid? systemUserGUID)
		{
			ActivityScheduleGetParameters p = new ActivityScheduleGetParameters()
			{
				ActivityScheduleGUID = activityScheduleGUID
				, SystemUserGUID = systemUserGUID

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.ActivityScheduleGet(parameters);
			List<ActivityScheduleGetResult> result = JsonConvert.DeserializeObject<List<ActivityScheduleGetResult>>(resultStr);
			return result;
		}
		public static List<StoreUpsertResult> StoreUpsert (Guid? gUID, bool? isDeleted, DateTime? activeDateTime, DateTime? terminationDateTime, string storeName, Guid? accountGUID, Guid? systemUserGUID, bool? returnResults)
		{
			StoreUpsertParameters p = new StoreUpsertParameters()
			{
				GUID = gUID
				, IsDeleted = isDeleted
				, ActiveDateTime = activeDateTime
				, TerminationDateTime = terminationDateTime
				, StoreName = storeName
				, AccountGUID = accountGUID
				, SystemUserGUID = systemUserGUID
				, ReturnResults = returnResults

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.StoreUpsert(parameters);
			List<StoreUpsertResult> result = JsonConvert.DeserializeObject<List<StoreUpsertResult>>(resultStr);
			return result;
		}
		public static List<StoreGetResult> StoreGet (Guid? storeGUID, Guid? systemUserGUID)
		{
			StoreGetParameters p = new StoreGetParameters()
			{
				StoreGUID = storeGUID
				, SystemUserGUID = systemUserGUID

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.StoreGet(parameters);
			List<StoreGetResult> result = JsonConvert.DeserializeObject<List<StoreGetResult>>(resultStr);
			return result;
		}
		public static List<PermissionUpsertResult> PermissionUpsert (Guid? gUID, bool? isDeleted, string permission, Guid? systemUserGUID, bool? returnResults)
		{
			PermissionUpsertParameters p = new PermissionUpsertParameters()
			{
				GUID = gUID
				, IsDeleted = isDeleted
				, Permission = permission
				, SystemUserGUID = systemUserGUID
				, ReturnResults = returnResults

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.PermissionUpsert(parameters);
			List<PermissionUpsertResult> result = JsonConvert.DeserializeObject<List<PermissionUpsertResult>>(resultStr);
			return result;
		}
		public static List<PermissionGetResult> PermissionGet (Guid? permissionGUID, Guid? systemUserGUID)
		{
			PermissionGetParameters p = new PermissionGetParameters()
			{
				PermissionGUID = permissionGUID
				, SystemUserGUID = systemUserGUID

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.PermissionGet(parameters);
			List<PermissionGetResult> result = JsonConvert.DeserializeObject<List<PermissionGetResult>>(resultStr);
			return result;
		}
		public static List<SystemUserPermissionUpsertResult> SystemUserPermissionUpsert (Guid? gUID, bool? isDeleted, DateTime? activeDateTime, DateTime? terminationDateTime, Guid? forSystemUserGUID, Guid? permissionGUID, Guid? systemUserGUID, bool? returnResults)
		{
			SystemUserPermissionUpsertParameters p = new SystemUserPermissionUpsertParameters()
			{
				GUID = gUID
				, IsDeleted = isDeleted
				, ActiveDateTime = activeDateTime
				, TerminationDateTime = terminationDateTime
				, ForSystemUserGUID = forSystemUserGUID
				, PermissionGUID = permissionGUID
				, SystemUserGUID = systemUserGUID
				, ReturnResults = returnResults

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.SystemUserPermissionUpsert(parameters);
			List<SystemUserPermissionUpsertResult> result = JsonConvert.DeserializeObject<List<SystemUserPermissionUpsertResult>>(resultStr);
			return result;
		}
		public static List<SystemUserPermissionGetResult> SystemUserPermissionGet (Guid? systemUserPermissionGUID, Guid? systemUserGUID)
		{
			SystemUserPermissionGetParameters p = new SystemUserPermissionGetParameters()
			{
				SystemUserPermissionGUID = systemUserPermissionGUID
				, SystemUserGUID = systemUserGUID

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.SystemUserPermissionGet(parameters);
			List<SystemUserPermissionGetResult> result = JsonConvert.DeserializeObject<List<SystemUserPermissionGetResult>>(resultStr);
			return result;
		}
		public static List<SystemUserGroupUpsertResult> SystemUserGroupUpsert (Guid? gUID, bool? isDeleted, DateTime? activeDateTime, DateTime? terminationDateTime, string description, Guid? systemUserGUID, bool? returnResults)
		{
			SystemUserGroupUpsertParameters p = new SystemUserGroupUpsertParameters()
			{
				GUID = gUID
				, IsDeleted = isDeleted
				, ActiveDateTime = activeDateTime
				, TerminationDateTime = terminationDateTime
				, Description = description
				, SystemUserGUID = systemUserGUID
				, ReturnResults = returnResults

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.SystemUserGroupUpsert(parameters);
			List<SystemUserGroupUpsertResult> result = JsonConvert.DeserializeObject<List<SystemUserGroupUpsertResult>>(resultStr);
			return result;
		}
		public static List<SystemUserGroupGetResult> SystemUserGroupGet (Guid? systemUserGroupGUID, Guid? systemUserGUID)
		{
			SystemUserGroupGetParameters p = new SystemUserGroupGetParameters()
			{
				SystemUserGroupGUID = systemUserGroupGUID
				, SystemUserGUID = systemUserGUID

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.SystemUserGroupGet(parameters);
			List<SystemUserGroupGetResult> result = JsonConvert.DeserializeObject<List<SystemUserGroupGetResult>>(resultStr);
			return result;
		}
		public static List<SystemUserGroupPermissionUpsertResult> SystemUserGroupPermissionUpsert (Guid? gUID, bool? isDeleted, DateTime? activeDateTime, DateTime? terminationDateTime, Guid? permissionGUID, Guid? systemUserGroupGUID, Guid? systemUserGUID, bool? returnResults)
		{
			SystemUserGroupPermissionUpsertParameters p = new SystemUserGroupPermissionUpsertParameters()
			{
				GUID = gUID
				, IsDeleted = isDeleted
				, ActiveDateTime = activeDateTime
				, TerminationDateTime = terminationDateTime
				, PermissionGUID = permissionGUID
				, SystemUserGroupGUID = systemUserGroupGUID
				, SystemUserGUID = systemUserGUID
				, ReturnResults = returnResults

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.SystemUserGroupPermissionUpsert(parameters);
			List<SystemUserGroupPermissionUpsertResult> result = JsonConvert.DeserializeObject<List<SystemUserGroupPermissionUpsertResult>>(resultStr);
			return result;
		}
		public static List<AuditLogUpsertResult> AuditLogUpsert (Guid? gUID, string source, string tableName, string beforeSnapshot, string afterSnapshot, Guid? tableGUID, Guid? systemUserGUID, bool? returnResults)
		{
			AuditLogUpsertParameters p = new AuditLogUpsertParameters()
			{
				GUID = gUID
				, Source = source
				, TableName = tableName
				, BeforeSnapshot = beforeSnapshot
				, AfterSnapshot = afterSnapshot
				, TableGUID = tableGUID
				, SystemUserGUID = systemUserGUID
				, ReturnResults = returnResults

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.AuditLogUpsert(parameters);
			List<AuditLogUpsertResult> result = JsonConvert.DeserializeObject<List<AuditLogUpsertResult>>(resultStr);
			return result;
		}
		public static List<SystemUserGroupPermissionGetResult> SystemUserGroupPermissionGet (Guid? systemUserGroupPermissionGUID, Guid? systemUserGUID)
		{
			SystemUserGroupPermissionGetParameters p = new SystemUserGroupPermissionGetParameters()
			{
				SystemUserGroupPermissionGUID = systemUserGroupPermissionGUID
				, SystemUserGUID = systemUserGUID

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.SystemUserGroupPermissionGet(parameters);
			List<SystemUserGroupPermissionGetResult> result = JsonConvert.DeserializeObject<List<SystemUserGroupPermissionGetResult>>(resultStr);
			return result;
		}
		public static List<TesterResult> Tester (string first,  ref string second)
		{
			TesterParameters p = new TesterParameters()
			{
				First = first
				, Second = second

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.Tester(parameters);
			List<TesterResult> result = JsonConvert.DeserializeObject<List<TesterResult>>(resultStr);
			return result;
		}
		public static List<AccountToXMLResult> AccountToXML (string gUIDS)
		{
			AccountToXMLParameters p = new AccountToXMLParameters()
			{
				GUIDS = gUIDS

			};
			
			string parameters = JsonConvert.SerializeObject(p);
			string resultStr = Service.AccountToXML(parameters);
			List<AccountToXMLResult> result = JsonConvert.DeserializeObject<List<AccountToXMLResult>>(resultStr);
			return result;
		}
     }
}
