//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using AppointmentLibrary.Calls;
using AppointmentLibrary.Parameters;
using AppointmentLibrary.ProcResults;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.ServiceModel.Web;
using System.Text;
using System.Threading.Tasks;
using System.Web;
using System.Web.Configuration;

namespace HostedService
    {
        public class AppointmentService : IAppointmentService
        {
            public string ConnectionString { get; set; }

            public bool ReturnExceptionMessage
            {
                get
                {
                    return bool.Parse(WebConfigurationManager.AppSettings["ReturnExceptionMessage"]);
                }
            }

            public AppointmentService()
            {
                this.ConnectionString = WebConfigurationManager.AppSettings["ConnectionString"];
                //ReturnExceptionMessage = false;
            }


            public AppointmentService(string connectionString)
            {
                this.ConnectionString = connectionString;
            }
			public string CreateUpsert(string parameters)
			{
				try
				{
				    spCreateUpsertParameters casted = JsonConvert.DeserializeObject<spCreateUpsertParameters> (parameters);
				    List<CreateUpsertResult> result = Calls.spCreateUpsertCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string SystemUserUpsert(string parameters)
			{
				try
				{
				    spSystemUserUpsertParameters casted = JsonConvert.DeserializeObject<spSystemUserUpsertParameters> (parameters);
				    List<SystemUserUpsertResult> result = Calls.spSystemUserUpsertCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string SystemUserGet(string parameters)
			{
				try
				{
				    spSystemUserGetParameters casted = JsonConvert.DeserializeObject<spSystemUserGetParameters> (parameters);
				    List<SystemUserGetResult> result = Calls.spSystemUserGetCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string GetChildren(string parameters)
			{
				try
				{
				    spGetChildrenParameters casted = JsonConvert.DeserializeObject<spGetChildrenParameters> (parameters);
				    List<GetChildrenResult> result = Calls.spGetChildrenCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string CreateToXml(string parameters)
			{
				try
				{
				    spCreateToXmlParameters casted = JsonConvert.DeserializeObject<spCreateToXmlParameters> (parameters);
				    List<CreateToXmlResult> result = Calls.spCreateToXmlCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string AccountUpsert(string parameters)
			{
				try
				{
				    spAccountUpsertParameters casted = JsonConvert.DeserializeObject<spAccountUpsertParameters> (parameters);
				    List<AccountUpsertResult> result = Calls.spAccountUpsertCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string AccountGet(string parameters)
			{
				try
				{
				    spAccountGetParameters casted = JsonConvert.DeserializeObject<spAccountGetParameters> (parameters);
				    List<AccountGetResult> result = Calls.spAccountGetCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string ActivityTypeUpsert(string parameters)
			{
				try
				{
				    spActivityTypeUpsertParameters casted = JsonConvert.DeserializeObject<spActivityTypeUpsertParameters> (parameters);
				    List<ActivityTypeUpsertResult> result = Calls.spActivityTypeUpsertCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string ActivityTypeGet(string parameters)
			{
				try
				{
				    spActivityTypeGetParameters casted = JsonConvert.DeserializeObject<spActivityTypeGetParameters> (parameters);
				    List<ActivityTypeGetResult> result = Calls.spActivityTypeGetCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string AppointmentUpsert(string parameters)
			{
				try
				{
				    spAppointmentUpsertParameters casted = JsonConvert.DeserializeObject<spAppointmentUpsertParameters> (parameters);
				    List<AppointmentUpsertResult> result = Calls.spAppointmentUpsertCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string AppointmentGet(string parameters)
			{
				try
				{
				    spAppointmentGetParameters casted = JsonConvert.DeserializeObject<spAppointmentGetParameters> (parameters);
				    List<AppointmentGetResult> result = Calls.spAppointmentGetCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string Login(string parameters)
			{
				try
				{
				    spLoginParameters casted = JsonConvert.DeserializeObject<spLoginParameters> (parameters);
				    List<LoginResult> result = Calls.spLoginCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string ServiceProviderUpsert(string parameters)
			{
				try
				{
				    spServiceProviderUpsertParameters casted = JsonConvert.DeserializeObject<spServiceProviderUpsertParameters> (parameters);
				    List<ServiceProviderUpsertResult> result = Calls.spServiceProviderUpsertCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string ServiceProviderGet(string parameters)
			{
				try
				{
				    spServiceProviderGetParameters casted = JsonConvert.DeserializeObject<spServiceProviderGetParameters> (parameters);
				    List<ServiceProviderGetResult> result = Calls.spServiceProviderGetCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string CustomerUpsert(string parameters)
			{
				try
				{
				    spCustomerUpsertParameters casted = JsonConvert.DeserializeObject<spCustomerUpsertParameters> (parameters);
				    List<CustomerUpsertResult> result = Calls.spCustomerUpsertCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string CustomerGet(string parameters)
			{
				try
				{
				    spCustomerGetParameters casted = JsonConvert.DeserializeObject<spCustomerGetParameters> (parameters);
				    List<CustomerGetResult> result = Calls.spCustomerGetCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string ActivityScheduleUpsert(string parameters)
			{
				try
				{
				    spActivityScheduleUpsertParameters casted = JsonConvert.DeserializeObject<spActivityScheduleUpsertParameters> (parameters);
				    List<ActivityScheduleUpsertResult> result = Calls.spActivityScheduleUpsertCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string ActivityScheduleGet(string parameters)
			{
				try
				{
				    spActivityScheduleGetParameters casted = JsonConvert.DeserializeObject<spActivityScheduleGetParameters> (parameters);
				    List<ActivityScheduleGetResult> result = Calls.spActivityScheduleGetCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string StoreUpsert(string parameters)
			{
				try
				{
				    spStoreUpsertParameters casted = JsonConvert.DeserializeObject<spStoreUpsertParameters> (parameters);
				    List<StoreUpsertResult> result = Calls.spStoreUpsertCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string StoreGet(string parameters)
			{
				try
				{
				    spStoreGetParameters casted = JsonConvert.DeserializeObject<spStoreGetParameters> (parameters);
				    List<StoreGetResult> result = Calls.spStoreGetCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string AccountToXML(string parameters)
			{
				try
				{
				    spAccountToXMLParameters casted = JsonConvert.DeserializeObject<spAccountToXMLParameters> (parameters);
				    List<AccountToXMLResult> result = Calls.spAccountToXMLCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string AccountToXMLByDateTime(string parameters)
			{
				try
				{
				    spAccountToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<spAccountToXMLByDateTimeParameters> (parameters);
				    List<AccountToXMLByDateTimeResult> result = Calls.spAccountToXMLByDateTimeCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string ActivityTypeToXML(string parameters)
			{
				try
				{
				    spActivityTypeToXMLParameters casted = JsonConvert.DeserializeObject<spActivityTypeToXMLParameters> (parameters);
				    List<ActivityTypeToXMLResult> result = Calls.spActivityTypeToXMLCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string ActivityTypeToXMLByDateTime(string parameters)
			{
				try
				{
				    spActivityTypeToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<spActivityTypeToXMLByDateTimeParameters> (parameters);
				    List<ActivityTypeToXMLByDateTimeResult> result = Calls.spActivityTypeToXMLByDateTimeCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string AppointmentToXML(string parameters)
			{
				try
				{
				    spAppointmentToXMLParameters casted = JsonConvert.DeserializeObject<spAppointmentToXMLParameters> (parameters);
				    List<AppointmentToXMLResult> result = Calls.spAppointmentToXMLCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string AppointmentToXMLByDateTime(string parameters)
			{
				try
				{
				    spAppointmentToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<spAppointmentToXMLByDateTimeParameters> (parameters);
				    List<AppointmentToXMLByDateTimeResult> result = Calls.spAppointmentToXMLByDateTimeCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string ServiceProviderToXML(string parameters)
			{
				try
				{
				    spServiceProviderToXMLParameters casted = JsonConvert.DeserializeObject<spServiceProviderToXMLParameters> (parameters);
				    List<ServiceProviderToXMLResult> result = Calls.spServiceProviderToXMLCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string ServiceProviderToXMLByDateTime(string parameters)
			{
				try
				{
				    spServiceProviderToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<spServiceProviderToXMLByDateTimeParameters> (parameters);
				    List<ServiceProviderToXMLByDateTimeResult> result = Calls.spServiceProviderToXMLByDateTimeCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string CustomerToXML(string parameters)
			{
				try
				{
				    spCustomerToXMLParameters casted = JsonConvert.DeserializeObject<spCustomerToXMLParameters> (parameters);
				    List<CustomerToXMLResult> result = Calls.spCustomerToXMLCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string CustomerToXMLByDateTime(string parameters)
			{
				try
				{
				    spCustomerToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<spCustomerToXMLByDateTimeParameters> (parameters);
				    List<CustomerToXMLByDateTimeResult> result = Calls.spCustomerToXMLByDateTimeCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string ActivityScheduleToXML(string parameters)
			{
				try
				{
				    spActivityScheduleToXMLParameters casted = JsonConvert.DeserializeObject<spActivityScheduleToXMLParameters> (parameters);
				    List<ActivityScheduleToXMLResult> result = Calls.spActivityScheduleToXMLCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string ActivityScheduleToXMLByDateTime(string parameters)
			{
				try
				{
				    spActivityScheduleToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<spActivityScheduleToXMLByDateTimeParameters> (parameters);
				    List<ActivityScheduleToXMLByDateTimeResult> result = Calls.spActivityScheduleToXMLByDateTimeCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string StoreToXML(string parameters)
			{
				try
				{
				    spStoreToXMLParameters casted = JsonConvert.DeserializeObject<spStoreToXMLParameters> (parameters);
				    List<StoreToXMLResult> result = Calls.spStoreToXMLCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string StoreToXMLByDateTime(string parameters)
			{
				try
				{
				    spStoreToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<spStoreToXMLByDateTimeParameters> (parameters);
				    List<StoreToXMLByDateTimeResult> result = Calls.spStoreToXMLByDateTimeCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string AuditLogUpsert(string parameters)
			{
				try
				{
				    spAuditLogUpsertParameters casted = JsonConvert.DeserializeObject<spAuditLogUpsertParameters> (parameters);
				    List<AuditLogUpsertResult> result = Calls.spAuditLogUpsertCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
     }
}
