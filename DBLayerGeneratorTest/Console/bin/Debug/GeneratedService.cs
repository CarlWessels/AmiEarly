//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using AppointmentLibrary.Calls;
using AppointmentLibrary.Parameters;
using AppointmentLibrary.ProcResults;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.ServiceModel.Web;
using System.Text;
using System.Threading.Tasks;
using System.Web;
using System.Web.Configuration;

namespace HostedService
    {
        public partial class AppointmentService : IAppointmentService
        {
            public string ConnectionString { get; set; }

            public bool ReturnExceptionMessage
            {
                get
                {
                    return bool.Parse(WebConfigurationManager.AppSettings["ReturnExceptionMessage"]);
                }
            }

            public AppointmentService()
            {
                this.ConnectionString = WebConfigurationManager.AppSettings["ConnectionString"];
                //ReturnExceptionMessage = false;
            }


            public AppointmentService(string connectionString)
            {
                this.ConnectionString = connectionString;
            }
			public string CustomerAddressToXML(string parameters)
			{
				try
				{
				    CustomerAddressToXMLParameters casted = JsonConvert.DeserializeObject<CustomerAddressToXMLParameters> (parameters);
				    List<CustomerAddressToXMLResult> result = Calls.spCustomerAddressToXMLCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string CustomerAddressToXMLByDateTime(string parameters)
			{
				try
				{
				    CustomerAddressToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<CustomerAddressToXMLByDateTimeParameters> (parameters);
				    List<CustomerAddressToXMLByDateTimeResult> result = Calls.spCustomerAddressToXMLByDateTimeCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string StoreUpsert(string parameters)
			{
				try
				{
				    StoreUpsertParameters casted = JsonConvert.DeserializeObject<StoreUpsertParameters> (parameters);
				    List<StoreUpsertResult> result = Calls.spStoreUpsertCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string StoreGet(string parameters)
			{
				try
				{
				    StoreGetParameters casted = JsonConvert.DeserializeObject<StoreGetParameters> (parameters);
				    List<StoreGetResult> result = Calls.spStoreGetCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string StoreToXML(string parameters)
			{
				try
				{
				    StoreToXMLParameters casted = JsonConvert.DeserializeObject<StoreToXMLParameters> (parameters);
				    List<StoreToXMLResult> result = Calls.spStoreToXMLCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string StoreToXMLByDateTime(string parameters)
			{
				try
				{
				    StoreToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<StoreToXMLByDateTimeParameters> (parameters);
				    List<StoreToXMLByDateTimeResult> result = Calls.spStoreToXMLByDateTimeCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string RefreshTokenNoReturn(string parameters)
			{
				try
				{
				    RefreshTokenNoReturnParameters casted = JsonConvert.DeserializeObject<RefreshTokenNoReturnParameters> (parameters);
				    List<RefreshTokenNoReturnResult> result = Calls.spRefreshTokenNoReturnCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string LUPermissionUpsert(string parameters)
			{
				try
				{
				    LUPermissionUpsertParameters casted = JsonConvert.DeserializeObject<LUPermissionUpsertParameters> (parameters);
				    List<LUPermissionUpsertResult> result = Calls.spLUPermissionUpsertCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string LUPermissionGet(string parameters)
			{
				try
				{
				    LUPermissionGetParameters casted = JsonConvert.DeserializeObject<LUPermissionGetParameters> (parameters);
				    List<LUPermissionGetResult> result = Calls.spLUPermissionGetCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string LUPermissionToXML(string parameters)
			{
				try
				{
				    LUPermissionToXMLParameters casted = JsonConvert.DeserializeObject<LUPermissionToXMLParameters> (parameters);
				    List<LUPermissionToXMLResult> result = Calls.spLUPermissionToXMLCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string LUPermissionToXMLByDateTime(string parameters)
			{
				try
				{
				    LUPermissionToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<LUPermissionToXMLByDateTimeParameters> (parameters);
				    List<LUPermissionToXMLByDateTimeResult> result = Calls.spLUPermissionToXMLByDateTimeCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string CreateUpsert(string parameters)
			{
				try
				{
				    CreateUpsertParameters casted = JsonConvert.DeserializeObject<CreateUpsertParameters> (parameters);
				    List<CreateUpsertResult> result = Calls.spCreateUpsertCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string SystemUserGroupUpsert(string parameters)
			{
				try
				{
				    SystemUserGroupUpsertParameters casted = JsonConvert.DeserializeObject<SystemUserGroupUpsertParameters> (parameters);
				    List<SystemUserGroupUpsertResult> result = Calls.spSystemUserGroupUpsertCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string SystemUserGroupGet(string parameters)
			{
				try
				{
				    SystemUserGroupGetParameters casted = JsonConvert.DeserializeObject<SystemUserGroupGetParameters> (parameters);
				    List<SystemUserGroupGetResult> result = Calls.spSystemUserGroupGetCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string GenerateToken(string parameters)
			{
				try
				{
				    GenerateTokenParameters casted = JsonConvert.DeserializeObject<GenerateTokenParameters> (parameters);
				    List<GenerateTokenResult> result = Calls.spGenerateTokenCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string SystemUserUpsert(string parameters)
			{
				try
				{
				    SystemUserUpsertParameters casted = JsonConvert.DeserializeObject<SystemUserUpsertParameters> (parameters);
				    List<SystemUserUpsertResult> result = Calls.spSystemUserUpsertCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string SystemUserGroupToXML(string parameters)
			{
				try
				{
				    SystemUserGroupToXMLParameters casted = JsonConvert.DeserializeObject<SystemUserGroupToXMLParameters> (parameters);
				    List<SystemUserGroupToXMLResult> result = Calls.spSystemUserGroupToXMLCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string SystemUserGet(string parameters)
			{
				try
				{
				    SystemUserGetParameters casted = JsonConvert.DeserializeObject<SystemUserGetParameters> (parameters);
				    List<SystemUserGetResult> result = Calls.spSystemUserGetCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string SystemUserGroupToXMLByDateTime(string parameters)
			{
				try
				{
				    SystemUserGroupToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<SystemUserGroupToXMLByDateTimeParameters> (parameters);
				    List<SystemUserGroupToXMLByDateTimeResult> result = Calls.spSystemUserGroupToXMLByDateTimeCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string SystemUserGroupPermissionUpsert(string parameters)
			{
				try
				{
				    SystemUserGroupPermissionUpsertParameters casted = JsonConvert.DeserializeObject<SystemUserGroupPermissionUpsertParameters> (parameters);
				    List<SystemUserGroupPermissionUpsertResult> result = Calls.spSystemUserGroupPermissionUpsertCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string RefreshToken(string parameters)
			{
				try
				{
				    RefreshTokenParameters casted = JsonConvert.DeserializeObject<RefreshTokenParameters> (parameters);
				    List<RefreshTokenResult> result = Calls.spRefreshTokenCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string SystemUserGroupPermissionGet(string parameters)
			{
				try
				{
				    SystemUserGroupPermissionGetParameters casted = JsonConvert.DeserializeObject<SystemUserGroupPermissionGetParameters> (parameters);
				    List<SystemUserGroupPermissionGetResult> result = Calls.spSystemUserGroupPermissionGetCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string SystemUserGroupPermissionToXML(string parameters)
			{
				try
				{
				    SystemUserGroupPermissionToXMLParameters casted = JsonConvert.DeserializeObject<SystemUserGroupPermissionToXMLParameters> (parameters);
				    List<SystemUserGroupPermissionToXMLResult> result = Calls.spSystemUserGroupPermissionToXMLCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string SystemUserGroupPermissionToXMLByDateTime(string parameters)
			{
				try
				{
				    SystemUserGroupPermissionToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<SystemUserGroupPermissionToXMLByDateTimeParameters> (parameters);
				    List<SystemUserGroupPermissionToXMLByDateTimeResult> result = Calls.spSystemUserGroupPermissionToXMLByDateTimeCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string SystemUserPermissionToXML(string parameters)
			{
				try
				{
				    SystemUserPermissionToXMLParameters casted = JsonConvert.DeserializeObject<SystemUserPermissionToXMLParameters> (parameters);
				    List<SystemUserPermissionToXMLResult> result = Calls.spSystemUserPermissionToXMLCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string SystemUserPermissionToXMLByDateTime(string parameters)
			{
				try
				{
				    SystemUserPermissionToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<SystemUserPermissionToXMLByDateTimeParameters> (parameters);
				    List<SystemUserPermissionToXMLByDateTimeResult> result = Calls.spSystemUserPermissionToXMLByDateTimeCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string SystemUserGroupLineToXML(string parameters)
			{
				try
				{
				    SystemUserGroupLineToXMLParameters casted = JsonConvert.DeserializeObject<SystemUserGroupLineToXMLParameters> (parameters);
				    List<SystemUserGroupLineToXMLResult> result = Calls.spSystemUserGroupLineToXMLCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string SystemUserGroupLineToXMLByDateTime(string parameters)
			{
				try
				{
				    SystemUserGroupLineToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<SystemUserGroupLineToXMLByDateTimeParameters> (parameters);
				    List<SystemUserGroupLineToXMLByDateTimeResult> result = Calls.spSystemUserGroupLineToXMLByDateTimeCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string GetChildren(string parameters)
			{
				try
				{
				    GetChildrenParameters casted = JsonConvert.DeserializeObject<GetChildrenParameters> (parameters);
				    List<GetChildrenResult> result = Calls.spGetChildrenCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string HasPermission(string parameters)
			{
				try
				{
				    HasPermissionParameters casted = JsonConvert.DeserializeObject<HasPermissionParameters> (parameters);
				    List<HasPermissionResult> result = Calls.spHasPermissionCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string CreateToXml(string parameters)
			{
				try
				{
				    CreateToXmlParameters casted = JsonConvert.DeserializeObject<CreateToXmlParameters> (parameters);
				    List<CreateToXmlResult> result = Calls.spCreateToXmlCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string SystemUserPermissionUpsert(string parameters)
			{
				try
				{
				    SystemUserPermissionUpsertParameters casted = JsonConvert.DeserializeObject<SystemUserPermissionUpsertParameters> (parameters);
				    List<SystemUserPermissionUpsertResult> result = Calls.spSystemUserPermissionUpsertCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string SystemUserPermissionGet(string parameters)
			{
				try
				{
				    SystemUserPermissionGetParameters casted = JsonConvert.DeserializeObject<SystemUserPermissionGetParameters> (parameters);
				    List<SystemUserPermissionGetResult> result = Calls.spSystemUserPermissionGetCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string Login(string parameters)
			{
				try
				{
				    LoginParameters casted = JsonConvert.DeserializeObject<LoginParameters> (parameters);
				    List<LoginResult> result = Calls.spLoginCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string GenerateTokenNoReturn(string parameters)
			{
				try
				{
				    GenerateTokenNoReturnParameters casted = JsonConvert.DeserializeObject<GenerateTokenNoReturnParameters> (parameters);
				    List<GenerateTokenNoReturnResult> result = Calls.spGenerateTokenNoReturnCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string AccountUpsert(string parameters)
			{
				try
				{
				    AccountUpsertParameters casted = JsonConvert.DeserializeObject<AccountUpsertParameters> (parameters);
				    List<AccountUpsertResult> result = Calls.spAccountUpsertCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string AccountGet(string parameters)
			{
				try
				{
				    AccountGetParameters casted = JsonConvert.DeserializeObject<AccountGetParameters> (parameters);
				    List<AccountGetResult> result = Calls.spAccountGetCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string AccountToXML(string parameters)
			{
				try
				{
				    AccountToXMLParameters casted = JsonConvert.DeserializeObject<AccountToXMLParameters> (parameters);
				    List<AccountToXMLResult> result = Calls.spAccountToXMLCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string AccountToXMLByDateTime(string parameters)
			{
				try
				{
				    AccountToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<AccountToXMLByDateTimeParameters> (parameters);
				    List<AccountToXMLByDateTimeResult> result = Calls.spAccountToXMLByDateTimeCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string ActivityScheduleUpsert(string parameters)
			{
				try
				{
				    ActivityScheduleUpsertParameters casted = JsonConvert.DeserializeObject<ActivityScheduleUpsertParameters> (parameters);
				    List<ActivityScheduleUpsertResult> result = Calls.spActivityScheduleUpsertCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string ActivityScheduleGet(string parameters)
			{
				try
				{
				    ActivityScheduleGetParameters casted = JsonConvert.DeserializeObject<ActivityScheduleGetParameters> (parameters);
				    List<ActivityScheduleGetResult> result = Calls.spActivityScheduleGetCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string ActivityScheduleToXML(string parameters)
			{
				try
				{
				    ActivityScheduleToXMLParameters casted = JsonConvert.DeserializeObject<ActivityScheduleToXMLParameters> (parameters);
				    List<ActivityScheduleToXMLResult> result = Calls.spActivityScheduleToXMLCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string ActivityScheduleToXMLByDateTime(string parameters)
			{
				try
				{
				    ActivityScheduleToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<ActivityScheduleToXMLByDateTimeParameters> (parameters);
				    List<ActivityScheduleToXMLByDateTimeResult> result = Calls.spActivityScheduleToXMLByDateTimeCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string LUActivityTypeUpsert(string parameters)
			{
				try
				{
				    LUActivityTypeUpsertParameters casted = JsonConvert.DeserializeObject<LUActivityTypeUpsertParameters> (parameters);
				    List<LUActivityTypeUpsertResult> result = Calls.spLUActivityTypeUpsertCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string LUActivityTypeGet(string parameters)
			{
				try
				{
				    LUActivityTypeGetParameters casted = JsonConvert.DeserializeObject<LUActivityTypeGetParameters> (parameters);
				    List<LUActivityTypeGetResult> result = Calls.spLUActivityTypeGetCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string LUActivityTypeToXML(string parameters)
			{
				try
				{
				    LUActivityTypeToXMLParameters casted = JsonConvert.DeserializeObject<LUActivityTypeToXMLParameters> (parameters);
				    List<LUActivityTypeToXMLResult> result = Calls.spLUActivityTypeToXMLCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string LUActivityTypeToXMLByDateTime(string parameters)
			{
				try
				{
				    LUActivityTypeToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<LUActivityTypeToXMLByDateTimeParameters> (parameters);
				    List<LUActivityTypeToXMLByDateTimeResult> result = Calls.spLUActivityTypeToXMLByDateTimeCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string LUAddressTypeUpsert(string parameters)
			{
				try
				{
				    LUAddressTypeUpsertParameters casted = JsonConvert.DeserializeObject<LUAddressTypeUpsertParameters> (parameters);
				    List<LUAddressTypeUpsertResult> result = Calls.spLUAddressTypeUpsertCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string AuditLogUpsert(string parameters)
			{
				try
				{
				    AuditLogUpsertParameters casted = JsonConvert.DeserializeObject<AuditLogUpsertParameters> (parameters);
				    List<AuditLogUpsertResult> result = Calls.spAuditLogUpsertCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string LUAddressTypeGet(string parameters)
			{
				try
				{
				    LUAddressTypeGetParameters casted = JsonConvert.DeserializeObject<LUAddressTypeGetParameters> (parameters);
				    List<LUAddressTypeGetResult> result = Calls.spLUAddressTypeGetCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string LUAddressTypeToXML(string parameters)
			{
				try
				{
				    LUAddressTypeToXMLParameters casted = JsonConvert.DeserializeObject<LUAddressTypeToXMLParameters> (parameters);
				    List<LUAddressTypeToXMLResult> result = Calls.spLUAddressTypeToXMLCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string LUAddressTypeToXMLByDateTime(string parameters)
			{
				try
				{
				    LUAddressTypeToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<LUAddressTypeToXMLByDateTimeParameters> (parameters);
				    List<LUAddressTypeToXMLByDateTimeResult> result = Calls.spLUAddressTypeToXMLByDateTimeCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string AppointmentUpsert(string parameters)
			{
				try
				{
				    AppointmentUpsertParameters casted = JsonConvert.DeserializeObject<AppointmentUpsertParameters> (parameters);
				    List<AppointmentUpsertResult> result = Calls.spAppointmentUpsertCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string AppointmentGet(string parameters)
			{
				try
				{
				    AppointmentGetParameters casted = JsonConvert.DeserializeObject<AppointmentGetParameters> (parameters);
				    List<AppointmentGetResult> result = Calls.spAppointmentGetCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string AppointmentToXML(string parameters)
			{
				try
				{
				    AppointmentToXMLParameters casted = JsonConvert.DeserializeObject<AppointmentToXMLParameters> (parameters);
				    List<AppointmentToXMLResult> result = Calls.spAppointmentToXMLCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string AppointmentToXMLByDateTime(string parameters)
			{
				try
				{
				    AppointmentToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<AppointmentToXMLByDateTimeParameters> (parameters);
				    List<AppointmentToXMLByDateTimeResult> result = Calls.spAppointmentToXMLByDateTimeCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string ServiceProviderUpsert(string parameters)
			{
				try
				{
				    ServiceProviderUpsertParameters casted = JsonConvert.DeserializeObject<ServiceProviderUpsertParameters> (parameters);
				    List<ServiceProviderUpsertResult> result = Calls.spServiceProviderUpsertCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string ServiceProviderGet(string parameters)
			{
				try
				{
				    ServiceProviderGetParameters casted = JsonConvert.DeserializeObject<ServiceProviderGetParameters> (parameters);
				    List<ServiceProviderGetResult> result = Calls.spServiceProviderGetCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string ServiceProviderToXML(string parameters)
			{
				try
				{
				    ServiceProviderToXMLParameters casted = JsonConvert.DeserializeObject<ServiceProviderToXMLParameters> (parameters);
				    List<ServiceProviderToXMLResult> result = Calls.spServiceProviderToXMLCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string ServiceProviderToXMLByDateTime(string parameters)
			{
				try
				{
				    ServiceProviderToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<ServiceProviderToXMLByDateTimeParameters> (parameters);
				    List<ServiceProviderToXMLByDateTimeResult> result = Calls.spServiceProviderToXMLByDateTimeCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string CustomerUpsert(string parameters)
			{
				try
				{
				    CustomerUpsertParameters casted = JsonConvert.DeserializeObject<CustomerUpsertParameters> (parameters);
				    List<CustomerUpsertResult> result = Calls.spCustomerUpsertCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string CustomerGet(string parameters)
			{
				try
				{
				    CustomerGetParameters casted = JsonConvert.DeserializeObject<CustomerGetParameters> (parameters);
				    List<CustomerGetResult> result = Calls.spCustomerGetCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string CustomerToXML(string parameters)
			{
				try
				{
				    CustomerToXMLParameters casted = JsonConvert.DeserializeObject<CustomerToXMLParameters> (parameters);
				    List<CustomerToXMLResult> result = Calls.spCustomerToXMLCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string CustomerToXMLByDateTime(string parameters)
			{
				try
				{
				    CustomerToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<CustomerToXMLByDateTimeParameters> (parameters);
				    List<CustomerToXMLByDateTimeResult> result = Calls.spCustomerToXMLByDateTimeCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string CustomerAddressUpsert(string parameters)
			{
				try
				{
				    CustomerAddressUpsertParameters casted = JsonConvert.DeserializeObject<CustomerAddressUpsertParameters> (parameters);
				    List<CustomerAddressUpsertResult> result = Calls.spCustomerAddressUpsertCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string CustomerAddressGet(string parameters)
			{
				try
				{
				    CustomerAddressGetParameters casted = JsonConvert.DeserializeObject<CustomerAddressGetParameters> (parameters);
				    List<CustomerAddressGetResult> result = Calls.spCustomerAddressGetCall(casted, ConnectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (ReturnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
     }
}
