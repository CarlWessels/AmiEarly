//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ApplicationClient.AppointmentService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AppointmentService.IAppointmentService")]
    public interface IAppointmentService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/CustomerGet", ReplyAction="http://tempuri.org/IAppointmentService/CustomerGetResponse")]
        string CustomerGet(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/CustomerGet", ReplyAction="http://tempuri.org/IAppointmentService/CustomerGetResponse")]
        System.Threading.Tasks.Task<string> CustomerGetAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/CustomerToXML", ReplyAction="http://tempuri.org/IAppointmentService/CustomerToXMLResponse")]
        string CustomerToXML(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/CustomerToXML", ReplyAction="http://tempuri.org/IAppointmentService/CustomerToXMLResponse")]
        System.Threading.Tasks.Task<string> CustomerToXMLAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/CustomerToXMLByDateTime", ReplyAction="http://tempuri.org/IAppointmentService/CustomerToXMLByDateTimeResponse")]
        string CustomerToXMLByDateTime(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/CustomerToXMLByDateTime", ReplyAction="http://tempuri.org/IAppointmentService/CustomerToXMLByDateTimeResponse")]
        System.Threading.Tasks.Task<string> CustomerToXMLByDateTimeAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/StoreUpsert", ReplyAction="http://tempuri.org/IAppointmentService/StoreUpsertResponse")]
        string StoreUpsert(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/StoreUpsert", ReplyAction="http://tempuri.org/IAppointmentService/StoreUpsertResponse")]
        System.Threading.Tasks.Task<string> StoreUpsertAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/StoreGet", ReplyAction="http://tempuri.org/IAppointmentService/StoreGetResponse")]
        string StoreGet(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/StoreGet", ReplyAction="http://tempuri.org/IAppointmentService/StoreGetResponse")]
        System.Threading.Tasks.Task<string> StoreGetAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/StoreToXML", ReplyAction="http://tempuri.org/IAppointmentService/StoreToXMLResponse")]
        string StoreToXML(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/StoreToXML", ReplyAction="http://tempuri.org/IAppointmentService/StoreToXMLResponse")]
        System.Threading.Tasks.Task<string> StoreToXMLAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/RefreshTokenNoReturn", ReplyAction="http://tempuri.org/IAppointmentService/RefreshTokenNoReturnResponse")]
        string RefreshTokenNoReturn(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/RefreshTokenNoReturn", ReplyAction="http://tempuri.org/IAppointmentService/RefreshTokenNoReturnResponse")]
        System.Threading.Tasks.Task<string> RefreshTokenNoReturnAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/StoreToXMLByDateTime", ReplyAction="http://tempuri.org/IAppointmentService/StoreToXMLByDateTimeResponse")]
        string StoreToXMLByDateTime(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/StoreToXMLByDateTime", ReplyAction="http://tempuri.org/IAppointmentService/StoreToXMLByDateTimeResponse")]
        System.Threading.Tasks.Task<string> StoreToXMLByDateTimeAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/PermissionUpsert", ReplyAction="http://tempuri.org/IAppointmentService/PermissionUpsertResponse")]
        string PermissionUpsert(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/PermissionUpsert", ReplyAction="http://tempuri.org/IAppointmentService/PermissionUpsertResponse")]
        System.Threading.Tasks.Task<string> PermissionUpsertAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/PermissionGet", ReplyAction="http://tempuri.org/IAppointmentService/PermissionGetResponse")]
        string PermissionGet(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/PermissionGet", ReplyAction="http://tempuri.org/IAppointmentService/PermissionGetResponse")]
        System.Threading.Tasks.Task<string> PermissionGetAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/PermissionToXML", ReplyAction="http://tempuri.org/IAppointmentService/PermissionToXMLResponse")]
        string PermissionToXML(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/PermissionToXML", ReplyAction="http://tempuri.org/IAppointmentService/PermissionToXMLResponse")]
        System.Threading.Tasks.Task<string> PermissionToXMLAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/CreateUpsert", ReplyAction="http://tempuri.org/IAppointmentService/CreateUpsertResponse")]
        string CreateUpsert(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/CreateUpsert", ReplyAction="http://tempuri.org/IAppointmentService/CreateUpsertResponse")]
        System.Threading.Tasks.Task<string> CreateUpsertAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/PermissionToXMLByDateTime", ReplyAction="http://tempuri.org/IAppointmentService/PermissionToXMLByDateTimeResponse")]
        string PermissionToXMLByDateTime(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/PermissionToXMLByDateTime", ReplyAction="http://tempuri.org/IAppointmentService/PermissionToXMLByDateTimeResponse")]
        System.Threading.Tasks.Task<string> PermissionToXMLByDateTimeAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SystemUserGroupUpsert", ReplyAction="http://tempuri.org/IAppointmentService/SystemUserGroupUpsertResponse")]
        string SystemUserGroupUpsert(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SystemUserGroupUpsert", ReplyAction="http://tempuri.org/IAppointmentService/SystemUserGroupUpsertResponse")]
        System.Threading.Tasks.Task<string> SystemUserGroupUpsertAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/GenerateToken", ReplyAction="http://tempuri.org/IAppointmentService/GenerateTokenResponse")]
        string GenerateToken(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/GenerateToken", ReplyAction="http://tempuri.org/IAppointmentService/GenerateTokenResponse")]
        System.Threading.Tasks.Task<string> GenerateTokenAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SystemUserUpsert", ReplyAction="http://tempuri.org/IAppointmentService/SystemUserUpsertResponse")]
        string SystemUserUpsert(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SystemUserUpsert", ReplyAction="http://tempuri.org/IAppointmentService/SystemUserUpsertResponse")]
        System.Threading.Tasks.Task<string> SystemUserUpsertAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SystemUserGroupGet", ReplyAction="http://tempuri.org/IAppointmentService/SystemUserGroupGetResponse")]
        string SystemUserGroupGet(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SystemUserGroupGet", ReplyAction="http://tempuri.org/IAppointmentService/SystemUserGroupGetResponse")]
        System.Threading.Tasks.Task<string> SystemUserGroupGetAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SystemUserGet", ReplyAction="http://tempuri.org/IAppointmentService/SystemUserGetResponse")]
        string SystemUserGet(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SystemUserGet", ReplyAction="http://tempuri.org/IAppointmentService/SystemUserGetResponse")]
        System.Threading.Tasks.Task<string> SystemUserGetAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SystemUserGroupToXML", ReplyAction="http://tempuri.org/IAppointmentService/SystemUserGroupToXMLResponse")]
        string SystemUserGroupToXML(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SystemUserGroupToXML", ReplyAction="http://tempuri.org/IAppointmentService/SystemUserGroupToXMLResponse")]
        System.Threading.Tasks.Task<string> SystemUserGroupToXMLAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SystemUserGroupToXMLByDateTime", ReplyAction="http://tempuri.org/IAppointmentService/SystemUserGroupToXMLByDateTimeResponse")]
        string SystemUserGroupToXMLByDateTime(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SystemUserGroupToXMLByDateTime", ReplyAction="http://tempuri.org/IAppointmentService/SystemUserGroupToXMLByDateTimeResponse")]
        System.Threading.Tasks.Task<string> SystemUserGroupToXMLByDateTimeAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/RefreshToken", ReplyAction="http://tempuri.org/IAppointmentService/RefreshTokenResponse")]
        string RefreshToken(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/RefreshToken", ReplyAction="http://tempuri.org/IAppointmentService/RefreshTokenResponse")]
        System.Threading.Tasks.Task<string> RefreshTokenAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SystemUserGroupPermissionUpsert", ReplyAction="http://tempuri.org/IAppointmentService/SystemUserGroupPermissionUpsertResponse")]
        string SystemUserGroupPermissionUpsert(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SystemUserGroupPermissionUpsert", ReplyAction="http://tempuri.org/IAppointmentService/SystemUserGroupPermissionUpsertResponse")]
        System.Threading.Tasks.Task<string> SystemUserGroupPermissionUpsertAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SystemUserGroupPermissionGet", ReplyAction="http://tempuri.org/IAppointmentService/SystemUserGroupPermissionGetResponse")]
        string SystemUserGroupPermissionGet(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SystemUserGroupPermissionGet", ReplyAction="http://tempuri.org/IAppointmentService/SystemUserGroupPermissionGetResponse")]
        System.Threading.Tasks.Task<string> SystemUserGroupPermissionGetAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SystemUserGroupPermissionToXML", ReplyAction="http://tempuri.org/IAppointmentService/SystemUserGroupPermissionToXMLResponse")]
        string SystemUserGroupPermissionToXML(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SystemUserGroupPermissionToXML", ReplyAction="http://tempuri.org/IAppointmentService/SystemUserGroupPermissionToXMLResponse")]
        System.Threading.Tasks.Task<string> SystemUserGroupPermissionToXMLAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SystemUserGroupPermissionToXMLByDateTime", ReplyAction="http://tempuri.org/IAppointmentService/SystemUserGroupPermissionToXMLByDateTimeRe" +
            "sponse")]
        string SystemUserGroupPermissionToXMLByDateTime(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SystemUserGroupPermissionToXMLByDateTime", ReplyAction="http://tempuri.org/IAppointmentService/SystemUserGroupPermissionToXMLByDateTimeRe" +
            "sponse")]
        System.Threading.Tasks.Task<string> SystemUserGroupPermissionToXMLByDateTimeAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SystemUserPermissionToXML", ReplyAction="http://tempuri.org/IAppointmentService/SystemUserPermissionToXMLResponse")]
        string SystemUserPermissionToXML(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SystemUserPermissionToXML", ReplyAction="http://tempuri.org/IAppointmentService/SystemUserPermissionToXMLResponse")]
        System.Threading.Tasks.Task<string> SystemUserPermissionToXMLAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SystemUserPermissionToXMLByDateTime", ReplyAction="http://tempuri.org/IAppointmentService/SystemUserPermissionToXMLByDateTimeRespons" +
            "e")]
        string SystemUserPermissionToXMLByDateTime(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SystemUserPermissionToXMLByDateTime", ReplyAction="http://tempuri.org/IAppointmentService/SystemUserPermissionToXMLByDateTimeRespons" +
            "e")]
        System.Threading.Tasks.Task<string> SystemUserPermissionToXMLByDateTimeAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SystemUserGroupLineToXML", ReplyAction="http://tempuri.org/IAppointmentService/SystemUserGroupLineToXMLResponse")]
        string SystemUserGroupLineToXML(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SystemUserGroupLineToXML", ReplyAction="http://tempuri.org/IAppointmentService/SystemUserGroupLineToXMLResponse")]
        System.Threading.Tasks.Task<string> SystemUserGroupLineToXMLAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SystemUserGroupLineToXMLByDateTime", ReplyAction="http://tempuri.org/IAppointmentService/SystemUserGroupLineToXMLByDateTimeResponse" +
            "")]
        string SystemUserGroupLineToXMLByDateTime(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SystemUserGroupLineToXMLByDateTime", ReplyAction="http://tempuri.org/IAppointmentService/SystemUserGroupLineToXMLByDateTimeResponse" +
            "")]
        System.Threading.Tasks.Task<string> SystemUserGroupLineToXMLByDateTimeAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/GetChildren", ReplyAction="http://tempuri.org/IAppointmentService/GetChildrenResponse")]
        string GetChildren(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/GetChildren", ReplyAction="http://tempuri.org/IAppointmentService/GetChildrenResponse")]
        System.Threading.Tasks.Task<string> GetChildrenAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/CreateToXml", ReplyAction="http://tempuri.org/IAppointmentService/CreateToXmlResponse")]
        string CreateToXml(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/CreateToXml", ReplyAction="http://tempuri.org/IAppointmentService/CreateToXmlResponse")]
        System.Threading.Tasks.Task<string> CreateToXmlAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SystemUserPermissionUpsert", ReplyAction="http://tempuri.org/IAppointmentService/SystemUserPermissionUpsertResponse")]
        string SystemUserPermissionUpsert(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SystemUserPermissionUpsert", ReplyAction="http://tempuri.org/IAppointmentService/SystemUserPermissionUpsertResponse")]
        System.Threading.Tasks.Task<string> SystemUserPermissionUpsertAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SystemUserPermissionGet", ReplyAction="http://tempuri.org/IAppointmentService/SystemUserPermissionGetResponse")]
        string SystemUserPermissionGet(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SystemUserPermissionGet", ReplyAction="http://tempuri.org/IAppointmentService/SystemUserPermissionGetResponse")]
        System.Threading.Tasks.Task<string> SystemUserPermissionGetAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/Login", ReplyAction="http://tempuri.org/IAppointmentService/LoginResponse")]
        string Login(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/Login", ReplyAction="http://tempuri.org/IAppointmentService/LoginResponse")]
        System.Threading.Tasks.Task<string> LoginAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/AccountUpsert", ReplyAction="http://tempuri.org/IAppointmentService/AccountUpsertResponse")]
        string AccountUpsert(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/AccountUpsert", ReplyAction="http://tempuri.org/IAppointmentService/AccountUpsertResponse")]
        System.Threading.Tasks.Task<string> AccountUpsertAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/AccountGet", ReplyAction="http://tempuri.org/IAppointmentService/AccountGetResponse")]
        string AccountGet(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/AccountGet", ReplyAction="http://tempuri.org/IAppointmentService/AccountGetResponse")]
        System.Threading.Tasks.Task<string> AccountGetAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/AccountToXML", ReplyAction="http://tempuri.org/IAppointmentService/AccountToXMLResponse")]
        string AccountToXML(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/AccountToXML", ReplyAction="http://tempuri.org/IAppointmentService/AccountToXMLResponse")]
        System.Threading.Tasks.Task<string> AccountToXMLAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/AccountToXMLByDateTime", ReplyAction="http://tempuri.org/IAppointmentService/AccountToXMLByDateTimeResponse")]
        string AccountToXMLByDateTime(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/AccountToXMLByDateTime", ReplyAction="http://tempuri.org/IAppointmentService/AccountToXMLByDateTimeResponse")]
        System.Threading.Tasks.Task<string> AccountToXMLByDateTimeAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/AuditLogUpsert", ReplyAction="http://tempuri.org/IAppointmentService/AuditLogUpsertResponse")]
        string AuditLogUpsert(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/AuditLogUpsert", ReplyAction="http://tempuri.org/IAppointmentService/AuditLogUpsertResponse")]
        System.Threading.Tasks.Task<string> AuditLogUpsertAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/ActivityScheduleUpsert", ReplyAction="http://tempuri.org/IAppointmentService/ActivityScheduleUpsertResponse")]
        string ActivityScheduleUpsert(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/ActivityScheduleUpsert", ReplyAction="http://tempuri.org/IAppointmentService/ActivityScheduleUpsertResponse")]
        System.Threading.Tasks.Task<string> ActivityScheduleUpsertAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/ActivityScheduleGet", ReplyAction="http://tempuri.org/IAppointmentService/ActivityScheduleGetResponse")]
        string ActivityScheduleGet(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/ActivityScheduleGet", ReplyAction="http://tempuri.org/IAppointmentService/ActivityScheduleGetResponse")]
        System.Threading.Tasks.Task<string> ActivityScheduleGetAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/Tester", ReplyAction="http://tempuri.org/IAppointmentService/TesterResponse")]
        string Tester(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/Tester", ReplyAction="http://tempuri.org/IAppointmentService/TesterResponse")]
        System.Threading.Tasks.Task<string> TesterAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/ActivityScheduleToXML", ReplyAction="http://tempuri.org/IAppointmentService/ActivityScheduleToXMLResponse")]
        string ActivityScheduleToXML(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/ActivityScheduleToXML", ReplyAction="http://tempuri.org/IAppointmentService/ActivityScheduleToXMLResponse")]
        System.Threading.Tasks.Task<string> ActivityScheduleToXMLAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/ActivityScheduleToXMLByDateTime", ReplyAction="http://tempuri.org/IAppointmentService/ActivityScheduleToXMLByDateTimeResponse")]
        string ActivityScheduleToXMLByDateTime(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/ActivityScheduleToXMLByDateTime", ReplyAction="http://tempuri.org/IAppointmentService/ActivityScheduleToXMLByDateTimeResponse")]
        System.Threading.Tasks.Task<string> ActivityScheduleToXMLByDateTimeAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/ActivityTypeUpsert", ReplyAction="http://tempuri.org/IAppointmentService/ActivityTypeUpsertResponse")]
        string ActivityTypeUpsert(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/ActivityTypeUpsert", ReplyAction="http://tempuri.org/IAppointmentService/ActivityTypeUpsertResponse")]
        System.Threading.Tasks.Task<string> ActivityTypeUpsertAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/ActivityTypeGet", ReplyAction="http://tempuri.org/IAppointmentService/ActivityTypeGetResponse")]
        string ActivityTypeGet(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/ActivityTypeGet", ReplyAction="http://tempuri.org/IAppointmentService/ActivityTypeGetResponse")]
        System.Threading.Tasks.Task<string> ActivityTypeGetAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/ActivityTypeToXML", ReplyAction="http://tempuri.org/IAppointmentService/ActivityTypeToXMLResponse")]
        string ActivityTypeToXML(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/ActivityTypeToXML", ReplyAction="http://tempuri.org/IAppointmentService/ActivityTypeToXMLResponse")]
        System.Threading.Tasks.Task<string> ActivityTypeToXMLAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/ActivityTypeToXMLByDateTime", ReplyAction="http://tempuri.org/IAppointmentService/ActivityTypeToXMLByDateTimeResponse")]
        string ActivityTypeToXMLByDateTime(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/ActivityTypeToXMLByDateTime", ReplyAction="http://tempuri.org/IAppointmentService/ActivityTypeToXMLByDateTimeResponse")]
        System.Threading.Tasks.Task<string> ActivityTypeToXMLByDateTimeAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/AppointmentUpsert", ReplyAction="http://tempuri.org/IAppointmentService/AppointmentUpsertResponse")]
        string AppointmentUpsert(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/AppointmentUpsert", ReplyAction="http://tempuri.org/IAppointmentService/AppointmentUpsertResponse")]
        System.Threading.Tasks.Task<string> AppointmentUpsertAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/AppointmentGet", ReplyAction="http://tempuri.org/IAppointmentService/AppointmentGetResponse")]
        string AppointmentGet(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/AppointmentGet", ReplyAction="http://tempuri.org/IAppointmentService/AppointmentGetResponse")]
        System.Threading.Tasks.Task<string> AppointmentGetAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/AppointmentToXML", ReplyAction="http://tempuri.org/IAppointmentService/AppointmentToXMLResponse")]
        string AppointmentToXML(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/AppointmentToXML", ReplyAction="http://tempuri.org/IAppointmentService/AppointmentToXMLResponse")]
        System.Threading.Tasks.Task<string> AppointmentToXMLAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/AppointmentToXMLByDateTime", ReplyAction="http://tempuri.org/IAppointmentService/AppointmentToXMLByDateTimeResponse")]
        string AppointmentToXMLByDateTime(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/AppointmentToXMLByDateTime", ReplyAction="http://tempuri.org/IAppointmentService/AppointmentToXMLByDateTimeResponse")]
        System.Threading.Tasks.Task<string> AppointmentToXMLByDateTimeAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/ServiceProviderUpsert", ReplyAction="http://tempuri.org/IAppointmentService/ServiceProviderUpsertResponse")]
        string ServiceProviderUpsert(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/ServiceProviderUpsert", ReplyAction="http://tempuri.org/IAppointmentService/ServiceProviderUpsertResponse")]
        System.Threading.Tasks.Task<string> ServiceProviderUpsertAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/ServiceProviderGet", ReplyAction="http://tempuri.org/IAppointmentService/ServiceProviderGetResponse")]
        string ServiceProviderGet(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/ServiceProviderGet", ReplyAction="http://tempuri.org/IAppointmentService/ServiceProviderGetResponse")]
        System.Threading.Tasks.Task<string> ServiceProviderGetAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/ServiceProviderToXML", ReplyAction="http://tempuri.org/IAppointmentService/ServiceProviderToXMLResponse")]
        string ServiceProviderToXML(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/ServiceProviderToXML", ReplyAction="http://tempuri.org/IAppointmentService/ServiceProviderToXMLResponse")]
        System.Threading.Tasks.Task<string> ServiceProviderToXMLAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/ServiceProviderToXMLByDateTime", ReplyAction="http://tempuri.org/IAppointmentService/ServiceProviderToXMLByDateTimeResponse")]
        string ServiceProviderToXMLByDateTime(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/ServiceProviderToXMLByDateTime", ReplyAction="http://tempuri.org/IAppointmentService/ServiceProviderToXMLByDateTimeResponse")]
        System.Threading.Tasks.Task<string> ServiceProviderToXMLByDateTimeAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/CustomerUpsert", ReplyAction="http://tempuri.org/IAppointmentService/CustomerUpsertResponse")]
        string CustomerUpsert(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/CustomerUpsert", ReplyAction="http://tempuri.org/IAppointmentService/CustomerUpsertResponse")]
        System.Threading.Tasks.Task<string> CustomerUpsertAsync(string parameters);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAppointmentServiceChannel : ApplicationClient.AppointmentService.IAppointmentService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AppointmentServiceClient : System.ServiceModel.ClientBase<ApplicationClient.AppointmentService.IAppointmentService>, ApplicationClient.AppointmentService.IAppointmentService {
        
        public AppointmentServiceClient() {
        }
        
        public AppointmentServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AppointmentServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AppointmentServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AppointmentServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string CustomerGet(string parameters) {
            return base.Channel.CustomerGet(parameters);
        }
        
        public System.Threading.Tasks.Task<string> CustomerGetAsync(string parameters) {
            return base.Channel.CustomerGetAsync(parameters);
        }
        
        public string CustomerToXML(string parameters) {
            return base.Channel.CustomerToXML(parameters);
        }
        
        public System.Threading.Tasks.Task<string> CustomerToXMLAsync(string parameters) {
            return base.Channel.CustomerToXMLAsync(parameters);
        }
        
        public string CustomerToXMLByDateTime(string parameters) {
            return base.Channel.CustomerToXMLByDateTime(parameters);
        }
        
        public System.Threading.Tasks.Task<string> CustomerToXMLByDateTimeAsync(string parameters) {
            return base.Channel.CustomerToXMLByDateTimeAsync(parameters);
        }
        
        public string StoreUpsert(string parameters) {
            return base.Channel.StoreUpsert(parameters);
        }
        
        public System.Threading.Tasks.Task<string> StoreUpsertAsync(string parameters) {
            return base.Channel.StoreUpsertAsync(parameters);
        }
        
        public string StoreGet(string parameters) {
            return base.Channel.StoreGet(parameters);
        }
        
        public System.Threading.Tasks.Task<string> StoreGetAsync(string parameters) {
            return base.Channel.StoreGetAsync(parameters);
        }
        
        public string StoreToXML(string parameters) {
            return base.Channel.StoreToXML(parameters);
        }
        
        public System.Threading.Tasks.Task<string> StoreToXMLAsync(string parameters) {
            return base.Channel.StoreToXMLAsync(parameters);
        }
        
        public string RefreshTokenNoReturn(string parameters) {
            return base.Channel.RefreshTokenNoReturn(parameters);
        }
        
        public System.Threading.Tasks.Task<string> RefreshTokenNoReturnAsync(string parameters) {
            return base.Channel.RefreshTokenNoReturnAsync(parameters);
        }
        
        public string StoreToXMLByDateTime(string parameters) {
            return base.Channel.StoreToXMLByDateTime(parameters);
        }
        
        public System.Threading.Tasks.Task<string> StoreToXMLByDateTimeAsync(string parameters) {
            return base.Channel.StoreToXMLByDateTimeAsync(parameters);
        }
        
        public string PermissionUpsert(string parameters) {
            return base.Channel.PermissionUpsert(parameters);
        }
        
        public System.Threading.Tasks.Task<string> PermissionUpsertAsync(string parameters) {
            return base.Channel.PermissionUpsertAsync(parameters);
        }
        
        public string PermissionGet(string parameters) {
            return base.Channel.PermissionGet(parameters);
        }
        
        public System.Threading.Tasks.Task<string> PermissionGetAsync(string parameters) {
            return base.Channel.PermissionGetAsync(parameters);
        }
        
        public string PermissionToXML(string parameters) {
            return base.Channel.PermissionToXML(parameters);
        }
        
        public System.Threading.Tasks.Task<string> PermissionToXMLAsync(string parameters) {
            return base.Channel.PermissionToXMLAsync(parameters);
        }
        
        public string CreateUpsert(string parameters) {
            return base.Channel.CreateUpsert(parameters);
        }
        
        public System.Threading.Tasks.Task<string> CreateUpsertAsync(string parameters) {
            return base.Channel.CreateUpsertAsync(parameters);
        }
        
        public string PermissionToXMLByDateTime(string parameters) {
            return base.Channel.PermissionToXMLByDateTime(parameters);
        }
        
        public System.Threading.Tasks.Task<string> PermissionToXMLByDateTimeAsync(string parameters) {
            return base.Channel.PermissionToXMLByDateTimeAsync(parameters);
        }
        
        public string SystemUserGroupUpsert(string parameters) {
            return base.Channel.SystemUserGroupUpsert(parameters);
        }
        
        public System.Threading.Tasks.Task<string> SystemUserGroupUpsertAsync(string parameters) {
            return base.Channel.SystemUserGroupUpsertAsync(parameters);
        }
        
        public string GenerateToken(string parameters) {
            return base.Channel.GenerateToken(parameters);
        }
        
        public System.Threading.Tasks.Task<string> GenerateTokenAsync(string parameters) {
            return base.Channel.GenerateTokenAsync(parameters);
        }
        
        public string SystemUserUpsert(string parameters) {
            return base.Channel.SystemUserUpsert(parameters);
        }
        
        public System.Threading.Tasks.Task<string> SystemUserUpsertAsync(string parameters) {
            return base.Channel.SystemUserUpsertAsync(parameters);
        }
        
        public string SystemUserGroupGet(string parameters) {
            return base.Channel.SystemUserGroupGet(parameters);
        }
        
        public System.Threading.Tasks.Task<string> SystemUserGroupGetAsync(string parameters) {
            return base.Channel.SystemUserGroupGetAsync(parameters);
        }
        
        public string SystemUserGet(string parameters) {
            return base.Channel.SystemUserGet(parameters);
        }
        
        public System.Threading.Tasks.Task<string> SystemUserGetAsync(string parameters) {
            return base.Channel.SystemUserGetAsync(parameters);
        }
        
        public string SystemUserGroupToXML(string parameters) {
            return base.Channel.SystemUserGroupToXML(parameters);
        }
        
        public System.Threading.Tasks.Task<string> SystemUserGroupToXMLAsync(string parameters) {
            return base.Channel.SystemUserGroupToXMLAsync(parameters);
        }
        
        public string SystemUserGroupToXMLByDateTime(string parameters) {
            return base.Channel.SystemUserGroupToXMLByDateTime(parameters);
        }
        
        public System.Threading.Tasks.Task<string> SystemUserGroupToXMLByDateTimeAsync(string parameters) {
            return base.Channel.SystemUserGroupToXMLByDateTimeAsync(parameters);
        }
        
        public string RefreshToken(string parameters) {
            return base.Channel.RefreshToken(parameters);
        }
        
        public System.Threading.Tasks.Task<string> RefreshTokenAsync(string parameters) {
            return base.Channel.RefreshTokenAsync(parameters);
        }
        
        public string SystemUserGroupPermissionUpsert(string parameters) {
            return base.Channel.SystemUserGroupPermissionUpsert(parameters);
        }
        
        public System.Threading.Tasks.Task<string> SystemUserGroupPermissionUpsertAsync(string parameters) {
            return base.Channel.SystemUserGroupPermissionUpsertAsync(parameters);
        }
        
        public string SystemUserGroupPermissionGet(string parameters) {
            return base.Channel.SystemUserGroupPermissionGet(parameters);
        }
        
        public System.Threading.Tasks.Task<string> SystemUserGroupPermissionGetAsync(string parameters) {
            return base.Channel.SystemUserGroupPermissionGetAsync(parameters);
        }
        
        public string SystemUserGroupPermissionToXML(string parameters) {
            return base.Channel.SystemUserGroupPermissionToXML(parameters);
        }
        
        public System.Threading.Tasks.Task<string> SystemUserGroupPermissionToXMLAsync(string parameters) {
            return base.Channel.SystemUserGroupPermissionToXMLAsync(parameters);
        }
        
        public string SystemUserGroupPermissionToXMLByDateTime(string parameters) {
            return base.Channel.SystemUserGroupPermissionToXMLByDateTime(parameters);
        }
        
        public System.Threading.Tasks.Task<string> SystemUserGroupPermissionToXMLByDateTimeAsync(string parameters) {
            return base.Channel.SystemUserGroupPermissionToXMLByDateTimeAsync(parameters);
        }
        
        public string SystemUserPermissionToXML(string parameters) {
            return base.Channel.SystemUserPermissionToXML(parameters);
        }
        
        public System.Threading.Tasks.Task<string> SystemUserPermissionToXMLAsync(string parameters) {
            return base.Channel.SystemUserPermissionToXMLAsync(parameters);
        }
        
        public string SystemUserPermissionToXMLByDateTime(string parameters) {
            return base.Channel.SystemUserPermissionToXMLByDateTime(parameters);
        }
        
        public System.Threading.Tasks.Task<string> SystemUserPermissionToXMLByDateTimeAsync(string parameters) {
            return base.Channel.SystemUserPermissionToXMLByDateTimeAsync(parameters);
        }
        
        public string SystemUserGroupLineToXML(string parameters) {
            return base.Channel.SystemUserGroupLineToXML(parameters);
        }
        
        public System.Threading.Tasks.Task<string> SystemUserGroupLineToXMLAsync(string parameters) {
            return base.Channel.SystemUserGroupLineToXMLAsync(parameters);
        }
        
        public string SystemUserGroupLineToXMLByDateTime(string parameters) {
            return base.Channel.SystemUserGroupLineToXMLByDateTime(parameters);
        }
        
        public System.Threading.Tasks.Task<string> SystemUserGroupLineToXMLByDateTimeAsync(string parameters) {
            return base.Channel.SystemUserGroupLineToXMLByDateTimeAsync(parameters);
        }
        
        public string GetChildren(string parameters) {
            return base.Channel.GetChildren(parameters);
        }
        
        public System.Threading.Tasks.Task<string> GetChildrenAsync(string parameters) {
            return base.Channel.GetChildrenAsync(parameters);
        }
        
        public string CreateToXml(string parameters) {
            return base.Channel.CreateToXml(parameters);
        }
        
        public System.Threading.Tasks.Task<string> CreateToXmlAsync(string parameters) {
            return base.Channel.CreateToXmlAsync(parameters);
        }
        
        public string SystemUserPermissionUpsert(string parameters) {
            return base.Channel.SystemUserPermissionUpsert(parameters);
        }
        
        public System.Threading.Tasks.Task<string> SystemUserPermissionUpsertAsync(string parameters) {
            return base.Channel.SystemUserPermissionUpsertAsync(parameters);
        }
        
        public string SystemUserPermissionGet(string parameters) {
            return base.Channel.SystemUserPermissionGet(parameters);
        }
        
        public System.Threading.Tasks.Task<string> SystemUserPermissionGetAsync(string parameters) {
            return base.Channel.SystemUserPermissionGetAsync(parameters);
        }
        
        public string Login(string parameters) {
            return base.Channel.Login(parameters);
        }
        
        public System.Threading.Tasks.Task<string> LoginAsync(string parameters) {
            return base.Channel.LoginAsync(parameters);
        }
        
        public string AccountUpsert(string parameters) {
            return base.Channel.AccountUpsert(parameters);
        }
        
        public System.Threading.Tasks.Task<string> AccountUpsertAsync(string parameters) {
            return base.Channel.AccountUpsertAsync(parameters);
        }
        
        public string AccountGet(string parameters) {
            return base.Channel.AccountGet(parameters);
        }
        
        public System.Threading.Tasks.Task<string> AccountGetAsync(string parameters) {
            return base.Channel.AccountGetAsync(parameters);
        }
        
        public string AccountToXML(string parameters) {
            return base.Channel.AccountToXML(parameters);
        }
        
        public System.Threading.Tasks.Task<string> AccountToXMLAsync(string parameters) {
            return base.Channel.AccountToXMLAsync(parameters);
        }
        
        public string AccountToXMLByDateTime(string parameters) {
            return base.Channel.AccountToXMLByDateTime(parameters);
        }
        
        public System.Threading.Tasks.Task<string> AccountToXMLByDateTimeAsync(string parameters) {
            return base.Channel.AccountToXMLByDateTimeAsync(parameters);
        }
        
        public string AuditLogUpsert(string parameters) {
            return base.Channel.AuditLogUpsert(parameters);
        }
        
        public System.Threading.Tasks.Task<string> AuditLogUpsertAsync(string parameters) {
            return base.Channel.AuditLogUpsertAsync(parameters);
        }
        
        public string ActivityScheduleUpsert(string parameters) {
            return base.Channel.ActivityScheduleUpsert(parameters);
        }
        
        public System.Threading.Tasks.Task<string> ActivityScheduleUpsertAsync(string parameters) {
            return base.Channel.ActivityScheduleUpsertAsync(parameters);
        }
        
        public string ActivityScheduleGet(string parameters) {
            return base.Channel.ActivityScheduleGet(parameters);
        }
        
        public System.Threading.Tasks.Task<string> ActivityScheduleGetAsync(string parameters) {
            return base.Channel.ActivityScheduleGetAsync(parameters);
        }
        
        public string Tester(string parameters) {
            return base.Channel.Tester(parameters);
        }
        
        public System.Threading.Tasks.Task<string> TesterAsync(string parameters) {
            return base.Channel.TesterAsync(parameters);
        }
        
        public string ActivityScheduleToXML(string parameters) {
            return base.Channel.ActivityScheduleToXML(parameters);
        }
        
        public System.Threading.Tasks.Task<string> ActivityScheduleToXMLAsync(string parameters) {
            return base.Channel.ActivityScheduleToXMLAsync(parameters);
        }
        
        public string ActivityScheduleToXMLByDateTime(string parameters) {
            return base.Channel.ActivityScheduleToXMLByDateTime(parameters);
        }
        
        public System.Threading.Tasks.Task<string> ActivityScheduleToXMLByDateTimeAsync(string parameters) {
            return base.Channel.ActivityScheduleToXMLByDateTimeAsync(parameters);
        }
        
        public string ActivityTypeUpsert(string parameters) {
            return base.Channel.ActivityTypeUpsert(parameters);
        }
        
        public System.Threading.Tasks.Task<string> ActivityTypeUpsertAsync(string parameters) {
            return base.Channel.ActivityTypeUpsertAsync(parameters);
        }
        
        public string ActivityTypeGet(string parameters) {
            return base.Channel.ActivityTypeGet(parameters);
        }
        
        public System.Threading.Tasks.Task<string> ActivityTypeGetAsync(string parameters) {
            return base.Channel.ActivityTypeGetAsync(parameters);
        }
        
        public string ActivityTypeToXML(string parameters) {
            return base.Channel.ActivityTypeToXML(parameters);
        }
        
        public System.Threading.Tasks.Task<string> ActivityTypeToXMLAsync(string parameters) {
            return base.Channel.ActivityTypeToXMLAsync(parameters);
        }
        
        public string ActivityTypeToXMLByDateTime(string parameters) {
            return base.Channel.ActivityTypeToXMLByDateTime(parameters);
        }
        
        public System.Threading.Tasks.Task<string> ActivityTypeToXMLByDateTimeAsync(string parameters) {
            return base.Channel.ActivityTypeToXMLByDateTimeAsync(parameters);
        }
        
        public string AppointmentUpsert(string parameters) {
            return base.Channel.AppointmentUpsert(parameters);
        }
        
        public System.Threading.Tasks.Task<string> AppointmentUpsertAsync(string parameters) {
            return base.Channel.AppointmentUpsertAsync(parameters);
        }
        
        public string AppointmentGet(string parameters) {
            return base.Channel.AppointmentGet(parameters);
        }
        
        public System.Threading.Tasks.Task<string> AppointmentGetAsync(string parameters) {
            return base.Channel.AppointmentGetAsync(parameters);
        }
        
        public string AppointmentToXML(string parameters) {
            return base.Channel.AppointmentToXML(parameters);
        }
        
        public System.Threading.Tasks.Task<string> AppointmentToXMLAsync(string parameters) {
            return base.Channel.AppointmentToXMLAsync(parameters);
        }
        
        public string AppointmentToXMLByDateTime(string parameters) {
            return base.Channel.AppointmentToXMLByDateTime(parameters);
        }
        
        public System.Threading.Tasks.Task<string> AppointmentToXMLByDateTimeAsync(string parameters) {
            return base.Channel.AppointmentToXMLByDateTimeAsync(parameters);
        }
        
        public string ServiceProviderUpsert(string parameters) {
            return base.Channel.ServiceProviderUpsert(parameters);
        }
        
        public System.Threading.Tasks.Task<string> ServiceProviderUpsertAsync(string parameters) {
            return base.Channel.ServiceProviderUpsertAsync(parameters);
        }
        
        public string ServiceProviderGet(string parameters) {
            return base.Channel.ServiceProviderGet(parameters);
        }
        
        public System.Threading.Tasks.Task<string> ServiceProviderGetAsync(string parameters) {
            return base.Channel.ServiceProviderGetAsync(parameters);
        }
        
        public string ServiceProviderToXML(string parameters) {
            return base.Channel.ServiceProviderToXML(parameters);
        }
        
        public System.Threading.Tasks.Task<string> ServiceProviderToXMLAsync(string parameters) {
            return base.Channel.ServiceProviderToXMLAsync(parameters);
        }
        
        public string ServiceProviderToXMLByDateTime(string parameters) {
            return base.Channel.ServiceProviderToXMLByDateTime(parameters);
        }
        
        public System.Threading.Tasks.Task<string> ServiceProviderToXMLByDateTimeAsync(string parameters) {
            return base.Channel.ServiceProviderToXMLByDateTimeAsync(parameters);
        }
        
        public string CustomerUpsert(string parameters) {
            return base.Channel.CustomerUpsert(parameters);
        }
        
        public System.Threading.Tasks.Task<string> CustomerUpsertAsync(string parameters) {
            return base.Channel.CustomerUpsertAsync(parameters);
        }
    }
}
