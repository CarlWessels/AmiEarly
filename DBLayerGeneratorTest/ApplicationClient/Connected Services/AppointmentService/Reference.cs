//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ApplicationClient.AppointmentService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AppointmentService.IAppointmentService")]
    public interface IAppointmentService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/CreateUpsert", ReplyAction="http://tempuri.org/IAppointmentService/CreateUpsertResponse")]
        string CreateUpsert(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/CreateUpsert", ReplyAction="http://tempuri.org/IAppointmentService/CreateUpsertResponse")]
        System.Threading.Tasks.Task<string> CreateUpsertAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SystemUserUpsert", ReplyAction="http://tempuri.org/IAppointmentService/SystemUserUpsertResponse")]
        string SystemUserUpsert(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SystemUserUpsert", ReplyAction="http://tempuri.org/IAppointmentService/SystemUserUpsertResponse")]
        System.Threading.Tasks.Task<string> SystemUserUpsertAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SystemUserGet", ReplyAction="http://tempuri.org/IAppointmentService/SystemUserGetResponse")]
        string SystemUserGet(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/SystemUserGet", ReplyAction="http://tempuri.org/IAppointmentService/SystemUserGetResponse")]
        System.Threading.Tasks.Task<string> SystemUserGetAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/AccountUpsert", ReplyAction="http://tempuri.org/IAppointmentService/AccountUpsertResponse")]
        string AccountUpsert(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/AccountUpsert", ReplyAction="http://tempuri.org/IAppointmentService/AccountUpsertResponse")]
        System.Threading.Tasks.Task<string> AccountUpsertAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/AccountGet", ReplyAction="http://tempuri.org/IAppointmentService/AccountGetResponse")]
        string AccountGet(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/AccountGet", ReplyAction="http://tempuri.org/IAppointmentService/AccountGetResponse")]
        System.Threading.Tasks.Task<string> AccountGetAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/ActivityTypeUpsert", ReplyAction="http://tempuri.org/IAppointmentService/ActivityTypeUpsertResponse")]
        string ActivityTypeUpsert(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/ActivityTypeUpsert", ReplyAction="http://tempuri.org/IAppointmentService/ActivityTypeUpsertResponse")]
        System.Threading.Tasks.Task<string> ActivityTypeUpsertAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/ActivityTypeGet", ReplyAction="http://tempuri.org/IAppointmentService/ActivityTypeGetResponse")]
        string ActivityTypeGet(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/ActivityTypeGet", ReplyAction="http://tempuri.org/IAppointmentService/ActivityTypeGetResponse")]
        System.Threading.Tasks.Task<string> ActivityTypeGetAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/AppointmentUpsert", ReplyAction="http://tempuri.org/IAppointmentService/AppointmentUpsertResponse")]
        string AppointmentUpsert(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/AppointmentUpsert", ReplyAction="http://tempuri.org/IAppointmentService/AppointmentUpsertResponse")]
        System.Threading.Tasks.Task<string> AppointmentUpsertAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/AppointmentGet", ReplyAction="http://tempuri.org/IAppointmentService/AppointmentGetResponse")]
        string AppointmentGet(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/AppointmentGet", ReplyAction="http://tempuri.org/IAppointmentService/AppointmentGetResponse")]
        System.Threading.Tasks.Task<string> AppointmentGetAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/ServiceProviderUpsert", ReplyAction="http://tempuri.org/IAppointmentService/ServiceProviderUpsertResponse")]
        string ServiceProviderUpsert(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/ServiceProviderUpsert", ReplyAction="http://tempuri.org/IAppointmentService/ServiceProviderUpsertResponse")]
        System.Threading.Tasks.Task<string> ServiceProviderUpsertAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/ServiceProviderGet", ReplyAction="http://tempuri.org/IAppointmentService/ServiceProviderGetResponse")]
        string ServiceProviderGet(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/ServiceProviderGet", ReplyAction="http://tempuri.org/IAppointmentService/ServiceProviderGetResponse")]
        System.Threading.Tasks.Task<string> ServiceProviderGetAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/CustomerUpsert", ReplyAction="http://tempuri.org/IAppointmentService/CustomerUpsertResponse")]
        string CustomerUpsert(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/CustomerUpsert", ReplyAction="http://tempuri.org/IAppointmentService/CustomerUpsertResponse")]
        System.Threading.Tasks.Task<string> CustomerUpsertAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/CustomerGet", ReplyAction="http://tempuri.org/IAppointmentService/CustomerGetResponse")]
        string CustomerGet(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/CustomerGet", ReplyAction="http://tempuri.org/IAppointmentService/CustomerGetResponse")]
        System.Threading.Tasks.Task<string> CustomerGetAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/ActivityScheduleUpsert", ReplyAction="http://tempuri.org/IAppointmentService/ActivityScheduleUpsertResponse")]
        string ActivityScheduleUpsert(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/ActivityScheduleUpsert", ReplyAction="http://tempuri.org/IAppointmentService/ActivityScheduleUpsertResponse")]
        System.Threading.Tasks.Task<string> ActivityScheduleUpsertAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/ActivityScheduleGet", ReplyAction="http://tempuri.org/IAppointmentService/ActivityScheduleGetResponse")]
        string ActivityScheduleGet(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/ActivityScheduleGet", ReplyAction="http://tempuri.org/IAppointmentService/ActivityScheduleGetResponse")]
        System.Threading.Tasks.Task<string> ActivityScheduleGetAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/StoreUpsert", ReplyAction="http://tempuri.org/IAppointmentService/StoreUpsertResponse")]
        string StoreUpsert(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/StoreUpsert", ReplyAction="http://tempuri.org/IAppointmentService/StoreUpsertResponse")]
        System.Threading.Tasks.Task<string> StoreUpsertAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/StoreGet", ReplyAction="http://tempuri.org/IAppointmentService/StoreGetResponse")]
        string StoreGet(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/StoreGet", ReplyAction="http://tempuri.org/IAppointmentService/StoreGetResponse")]
        System.Threading.Tasks.Task<string> StoreGetAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/MyTestTableUpsert", ReplyAction="http://tempuri.org/IAppointmentService/MyTestTableUpsertResponse")]
        string MyTestTableUpsert(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/MyTestTableUpsert", ReplyAction="http://tempuri.org/IAppointmentService/MyTestTableUpsertResponse")]
        System.Threading.Tasks.Task<string> MyTestTableUpsertAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/MyTestTableGet", ReplyAction="http://tempuri.org/IAppointmentService/MyTestTableGetResponse")]
        string MyTestTableGet(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/MyTestTableGet", ReplyAction="http://tempuri.org/IAppointmentService/MyTestTableGetResponse")]
        System.Threading.Tasks.Task<string> MyTestTableGetAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/Login", ReplyAction="http://tempuri.org/IAppointmentService/LoginResponse")]
        string Login(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/Login", ReplyAction="http://tempuri.org/IAppointmentService/LoginResponse")]
        System.Threading.Tasks.Task<string> LoginAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/AuditLogUpsert", ReplyAction="http://tempuri.org/IAppointmentService/AuditLogUpsertResponse")]
        string AuditLogUpsert(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/AuditLogUpsert", ReplyAction="http://tempuri.org/IAppointmentService/AuditLogUpsertResponse")]
        System.Threading.Tasks.Task<string> AuditLogUpsertAsync(string parameters);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAppointmentServiceChannel : ApplicationClient.AppointmentService.IAppointmentService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AppointmentServiceClient : System.ServiceModel.ClientBase<ApplicationClient.AppointmentService.IAppointmentService>, ApplicationClient.AppointmentService.IAppointmentService {
        
        public AppointmentServiceClient() {
        }
        
        public AppointmentServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AppointmentServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AppointmentServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AppointmentServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string CreateUpsert(string parameters) {
            return base.Channel.CreateUpsert(parameters);
        }
        
        public System.Threading.Tasks.Task<string> CreateUpsertAsync(string parameters) {
            return base.Channel.CreateUpsertAsync(parameters);
        }
        
        public string SystemUserUpsert(string parameters) {
            return base.Channel.SystemUserUpsert(parameters);
        }
        
        public System.Threading.Tasks.Task<string> SystemUserUpsertAsync(string parameters) {
            return base.Channel.SystemUserUpsertAsync(parameters);
        }
        
        public string SystemUserGet(string parameters) {
            return base.Channel.SystemUserGet(parameters);
        }
        
        public System.Threading.Tasks.Task<string> SystemUserGetAsync(string parameters) {
            return base.Channel.SystemUserGetAsync(parameters);
        }
        
        public string AccountUpsert(string parameters) {
            return base.Channel.AccountUpsert(parameters);
        }
        
        public System.Threading.Tasks.Task<string> AccountUpsertAsync(string parameters) {
            return base.Channel.AccountUpsertAsync(parameters);
        }
        
        public string AccountGet(string parameters) {
            return base.Channel.AccountGet(parameters);
        }
        
        public System.Threading.Tasks.Task<string> AccountGetAsync(string parameters) {
            return base.Channel.AccountGetAsync(parameters);
        }
        
        public string ActivityTypeUpsert(string parameters) {
            return base.Channel.ActivityTypeUpsert(parameters);
        }
        
        public System.Threading.Tasks.Task<string> ActivityTypeUpsertAsync(string parameters) {
            return base.Channel.ActivityTypeUpsertAsync(parameters);
        }
        
        public string ActivityTypeGet(string parameters) {
            return base.Channel.ActivityTypeGet(parameters);
        }
        
        public System.Threading.Tasks.Task<string> ActivityTypeGetAsync(string parameters) {
            return base.Channel.ActivityTypeGetAsync(parameters);
        }
        
        public string AppointmentUpsert(string parameters) {
            return base.Channel.AppointmentUpsert(parameters);
        }
        
        public System.Threading.Tasks.Task<string> AppointmentUpsertAsync(string parameters) {
            return base.Channel.AppointmentUpsertAsync(parameters);
        }
        
        public string AppointmentGet(string parameters) {
            return base.Channel.AppointmentGet(parameters);
        }
        
        public System.Threading.Tasks.Task<string> AppointmentGetAsync(string parameters) {
            return base.Channel.AppointmentGetAsync(parameters);
        }
        
        public string ServiceProviderUpsert(string parameters) {
            return base.Channel.ServiceProviderUpsert(parameters);
        }
        
        public System.Threading.Tasks.Task<string> ServiceProviderUpsertAsync(string parameters) {
            return base.Channel.ServiceProviderUpsertAsync(parameters);
        }
        
        public string ServiceProviderGet(string parameters) {
            return base.Channel.ServiceProviderGet(parameters);
        }
        
        public System.Threading.Tasks.Task<string> ServiceProviderGetAsync(string parameters) {
            return base.Channel.ServiceProviderGetAsync(parameters);
        }
        
        public string CustomerUpsert(string parameters) {
            return base.Channel.CustomerUpsert(parameters);
        }
        
        public System.Threading.Tasks.Task<string> CustomerUpsertAsync(string parameters) {
            return base.Channel.CustomerUpsertAsync(parameters);
        }
        
        public string CustomerGet(string parameters) {
            return base.Channel.CustomerGet(parameters);
        }
        
        public System.Threading.Tasks.Task<string> CustomerGetAsync(string parameters) {
            return base.Channel.CustomerGetAsync(parameters);
        }
        
        public string ActivityScheduleUpsert(string parameters) {
            return base.Channel.ActivityScheduleUpsert(parameters);
        }
        
        public System.Threading.Tasks.Task<string> ActivityScheduleUpsertAsync(string parameters) {
            return base.Channel.ActivityScheduleUpsertAsync(parameters);
        }
        
        public string ActivityScheduleGet(string parameters) {
            return base.Channel.ActivityScheduleGet(parameters);
        }
        
        public System.Threading.Tasks.Task<string> ActivityScheduleGetAsync(string parameters) {
            return base.Channel.ActivityScheduleGetAsync(parameters);
        }
        
        public string StoreUpsert(string parameters) {
            return base.Channel.StoreUpsert(parameters);
        }
        
        public System.Threading.Tasks.Task<string> StoreUpsertAsync(string parameters) {
            return base.Channel.StoreUpsertAsync(parameters);
        }
        
        public string StoreGet(string parameters) {
            return base.Channel.StoreGet(parameters);
        }
        
        public System.Threading.Tasks.Task<string> StoreGetAsync(string parameters) {
            return base.Channel.StoreGetAsync(parameters);
        }
        
        public string MyTestTableUpsert(string parameters) {
            return base.Channel.MyTestTableUpsert(parameters);
        }
        
        public System.Threading.Tasks.Task<string> MyTestTableUpsertAsync(string parameters) {
            return base.Channel.MyTestTableUpsertAsync(parameters);
        }
        
        public string MyTestTableGet(string parameters) {
            return base.Channel.MyTestTableGet(parameters);
        }
        
        public System.Threading.Tasks.Task<string> MyTestTableGetAsync(string parameters) {
            return base.Channel.MyTestTableGetAsync(parameters);
        }
        
        public string Login(string parameters) {
            return base.Channel.Login(parameters);
        }
        
        public System.Threading.Tasks.Task<string> LoginAsync(string parameters) {
            return base.Channel.LoginAsync(parameters);
        }
        
        public string AuditLogUpsert(string parameters) {
            return base.Channel.AuditLogUpsert(parameters);
        }
        
        public System.Threading.Tasks.Task<string> AuditLogUpsertAsync(string parameters) {
            return base.Channel.AuditLogUpsertAsync(parameters);
        }
    }
}
