//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using AppointmentLibrary.Calls;
using AppointmentLibrary.Parameters;
using AppointmentLibrary.ProcResults;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.ServiceModel.Web;
using System.Text;
using System.Threading.Tasks;
using System.Web;
using System.Web.Configuration;

namespace HostedService
    {
        public partial class AppointmentService
        {
            public string ConnectionString { get; set; }

            public bool ReturnExceptionMessage
            {
                get
                {
                    return bool.Parse(WebConfigurationManager.AppSettings["ReturnExceptionMessage"]);
                }
            }

            public AppointmentService()
            {
                this.ConnectionString = WebConfigurationManager.AppSettings["ConnectionString"];
                //ReturnExceptionMessage = false;
            }


            public AppointmentService(string connectionString)
            {
                this.ConnectionString = connectionString;
            }
			public string RefreshTokenNoReturnAsList(string parameters)
			{
				return RefreshTokenNoReturnAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string RefreshTokenNoReturnAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    RefreshTokenNoReturnParameters casted = JsonConvert.DeserializeObject<RefreshTokenNoReturnParameters> (parameters);
				    List<RefreshTokenNoReturnResult> result = Calls.spRefreshTokenNoReturnCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string RefreshTokenNoReturn (string parameters)
			{
				return RefreshTokenNoReturn (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string RefreshTokenNoReturn (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    RefreshTokenNoReturnParameters casted = JsonConvert.DeserializeObject<RefreshTokenNoReturnParameters> (parameters);
				    RefreshTokenNoReturnResult result = Calls.spRefreshTokenNoReturnCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string CreateUpsertAsList(string parameters)
			{
				return CreateUpsertAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string CreateUpsertAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    CreateUpsertParameters casted = JsonConvert.DeserializeObject<CreateUpsertParameters> (parameters);
				    List<CreateUpsertResult> result = Calls.spCreateUpsertCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string CreateUpsert (string parameters)
			{
				return CreateUpsert (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string CreateUpsert (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    CreateUpsertParameters casted = JsonConvert.DeserializeObject<CreateUpsertParameters> (parameters);
				    CreateUpsertResult result = Calls.spCreateUpsertCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string GenerateTokenAsList(string parameters)
			{
				return GenerateTokenAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string GenerateTokenAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    GenerateTokenParameters casted = JsonConvert.DeserializeObject<GenerateTokenParameters> (parameters);
				    List<GenerateTokenResult> result = Calls.spGenerateTokenCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string GenerateToken (string parameters)
			{
				return GenerateToken (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string GenerateToken (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    GenerateTokenParameters casted = JsonConvert.DeserializeObject<GenerateTokenParameters> (parameters);
				    GenerateTokenResult result = Calls.spGenerateTokenCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string AccountUpsertAsList(string parameters)
			{
				return AccountUpsertAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string AccountUpsertAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    AccountUpsertParameters casted = JsonConvert.DeserializeObject<AccountUpsertParameters> (parameters);
				    List<AccountUpsertResult> result = Calls.spAccountUpsertCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string AccountUpsert (string parameters)
			{
				return AccountUpsert (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string AccountUpsert (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    AccountUpsertParameters casted = JsonConvert.DeserializeObject<AccountUpsertParameters> (parameters);
				    AccountUpsertResult result = Calls.spAccountUpsertCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string SystemUserUpsertAsList(string parameters)
			{
				return SystemUserUpsertAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string SystemUserUpsertAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    SystemUserUpsertParameters casted = JsonConvert.DeserializeObject<SystemUserUpsertParameters> (parameters);
				    List<SystemUserUpsertResult> result = Calls.spSystemUserUpsertCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string SystemUserUpsert (string parameters)
			{
				return SystemUserUpsert (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string SystemUserUpsert (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    SystemUserUpsertParameters casted = JsonConvert.DeserializeObject<SystemUserUpsertParameters> (parameters);
				    SystemUserUpsertResult result = Calls.spSystemUserUpsertCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string AccountGetAsList(string parameters)
			{
				return AccountGetAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string AccountGetAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    AccountGetParameters casted = JsonConvert.DeserializeObject<AccountGetParameters> (parameters);
				    List<AccountGetResult> result = Calls.spAccountGetCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string AccountGet (string parameters)
			{
				return AccountGet (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string AccountGet (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    AccountGetParameters casted = JsonConvert.DeserializeObject<AccountGetParameters> (parameters);
				    AccountGetResult result = Calls.spAccountGetCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string SystemUserGetAsList(string parameters)
			{
				return SystemUserGetAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string SystemUserGetAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    SystemUserGetParameters casted = JsonConvert.DeserializeObject<SystemUserGetParameters> (parameters);
				    List<SystemUserGetResult> result = Calls.spSystemUserGetCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string SystemUserGet (string parameters)
			{
				return SystemUserGet (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string SystemUserGet (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    SystemUserGetParameters casted = JsonConvert.DeserializeObject<SystemUserGetParameters> (parameters);
				    SystemUserGetResult result = Calls.spSystemUserGetCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string AccountToXMLAsList(string parameters)
			{
				return AccountToXMLAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string AccountToXMLAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    AccountToXMLParameters casted = JsonConvert.DeserializeObject<AccountToXMLParameters> (parameters);
				    List<AccountToXMLResult> result = Calls.spAccountToXMLCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string AccountToXML (string parameters)
			{
				return AccountToXML (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string AccountToXML (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    AccountToXMLParameters casted = JsonConvert.DeserializeObject<AccountToXMLParameters> (parameters);
				    AccountToXMLResult result = Calls.spAccountToXMLCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string RefreshTokenAsList(string parameters)
			{
				return RefreshTokenAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string RefreshTokenAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    RefreshTokenParameters casted = JsonConvert.DeserializeObject<RefreshTokenParameters> (parameters);
				    List<RefreshTokenResult> result = Calls.spRefreshTokenCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string RefreshToken (string parameters)
			{
				return RefreshToken (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string RefreshToken (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    RefreshTokenParameters casted = JsonConvert.DeserializeObject<RefreshTokenParameters> (parameters);
				    RefreshTokenResult result = Calls.spRefreshTokenCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string AccountToXMLByDateTimeAsList(string parameters)
			{
				return AccountToXMLByDateTimeAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string AccountToXMLByDateTimeAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    AccountToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<AccountToXMLByDateTimeParameters> (parameters);
				    List<AccountToXMLByDateTimeResult> result = Calls.spAccountToXMLByDateTimeCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string AccountToXMLByDateTime (string parameters)
			{
				return AccountToXMLByDateTime (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string AccountToXMLByDateTime (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    AccountToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<AccountToXMLByDateTimeParameters> (parameters);
				    AccountToXMLByDateTimeResult result = Calls.spAccountToXMLByDateTimeCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string ActivityScheduleUpsertAsList(string parameters)
			{
				return ActivityScheduleUpsertAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string ActivityScheduleUpsertAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    ActivityScheduleUpsertParameters casted = JsonConvert.DeserializeObject<ActivityScheduleUpsertParameters> (parameters);
				    List<ActivityScheduleUpsertResult> result = Calls.spActivityScheduleUpsertCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string ActivityScheduleUpsert (string parameters)
			{
				return ActivityScheduleUpsert (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string ActivityScheduleUpsert (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    ActivityScheduleUpsertParameters casted = JsonConvert.DeserializeObject<ActivityScheduleUpsertParameters> (parameters);
				    ActivityScheduleUpsertResult result = Calls.spActivityScheduleUpsertCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string ActivityScheduleGetAsList(string parameters)
			{
				return ActivityScheduleGetAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string ActivityScheduleGetAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    ActivityScheduleGetParameters casted = JsonConvert.DeserializeObject<ActivityScheduleGetParameters> (parameters);
				    List<ActivityScheduleGetResult> result = Calls.spActivityScheduleGetCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string ActivityScheduleGet (string parameters)
			{
				return ActivityScheduleGet (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string ActivityScheduleGet (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    ActivityScheduleGetParameters casted = JsonConvert.DeserializeObject<ActivityScheduleGetParameters> (parameters);
				    ActivityScheduleGetResult result = Calls.spActivityScheduleGetCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string ActivityScheduleToXMLAsList(string parameters)
			{
				return ActivityScheduleToXMLAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string ActivityScheduleToXMLAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    ActivityScheduleToXMLParameters casted = JsonConvert.DeserializeObject<ActivityScheduleToXMLParameters> (parameters);
				    List<ActivityScheduleToXMLResult> result = Calls.spActivityScheduleToXMLCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string ActivityScheduleToXML (string parameters)
			{
				return ActivityScheduleToXML (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string ActivityScheduleToXML (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    ActivityScheduleToXMLParameters casted = JsonConvert.DeserializeObject<ActivityScheduleToXMLParameters> (parameters);
				    ActivityScheduleToXMLResult result = Calls.spActivityScheduleToXMLCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string ActivityScheduleToXMLByDateTimeAsList(string parameters)
			{
				return ActivityScheduleToXMLByDateTimeAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string ActivityScheduleToXMLByDateTimeAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    ActivityScheduleToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<ActivityScheduleToXMLByDateTimeParameters> (parameters);
				    List<ActivityScheduleToXMLByDateTimeResult> result = Calls.spActivityScheduleToXMLByDateTimeCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string ActivityScheduleToXMLByDateTime (string parameters)
			{
				return ActivityScheduleToXMLByDateTime (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string ActivityScheduleToXMLByDateTime (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    ActivityScheduleToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<ActivityScheduleToXMLByDateTimeParameters> (parameters);
				    ActivityScheduleToXMLByDateTimeResult result = Calls.spActivityScheduleToXMLByDateTimeCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string SystemUserPermissionToXMLAsList(string parameters)
			{
				return SystemUserPermissionToXMLAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string SystemUserPermissionToXMLAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    SystemUserPermissionToXMLParameters casted = JsonConvert.DeserializeObject<SystemUserPermissionToXMLParameters> (parameters);
				    List<SystemUserPermissionToXMLResult> result = Calls.spSystemUserPermissionToXMLCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string SystemUserPermissionToXML (string parameters)
			{
				return SystemUserPermissionToXML (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string SystemUserPermissionToXML (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    SystemUserPermissionToXMLParameters casted = JsonConvert.DeserializeObject<SystemUserPermissionToXMLParameters> (parameters);
				    SystemUserPermissionToXMLResult result = Calls.spSystemUserPermissionToXMLCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string LUActivityTypeUpsertAsList(string parameters)
			{
				return LUActivityTypeUpsertAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string LUActivityTypeUpsertAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    LUActivityTypeUpsertParameters casted = JsonConvert.DeserializeObject<LUActivityTypeUpsertParameters> (parameters);
				    List<LUActivityTypeUpsertResult> result = Calls.spLUActivityTypeUpsertCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string LUActivityTypeUpsert (string parameters)
			{
				return LUActivityTypeUpsert (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string LUActivityTypeUpsert (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    LUActivityTypeUpsertParameters casted = JsonConvert.DeserializeObject<LUActivityTypeUpsertParameters> (parameters);
				    LUActivityTypeUpsertResult result = Calls.spLUActivityTypeUpsertCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string SystemUserPermissionToXMLByDateTimeAsList(string parameters)
			{
				return SystemUserPermissionToXMLByDateTimeAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string SystemUserPermissionToXMLByDateTimeAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    SystemUserPermissionToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<SystemUserPermissionToXMLByDateTimeParameters> (parameters);
				    List<SystemUserPermissionToXMLByDateTimeResult> result = Calls.spSystemUserPermissionToXMLByDateTimeCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string SystemUserPermissionToXMLByDateTime (string parameters)
			{
				return SystemUserPermissionToXMLByDateTime (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string SystemUserPermissionToXMLByDateTime (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    SystemUserPermissionToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<SystemUserPermissionToXMLByDateTimeParameters> (parameters);
				    SystemUserPermissionToXMLByDateTimeResult result = Calls.spSystemUserPermissionToXMLByDateTimeCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string LUActivityTypeGetAsList(string parameters)
			{
				return LUActivityTypeGetAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string LUActivityTypeGetAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    LUActivityTypeGetParameters casted = JsonConvert.DeserializeObject<LUActivityTypeGetParameters> (parameters);
				    List<LUActivityTypeGetResult> result = Calls.spLUActivityTypeGetCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string LUActivityTypeGet (string parameters)
			{
				return LUActivityTypeGet (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string LUActivityTypeGet (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    LUActivityTypeGetParameters casted = JsonConvert.DeserializeObject<LUActivityTypeGetParameters> (parameters);
				    LUActivityTypeGetResult result = Calls.spLUActivityTypeGetCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string LUActivityTypeToXMLAsList(string parameters)
			{
				return LUActivityTypeToXMLAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string LUActivityTypeToXMLAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    LUActivityTypeToXMLParameters casted = JsonConvert.DeserializeObject<LUActivityTypeToXMLParameters> (parameters);
				    List<LUActivityTypeToXMLResult> result = Calls.spLUActivityTypeToXMLCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string LUActivityTypeToXML (string parameters)
			{
				return LUActivityTypeToXML (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string LUActivityTypeToXML (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    LUActivityTypeToXMLParameters casted = JsonConvert.DeserializeObject<LUActivityTypeToXMLParameters> (parameters);
				    LUActivityTypeToXMLResult result = Calls.spLUActivityTypeToXMLCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string LUActivityTypeToXMLByDateTimeAsList(string parameters)
			{
				return LUActivityTypeToXMLByDateTimeAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string LUActivityTypeToXMLByDateTimeAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    LUActivityTypeToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<LUActivityTypeToXMLByDateTimeParameters> (parameters);
				    List<LUActivityTypeToXMLByDateTimeResult> result = Calls.spLUActivityTypeToXMLByDateTimeCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string LUActivityTypeToXMLByDateTime (string parameters)
			{
				return LUActivityTypeToXMLByDateTime (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string LUActivityTypeToXMLByDateTime (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    LUActivityTypeToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<LUActivityTypeToXMLByDateTimeParameters> (parameters);
				    LUActivityTypeToXMLByDateTimeResult result = Calls.spLUActivityTypeToXMLByDateTimeCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string SystemUserGroupLineToXMLAsList(string parameters)
			{
				return SystemUserGroupLineToXMLAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string SystemUserGroupLineToXMLAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    SystemUserGroupLineToXMLParameters casted = JsonConvert.DeserializeObject<SystemUserGroupLineToXMLParameters> (parameters);
				    List<SystemUserGroupLineToXMLResult> result = Calls.spSystemUserGroupLineToXMLCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string SystemUserGroupLineToXML (string parameters)
			{
				return SystemUserGroupLineToXML (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string SystemUserGroupLineToXML (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    SystemUserGroupLineToXMLParameters casted = JsonConvert.DeserializeObject<SystemUserGroupLineToXMLParameters> (parameters);
				    SystemUserGroupLineToXMLResult result = Calls.spSystemUserGroupLineToXMLCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string LUAddressTypeUpsertAsList(string parameters)
			{
				return LUAddressTypeUpsertAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string LUAddressTypeUpsertAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    LUAddressTypeUpsertParameters casted = JsonConvert.DeserializeObject<LUAddressTypeUpsertParameters> (parameters);
				    List<LUAddressTypeUpsertResult> result = Calls.spLUAddressTypeUpsertCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string LUAddressTypeUpsert (string parameters)
			{
				return LUAddressTypeUpsert (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string LUAddressTypeUpsert (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    LUAddressTypeUpsertParameters casted = JsonConvert.DeserializeObject<LUAddressTypeUpsertParameters> (parameters);
				    LUAddressTypeUpsertResult result = Calls.spLUAddressTypeUpsertCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string SystemUserGroupLineToXMLByDateTimeAsList(string parameters)
			{
				return SystemUserGroupLineToXMLByDateTimeAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string SystemUserGroupLineToXMLByDateTimeAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    SystemUserGroupLineToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<SystemUserGroupLineToXMLByDateTimeParameters> (parameters);
				    List<SystemUserGroupLineToXMLByDateTimeResult> result = Calls.spSystemUserGroupLineToXMLByDateTimeCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string SystemUserGroupLineToXMLByDateTime (string parameters)
			{
				return SystemUserGroupLineToXMLByDateTime (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string SystemUserGroupLineToXMLByDateTime (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    SystemUserGroupLineToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<SystemUserGroupLineToXMLByDateTimeParameters> (parameters);
				    SystemUserGroupLineToXMLByDateTimeResult result = Calls.spSystemUserGroupLineToXMLByDateTimeCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string LUAddressTypeGetAsList(string parameters)
			{
				return LUAddressTypeGetAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string LUAddressTypeGetAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    LUAddressTypeGetParameters casted = JsonConvert.DeserializeObject<LUAddressTypeGetParameters> (parameters);
				    List<LUAddressTypeGetResult> result = Calls.spLUAddressTypeGetCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string LUAddressTypeGet (string parameters)
			{
				return LUAddressTypeGet (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string LUAddressTypeGet (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    LUAddressTypeGetParameters casted = JsonConvert.DeserializeObject<LUAddressTypeGetParameters> (parameters);
				    LUAddressTypeGetResult result = Calls.spLUAddressTypeGetCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string LUAddressTypeToXMLAsList(string parameters)
			{
				return LUAddressTypeToXMLAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string LUAddressTypeToXMLAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    LUAddressTypeToXMLParameters casted = JsonConvert.DeserializeObject<LUAddressTypeToXMLParameters> (parameters);
				    List<LUAddressTypeToXMLResult> result = Calls.spLUAddressTypeToXMLCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string LUAddressTypeToXML (string parameters)
			{
				return LUAddressTypeToXML (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string LUAddressTypeToXML (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    LUAddressTypeToXMLParameters casted = JsonConvert.DeserializeObject<LUAddressTypeToXMLParameters> (parameters);
				    LUAddressTypeToXMLResult result = Calls.spLUAddressTypeToXMLCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string LUAddressTypeToXMLByDateTimeAsList(string parameters)
			{
				return LUAddressTypeToXMLByDateTimeAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string LUAddressTypeToXMLByDateTimeAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    LUAddressTypeToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<LUAddressTypeToXMLByDateTimeParameters> (parameters);
				    List<LUAddressTypeToXMLByDateTimeResult> result = Calls.spLUAddressTypeToXMLByDateTimeCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string LUAddressTypeToXMLByDateTime (string parameters)
			{
				return LUAddressTypeToXMLByDateTime (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string LUAddressTypeToXMLByDateTime (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    LUAddressTypeToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<LUAddressTypeToXMLByDateTimeParameters> (parameters);
				    LUAddressTypeToXMLByDateTimeResult result = Calls.spLUAddressTypeToXMLByDateTimeCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string AppointmentUpsertAsList(string parameters)
			{
				return AppointmentUpsertAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string AppointmentUpsertAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    AppointmentUpsertParameters casted = JsonConvert.DeserializeObject<AppointmentUpsertParameters> (parameters);
				    List<AppointmentUpsertResult> result = Calls.spAppointmentUpsertCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string AppointmentUpsert (string parameters)
			{
				return AppointmentUpsert (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string AppointmentUpsert (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    AppointmentUpsertParameters casted = JsonConvert.DeserializeObject<AppointmentUpsertParameters> (parameters);
				    AppointmentUpsertResult result = Calls.spAppointmentUpsertCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string AppointmentGetAsList(string parameters)
			{
				return AppointmentGetAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string AppointmentGetAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    AppointmentGetParameters casted = JsonConvert.DeserializeObject<AppointmentGetParameters> (parameters);
				    List<AppointmentGetResult> result = Calls.spAppointmentGetCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string AppointmentGet (string parameters)
			{
				return AppointmentGet (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string AppointmentGet (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    AppointmentGetParameters casted = JsonConvert.DeserializeObject<AppointmentGetParameters> (parameters);
				    AppointmentGetResult result = Calls.spAppointmentGetCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string AppointmentToXMLAsList(string parameters)
			{
				return AppointmentToXMLAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string AppointmentToXMLAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    AppointmentToXMLParameters casted = JsonConvert.DeserializeObject<AppointmentToXMLParameters> (parameters);
				    List<AppointmentToXMLResult> result = Calls.spAppointmentToXMLCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string AppointmentToXML (string parameters)
			{
				return AppointmentToXML (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string AppointmentToXML (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    AppointmentToXMLParameters casted = JsonConvert.DeserializeObject<AppointmentToXMLParameters> (parameters);
				    AppointmentToXMLResult result = Calls.spAppointmentToXMLCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string AppointmentToXMLByDateTimeAsList(string parameters)
			{
				return AppointmentToXMLByDateTimeAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string AppointmentToXMLByDateTimeAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    AppointmentToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<AppointmentToXMLByDateTimeParameters> (parameters);
				    List<AppointmentToXMLByDateTimeResult> result = Calls.spAppointmentToXMLByDateTimeCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string AppointmentToXMLByDateTime (string parameters)
			{
				return AppointmentToXMLByDateTime (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string AppointmentToXMLByDateTime (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    AppointmentToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<AppointmentToXMLByDateTimeParameters> (parameters);
				    AppointmentToXMLByDateTimeResult result = Calls.spAppointmentToXMLByDateTimeCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string ServiceProviderUpsertAsList(string parameters)
			{
				return ServiceProviderUpsertAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string ServiceProviderUpsertAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    ServiceProviderUpsertParameters casted = JsonConvert.DeserializeObject<ServiceProviderUpsertParameters> (parameters);
				    List<ServiceProviderUpsertResult> result = Calls.spServiceProviderUpsertCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string ServiceProviderUpsert (string parameters)
			{
				return ServiceProviderUpsert (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string ServiceProviderUpsert (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    ServiceProviderUpsertParameters casted = JsonConvert.DeserializeObject<ServiceProviderUpsertParameters> (parameters);
				    ServiceProviderUpsertResult result = Calls.spServiceProviderUpsertCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string GetChildrenAsList(string parameters)
			{
				return GetChildrenAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string GetChildrenAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    GetChildrenParameters casted = JsonConvert.DeserializeObject<GetChildrenParameters> (parameters);
				    List<GetChildrenResult> result = Calls.spGetChildrenCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string GetChildren (string parameters)
			{
				return GetChildren (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string GetChildren (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    GetChildrenParameters casted = JsonConvert.DeserializeObject<GetChildrenParameters> (parameters);
				    GetChildrenResult result = Calls.spGetChildrenCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string ServiceProviderGetAsList(string parameters)
			{
				return ServiceProviderGetAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string ServiceProviderGetAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    ServiceProviderGetParameters casted = JsonConvert.DeserializeObject<ServiceProviderGetParameters> (parameters);
				    List<ServiceProviderGetResult> result = Calls.spServiceProviderGetCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string ServiceProviderGet (string parameters)
			{
				return ServiceProviderGet (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string ServiceProviderGet (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    ServiceProviderGetParameters casted = JsonConvert.DeserializeObject<ServiceProviderGetParameters> (parameters);
				    ServiceProviderGetResult result = Calls.spServiceProviderGetCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string ServiceProviderToXMLAsList(string parameters)
			{
				return ServiceProviderToXMLAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string ServiceProviderToXMLAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    ServiceProviderToXMLParameters casted = JsonConvert.DeserializeObject<ServiceProviderToXMLParameters> (parameters);
				    List<ServiceProviderToXMLResult> result = Calls.spServiceProviderToXMLCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string ServiceProviderToXML (string parameters)
			{
				return ServiceProviderToXML (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string ServiceProviderToXML (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    ServiceProviderToXMLParameters casted = JsonConvert.DeserializeObject<ServiceProviderToXMLParameters> (parameters);
				    ServiceProviderToXMLResult result = Calls.spServiceProviderToXMLCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string ServiceProviderToXMLByDateTimeAsList(string parameters)
			{
				return ServiceProviderToXMLByDateTimeAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string ServiceProviderToXMLByDateTimeAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    ServiceProviderToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<ServiceProviderToXMLByDateTimeParameters> (parameters);
				    List<ServiceProviderToXMLByDateTimeResult> result = Calls.spServiceProviderToXMLByDateTimeCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string ServiceProviderToXMLByDateTime (string parameters)
			{
				return ServiceProviderToXMLByDateTime (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string ServiceProviderToXMLByDateTime (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    ServiceProviderToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<ServiceProviderToXMLByDateTimeParameters> (parameters);
				    ServiceProviderToXMLByDateTimeResult result = Calls.spServiceProviderToXMLByDateTimeCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string CustomerUpsertAsList(string parameters)
			{
				return CustomerUpsertAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string CustomerUpsertAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    CustomerUpsertParameters casted = JsonConvert.DeserializeObject<CustomerUpsertParameters> (parameters);
				    List<CustomerUpsertResult> result = Calls.spCustomerUpsertCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string CustomerUpsert (string parameters)
			{
				return CustomerUpsert (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string CustomerUpsert (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    CustomerUpsertParameters casted = JsonConvert.DeserializeObject<CustomerUpsertParameters> (parameters);
				    CustomerUpsertResult result = Calls.spCustomerUpsertCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string CustomerGetAsList(string parameters)
			{
				return CustomerGetAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string CustomerGetAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    CustomerGetParameters casted = JsonConvert.DeserializeObject<CustomerGetParameters> (parameters);
				    List<CustomerGetResult> result = Calls.spCustomerGetCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string CustomerGet (string parameters)
			{
				return CustomerGet (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string CustomerGet (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    CustomerGetParameters casted = JsonConvert.DeserializeObject<CustomerGetParameters> (parameters);
				    CustomerGetResult result = Calls.spCustomerGetCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string CustomerToXMLAsList(string parameters)
			{
				return CustomerToXMLAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string CustomerToXMLAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    CustomerToXMLParameters casted = JsonConvert.DeserializeObject<CustomerToXMLParameters> (parameters);
				    List<CustomerToXMLResult> result = Calls.spCustomerToXMLCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string CustomerToXML (string parameters)
			{
				return CustomerToXML (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string CustomerToXML (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    CustomerToXMLParameters casted = JsonConvert.DeserializeObject<CustomerToXMLParameters> (parameters);
				    CustomerToXMLResult result = Calls.spCustomerToXMLCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string CustomerToXMLByDateTimeAsList(string parameters)
			{
				return CustomerToXMLByDateTimeAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string CustomerToXMLByDateTimeAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    CustomerToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<CustomerToXMLByDateTimeParameters> (parameters);
				    List<CustomerToXMLByDateTimeResult> result = Calls.spCustomerToXMLByDateTimeCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string CustomerToXMLByDateTime (string parameters)
			{
				return CustomerToXMLByDateTime (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string CustomerToXMLByDateTime (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    CustomerToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<CustomerToXMLByDateTimeParameters> (parameters);
				    CustomerToXMLByDateTimeResult result = Calls.spCustomerToXMLByDateTimeCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string CustomerAddressUpsertAsList(string parameters)
			{
				return CustomerAddressUpsertAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string CustomerAddressUpsertAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    CustomerAddressUpsertParameters casted = JsonConvert.DeserializeObject<CustomerAddressUpsertParameters> (parameters);
				    List<CustomerAddressUpsertResult> result = Calls.spCustomerAddressUpsertCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string CustomerAddressUpsert (string parameters)
			{
				return CustomerAddressUpsert (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string CustomerAddressUpsert (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    CustomerAddressUpsertParameters casted = JsonConvert.DeserializeObject<CustomerAddressUpsertParameters> (parameters);
				    CustomerAddressUpsertResult result = Calls.spCustomerAddressUpsertCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string CustomerAddressGetAsList(string parameters)
			{
				return CustomerAddressGetAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string CustomerAddressGetAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    CustomerAddressGetParameters casted = JsonConvert.DeserializeObject<CustomerAddressGetParameters> (parameters);
				    List<CustomerAddressGetResult> result = Calls.spCustomerAddressGetCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string CustomerAddressGet (string parameters)
			{
				return CustomerAddressGet (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string CustomerAddressGet (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    CustomerAddressGetParameters casted = JsonConvert.DeserializeObject<CustomerAddressGetParameters> (parameters);
				    CustomerAddressGetResult result = Calls.spCustomerAddressGetCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string CustomerAddressToXMLAsList(string parameters)
			{
				return CustomerAddressToXMLAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string CustomerAddressToXMLAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    CustomerAddressToXMLParameters casted = JsonConvert.DeserializeObject<CustomerAddressToXMLParameters> (parameters);
				    List<CustomerAddressToXMLResult> result = Calls.spCustomerAddressToXMLCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string CustomerAddressToXML (string parameters)
			{
				return CustomerAddressToXML (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string CustomerAddressToXML (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    CustomerAddressToXMLParameters casted = JsonConvert.DeserializeObject<CustomerAddressToXMLParameters> (parameters);
				    CustomerAddressToXMLResult result = Calls.spCustomerAddressToXMLCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string CustomerAddressToXMLByDateTimeAsList(string parameters)
			{
				return CustomerAddressToXMLByDateTimeAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string CustomerAddressToXMLByDateTimeAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    CustomerAddressToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<CustomerAddressToXMLByDateTimeParameters> (parameters);
				    List<CustomerAddressToXMLByDateTimeResult> result = Calls.spCustomerAddressToXMLByDateTimeCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string CustomerAddressToXMLByDateTime (string parameters)
			{
				return CustomerAddressToXMLByDateTime (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string CustomerAddressToXMLByDateTime (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    CustomerAddressToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<CustomerAddressToXMLByDateTimeParameters> (parameters);
				    CustomerAddressToXMLByDateTimeResult result = Calls.spCustomerAddressToXMLByDateTimeCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string HasPermissionAsList(string parameters)
			{
				return HasPermissionAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string HasPermissionAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    HasPermissionParameters casted = JsonConvert.DeserializeObject<HasPermissionParameters> (parameters);
				    List<HasPermissionResult> result = Calls.spHasPermissionCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string HasPermission (string parameters)
			{
				return HasPermission (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string HasPermission (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    HasPermissionParameters casted = JsonConvert.DeserializeObject<HasPermissionParameters> (parameters);
				    HasPermissionResult result = Calls.spHasPermissionCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string StoreUpsertAsList(string parameters)
			{
				return StoreUpsertAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string StoreUpsertAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    StoreUpsertParameters casted = JsonConvert.DeserializeObject<StoreUpsertParameters> (parameters);
				    List<StoreUpsertResult> result = Calls.spStoreUpsertCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string StoreUpsert (string parameters)
			{
				return StoreUpsert (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string StoreUpsert (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    StoreUpsertParameters casted = JsonConvert.DeserializeObject<StoreUpsertParameters> (parameters);
				    StoreUpsertResult result = Calls.spStoreUpsertCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string StoreGetAsList(string parameters)
			{
				return StoreGetAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string StoreGetAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    StoreGetParameters casted = JsonConvert.DeserializeObject<StoreGetParameters> (parameters);
				    List<StoreGetResult> result = Calls.spStoreGetCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string StoreGet (string parameters)
			{
				return StoreGet (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string StoreGet (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    StoreGetParameters casted = JsonConvert.DeserializeObject<StoreGetParameters> (parameters);
				    StoreGetResult result = Calls.spStoreGetCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string CreateToXmlAsList(string parameters)
			{
				return CreateToXmlAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string CreateToXmlAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    CreateToXmlParameters casted = JsonConvert.DeserializeObject<CreateToXmlParameters> (parameters);
				    List<CreateToXmlResult> result = Calls.spCreateToXmlCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string CreateToXml (string parameters)
			{
				return CreateToXml (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string CreateToXml (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    CreateToXmlParameters casted = JsonConvert.DeserializeObject<CreateToXmlParameters> (parameters);
				    CreateToXmlResult result = Calls.spCreateToXmlCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string StoreToXMLAsList(string parameters)
			{
				return StoreToXMLAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string StoreToXMLAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    StoreToXMLParameters casted = JsonConvert.DeserializeObject<StoreToXMLParameters> (parameters);
				    List<StoreToXMLResult> result = Calls.spStoreToXMLCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string StoreToXML (string parameters)
			{
				return StoreToXML (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string StoreToXML (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    StoreToXMLParameters casted = JsonConvert.DeserializeObject<StoreToXMLParameters> (parameters);
				    StoreToXMLResult result = Calls.spStoreToXMLCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string StoreToXMLByDateTimeAsList(string parameters)
			{
				return StoreToXMLByDateTimeAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string StoreToXMLByDateTimeAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    StoreToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<StoreToXMLByDateTimeParameters> (parameters);
				    List<StoreToXMLByDateTimeResult> result = Calls.spStoreToXMLByDateTimeCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string StoreToXMLByDateTime (string parameters)
			{
				return StoreToXMLByDateTime (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string StoreToXMLByDateTime (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    StoreToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<StoreToXMLByDateTimeParameters> (parameters);
				    StoreToXMLByDateTimeResult result = Calls.spStoreToXMLByDateTimeCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string LUPermissionUpsertAsList(string parameters)
			{
				return LUPermissionUpsertAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string LUPermissionUpsertAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    LUPermissionUpsertParameters casted = JsonConvert.DeserializeObject<LUPermissionUpsertParameters> (parameters);
				    List<LUPermissionUpsertResult> result = Calls.spLUPermissionUpsertCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string LUPermissionUpsert (string parameters)
			{
				return LUPermissionUpsert (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string LUPermissionUpsert (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    LUPermissionUpsertParameters casted = JsonConvert.DeserializeObject<LUPermissionUpsertParameters> (parameters);
				    LUPermissionUpsertResult result = Calls.spLUPermissionUpsertCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string LUPermissionGetAsList(string parameters)
			{
				return LUPermissionGetAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string LUPermissionGetAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    LUPermissionGetParameters casted = JsonConvert.DeserializeObject<LUPermissionGetParameters> (parameters);
				    List<LUPermissionGetResult> result = Calls.spLUPermissionGetCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string LUPermissionGet (string parameters)
			{
				return LUPermissionGet (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string LUPermissionGet (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    LUPermissionGetParameters casted = JsonConvert.DeserializeObject<LUPermissionGetParameters> (parameters);
				    LUPermissionGetResult result = Calls.spLUPermissionGetCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string LUPermissionToXMLAsList(string parameters)
			{
				return LUPermissionToXMLAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string LUPermissionToXMLAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    LUPermissionToXMLParameters casted = JsonConvert.DeserializeObject<LUPermissionToXMLParameters> (parameters);
				    List<LUPermissionToXMLResult> result = Calls.spLUPermissionToXMLCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string LUPermissionToXML (string parameters)
			{
				return LUPermissionToXML (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string LUPermissionToXML (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    LUPermissionToXMLParameters casted = JsonConvert.DeserializeObject<LUPermissionToXMLParameters> (parameters);
				    LUPermissionToXMLResult result = Calls.spLUPermissionToXMLCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string LUPermissionToXMLByDateTimeAsList(string parameters)
			{
				return LUPermissionToXMLByDateTimeAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string LUPermissionToXMLByDateTimeAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    LUPermissionToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<LUPermissionToXMLByDateTimeParameters> (parameters);
				    List<LUPermissionToXMLByDateTimeResult> result = Calls.spLUPermissionToXMLByDateTimeCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string LUPermissionToXMLByDateTime (string parameters)
			{
				return LUPermissionToXMLByDateTime (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string LUPermissionToXMLByDateTime (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    LUPermissionToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<LUPermissionToXMLByDateTimeParameters> (parameters);
				    LUPermissionToXMLByDateTimeResult result = Calls.spLUPermissionToXMLByDateTimeCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string SystemUserGroupUpsertAsList(string parameters)
			{
				return SystemUserGroupUpsertAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string SystemUserGroupUpsertAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    SystemUserGroupUpsertParameters casted = JsonConvert.DeserializeObject<SystemUserGroupUpsertParameters> (parameters);
				    List<SystemUserGroupUpsertResult> result = Calls.spSystemUserGroupUpsertCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string SystemUserGroupUpsert (string parameters)
			{
				return SystemUserGroupUpsert (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string SystemUserGroupUpsert (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    SystemUserGroupUpsertParameters casted = JsonConvert.DeserializeObject<SystemUserGroupUpsertParameters> (parameters);
				    SystemUserGroupUpsertResult result = Calls.spSystemUserGroupUpsertCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string SystemUserGroupGetAsList(string parameters)
			{
				return SystemUserGroupGetAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string SystemUserGroupGetAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    SystemUserGroupGetParameters casted = JsonConvert.DeserializeObject<SystemUserGroupGetParameters> (parameters);
				    List<SystemUserGroupGetResult> result = Calls.spSystemUserGroupGetCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string SystemUserGroupGet (string parameters)
			{
				return SystemUserGroupGet (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string SystemUserGroupGet (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    SystemUserGroupGetParameters casted = JsonConvert.DeserializeObject<SystemUserGroupGetParameters> (parameters);
				    SystemUserGroupGetResult result = Calls.spSystemUserGroupGetCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string SystemUserGroupToXMLAsList(string parameters)
			{
				return SystemUserGroupToXMLAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string SystemUserGroupToXMLAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    SystemUserGroupToXMLParameters casted = JsonConvert.DeserializeObject<SystemUserGroupToXMLParameters> (parameters);
				    List<SystemUserGroupToXMLResult> result = Calls.spSystemUserGroupToXMLCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string SystemUserGroupToXML (string parameters)
			{
				return SystemUserGroupToXML (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string SystemUserGroupToXML (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    SystemUserGroupToXMLParameters casted = JsonConvert.DeserializeObject<SystemUserGroupToXMLParameters> (parameters);
				    SystemUserGroupToXMLResult result = Calls.spSystemUserGroupToXMLCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string SystemUserGroupToXMLByDateTimeAsList(string parameters)
			{
				return SystemUserGroupToXMLByDateTimeAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string SystemUserGroupToXMLByDateTimeAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    SystemUserGroupToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<SystemUserGroupToXMLByDateTimeParameters> (parameters);
				    List<SystemUserGroupToXMLByDateTimeResult> result = Calls.spSystemUserGroupToXMLByDateTimeCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string SystemUserGroupToXMLByDateTime (string parameters)
			{
				return SystemUserGroupToXMLByDateTime (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string SystemUserGroupToXMLByDateTime (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    SystemUserGroupToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<SystemUserGroupToXMLByDateTimeParameters> (parameters);
				    SystemUserGroupToXMLByDateTimeResult result = Calls.spSystemUserGroupToXMLByDateTimeCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string SystemUserGroupPermissionUpsertAsList(string parameters)
			{
				return SystemUserGroupPermissionUpsertAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string SystemUserGroupPermissionUpsertAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    SystemUserGroupPermissionUpsertParameters casted = JsonConvert.DeserializeObject<SystemUserGroupPermissionUpsertParameters> (parameters);
				    List<SystemUserGroupPermissionUpsertResult> result = Calls.spSystemUserGroupPermissionUpsertCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string SystemUserGroupPermissionUpsert (string parameters)
			{
				return SystemUserGroupPermissionUpsert (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string SystemUserGroupPermissionUpsert (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    SystemUserGroupPermissionUpsertParameters casted = JsonConvert.DeserializeObject<SystemUserGroupPermissionUpsertParameters> (parameters);
				    SystemUserGroupPermissionUpsertResult result = Calls.spSystemUserGroupPermissionUpsertCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string SystemUserGroupPermissionGetAsList(string parameters)
			{
				return SystemUserGroupPermissionGetAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string SystemUserGroupPermissionGetAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    SystemUserGroupPermissionGetParameters casted = JsonConvert.DeserializeObject<SystemUserGroupPermissionGetParameters> (parameters);
				    List<SystemUserGroupPermissionGetResult> result = Calls.spSystemUserGroupPermissionGetCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string SystemUserGroupPermissionGet (string parameters)
			{
				return SystemUserGroupPermissionGet (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string SystemUserGroupPermissionGet (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    SystemUserGroupPermissionGetParameters casted = JsonConvert.DeserializeObject<SystemUserGroupPermissionGetParameters> (parameters);
				    SystemUserGroupPermissionGetResult result = Calls.spSystemUserGroupPermissionGetCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string SystemUserGroupPermissionToXMLAsList(string parameters)
			{
				return SystemUserGroupPermissionToXMLAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string SystemUserGroupPermissionToXMLAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    SystemUserGroupPermissionToXMLParameters casted = JsonConvert.DeserializeObject<SystemUserGroupPermissionToXMLParameters> (parameters);
				    List<SystemUserGroupPermissionToXMLResult> result = Calls.spSystemUserGroupPermissionToXMLCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string SystemUserGroupPermissionToXML (string parameters)
			{
				return SystemUserGroupPermissionToXML (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string SystemUserGroupPermissionToXML (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    SystemUserGroupPermissionToXMLParameters casted = JsonConvert.DeserializeObject<SystemUserGroupPermissionToXMLParameters> (parameters);
				    SystemUserGroupPermissionToXMLResult result = Calls.spSystemUserGroupPermissionToXMLCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string SystemUserGroupPermissionToXMLByDateTimeAsList(string parameters)
			{
				return SystemUserGroupPermissionToXMLByDateTimeAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string SystemUserGroupPermissionToXMLByDateTimeAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    SystemUserGroupPermissionToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<SystemUserGroupPermissionToXMLByDateTimeParameters> (parameters);
				    List<SystemUserGroupPermissionToXMLByDateTimeResult> result = Calls.spSystemUserGroupPermissionToXMLByDateTimeCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string SystemUserGroupPermissionToXMLByDateTime (string parameters)
			{
				return SystemUserGroupPermissionToXMLByDateTime (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string SystemUserGroupPermissionToXMLByDateTime (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    SystemUserGroupPermissionToXMLByDateTimeParameters casted = JsonConvert.DeserializeObject<SystemUserGroupPermissionToXMLByDateTimeParameters> (parameters);
				    SystemUserGroupPermissionToXMLByDateTimeResult result = Calls.spSystemUserGroupPermissionToXMLByDateTimeCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string SystemUserPermissionUpsertAsList(string parameters)
			{
				return SystemUserPermissionUpsertAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string SystemUserPermissionUpsertAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    SystemUserPermissionUpsertParameters casted = JsonConvert.DeserializeObject<SystemUserPermissionUpsertParameters> (parameters);
				    List<SystemUserPermissionUpsertResult> result = Calls.spSystemUserPermissionUpsertCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string SystemUserPermissionUpsert (string parameters)
			{
				return SystemUserPermissionUpsert (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string SystemUserPermissionUpsert (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    SystemUserPermissionUpsertParameters casted = JsonConvert.DeserializeObject<SystemUserPermissionUpsertParameters> (parameters);
				    SystemUserPermissionUpsertResult result = Calls.spSystemUserPermissionUpsertCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string SystemUserPermissionGetAsList(string parameters)
			{
				return SystemUserPermissionGetAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string SystemUserPermissionGetAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    SystemUserPermissionGetParameters casted = JsonConvert.DeserializeObject<SystemUserPermissionGetParameters> (parameters);
				    List<SystemUserPermissionGetResult> result = Calls.spSystemUserPermissionGetCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string SystemUserPermissionGet (string parameters)
			{
				return SystemUserPermissionGet (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string SystemUserPermissionGet (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    SystemUserPermissionGetParameters casted = JsonConvert.DeserializeObject<SystemUserPermissionGetParameters> (parameters);
				    SystemUserPermissionGetResult result = Calls.spSystemUserPermissionGetCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string LoginAsList(string parameters)
			{
				return LoginAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string LoginAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    LoginParameters casted = JsonConvert.DeserializeObject<LoginParameters> (parameters);
				    List<LoginResult> result = Calls.spLoginCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string Login (string parameters)
			{
				return Login (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string Login (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    LoginParameters casted = JsonConvert.DeserializeObject<LoginParameters> (parameters);
				    LoginResult result = Calls.spLoginCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string GenerateTokenNoReturnAsList(string parameters)
			{
				return GenerateTokenNoReturnAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string GenerateTokenNoReturnAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    GenerateTokenNoReturnParameters casted = JsonConvert.DeserializeObject<GenerateTokenNoReturnParameters> (parameters);
				    List<GenerateTokenNoReturnResult> result = Calls.spGenerateTokenNoReturnCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string GenerateTokenNoReturn (string parameters)
			{
				return GenerateTokenNoReturn (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string GenerateTokenNoReturn (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    GenerateTokenNoReturnParameters casted = JsonConvert.DeserializeObject<GenerateTokenNoReturnParameters> (parameters);
				    GenerateTokenNoReturnResult result = Calls.spGenerateTokenNoReturnCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			public string AuditLogUpsertAsList(string parameters)
			{
				return AuditLogUpsertAsList(parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string AuditLogUpsertAsList(string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    AuditLogUpsertParameters casted = JsonConvert.DeserializeObject<AuditLogUpsertParameters> (parameters);
				    List<AuditLogUpsertResult> result = Calls.spAuditLogUpsertCall(casted, connectionString);
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
			
			public string AuditLogUpsert (string parameters)
			{
				return AuditLogUpsert (parameters, ConnectionString, ReturnExceptionMessage);
			}
			public static string AuditLogUpsert (string parameters, string connectionString, bool returnExceptionMessage)
			{
				try
				{
				    AuditLogUpsertParameters casted = JsonConvert.DeserializeObject<AuditLogUpsertParameters> (parameters);
				    AuditLogUpsertResult result = Calls.spAuditLogUpsertCall(casted, connectionString).FirstOrDefault();
				
				    string json = JsonConvert.SerializeObject(result);
				    return json;
				}
				catch (Exception ex)
				{
				    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
				    response.StatusCode = HttpStatusCode.BadRequest;
				    if (returnExceptionMessage)
				    {
				        response.StatusDescription = ex.Message;
				        HttpContext.Current.Response.Write(ex.Message);
				    }
				    else
				    {
				        response.StatusDescription = "Failed with transaction";
				        HttpContext.Current.Response.Write("Failed with transaction");
				    }
				    return null;
				}
			}
     }
}
